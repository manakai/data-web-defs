{
   "actions" : {
      "after after body;COMMENT" : [
         {
            "position" : "document",
            "type" : "insert a comment"
         }
      ],
      "after after body;END-ELSE" : [
         {
            "type" : "parse error"
         },
         {
            "im" : "in body",
            "type" : "switch the insertion mode"
         },
         {
            "type" : "reprocess the token"
         }
      ],
      "after after body;EOF" : [
         {
            "type" : "stop parsing"
         }
      ],
      "after after body;START-ELSE" : [
         {
            "type" : "parse error"
         },
         {
            "im" : "in body",
            "type" : "switch the insertion mode"
         },
         {
            "type" : "reprocess the token"
         }
      ],
      "after after body;START:html" : [
         {
            "im" : "in body",
            "type" : "USING-THE-RULES-FOR"
         }
      ],
      "after after body;TEXT" : [
         {
            "actions" : [
               {
                  "type" : "parse error"
               },
               {
                  "im" : "in body",
                  "type" : "switch the insertion mode"
               },
               {
                  "type" : "reprocess the token"
               }
            ],
            "type" : "text-with-optional-ws-prefix",
            "ws_actions" : [
               {
                  "type" : "reconstruct the active formatting elements"
               },
               {
                  "type" : "insert-chars"
               }
            ]
         }
      ],
      "after after frameset;COMMENT" : [
         {
            "position" : "document",
            "type" : "insert a comment"
         }
      ],
      "after after frameset;END-ELSE" : [
         {
            "type" : "parse error"
         },
         {
            "type" : "ignore the token"
         }
      ],
      "after after frameset;EOF" : [
         {
            "type" : "stop parsing"
         }
      ],
      "after after frameset;START-ELSE" : [
         {
            "type" : "parse error"
         },
         {
            "type" : "ignore the token"
         }
      ],
      "after after frameset;START:html" : [
         {
            "im" : "in body",
            "type" : "USING-THE-RULES-FOR"
         }
      ],
      "after after frameset;START:noframes" : [
         {
            "im" : "in head",
            "type" : "USING-THE-RULES-FOR"
         }
      ],
      "after after frameset;TEXT" : [
         {
            "actions" : [
            ],
            "char_actions" : [
               {
                  "type" : "parse error"
               }
            ],
            "type" : "process-chars",
            "ws_seq_actions" : [
               {
                  "type" : "reconstruct the active formatting elements"
               },
               {
                  "type" : "insert-chars"
               }
            ]
         }
      ],
      "after body;COMMENT" : [
         {
            "position" : "oe[0]",
            "type" : "insert a comment"
         }
      ],
      "after body;DOCTYPE" : [
         {
            "type" : "parse error"
         },
         {
            "type" : "ignore the token"
         }
      ],
      "after body;END-ELSE" : [
         {
            "type" : "parse error"
         },
         {
            "im" : "in body",
            "type" : "switch the insertion mode"
         },
         {
            "type" : "reprocess the token"
         }
      ],
      "after body;END:html" : [
         {
            "actions" : [
               {
                  "type" : "parse error"
               },
               {
                  "type" : "ignore the token"
               }
            ],
            "cond" : [
               "fragment"
            ],
            "false_actions" : [
               {
                  "im" : "after after body",
                  "type" : "switch the insertion mode"
               }
            ],
            "type" : "if"
         }
      ],
      "after body;EOF" : [
         {
            "type" : "stop parsing"
         }
      ],
      "after body;START-ELSE" : [
         {
            "type" : "parse error"
         },
         {
            "im" : "in body",
            "type" : "switch the insertion mode"
         },
         {
            "type" : "reprocess the token"
         }
      ],
      "after body;START:html" : [
         {
            "im" : "in body",
            "type" : "USING-THE-RULES-FOR"
         }
      ],
      "after body;TEXT" : [
         {
            "actions" : [
               {
                  "type" : "parse error"
               },
               {
                  "im" : "in body",
                  "type" : "switch the insertion mode"
               },
               {
                  "type" : "reprocess the token"
               }
            ],
            "type" : "text-with-optional-ws-prefix",
            "ws_actions" : [
               {
                  "type" : "reconstruct the active formatting elements"
               },
               {
                  "type" : "insert-chars"
               }
            ]
         }
      ],
      "after frameset;COMMENT" : [
         {
            "type" : "insert a comment"
         }
      ],
      "after frameset;DOCTYPE" : [
         {
            "type" : "parse error"
         },
         {
            "type" : "ignore the token"
         }
      ],
      "after frameset;END-ELSE" : [
         {
            "type" : "parse error"
         },
         {
            "type" : "ignore the token"
         }
      ],
      "after frameset;END:html" : [
         {
            "im" : "after after frameset",
            "type" : "switch the insertion mode"
         }
      ],
      "after frameset;EOF" : [
         {
            "type" : "stop parsing"
         }
      ],
      "after frameset;START-ELSE" : [
         {
            "type" : "parse error"
         },
         {
            "type" : "ignore the token"
         }
      ],
      "after frameset;START:html" : [
         {
            "im" : "in body",
            "type" : "USING-THE-RULES-FOR"
         }
      ],
      "after frameset;START:noframes" : [
         {
            "im" : "in head",
            "type" : "USING-THE-RULES-FOR"
         }
      ],
      "after frameset;TEXT" : [
         {
            "actions" : [
            ],
            "char_actions" : [
               {
                  "type" : "parse error"
               }
            ],
            "type" : "process-chars",
            "ws_seq_actions" : [
               {
                  "type" : "insert-chars"
               }
            ]
         }
      ],
      "after head;COMMENT" : [
         {
            "type" : "insert a comment"
         }
      ],
      "after head;DOCTYPE" : [
         {
            "type" : "parse error"
         },
         {
            "type" : "ignore the token"
         }
      ],
      "after head;END-ELSE" : [
         {
            "type" : "parse error"
         },
         {
            "type" : "ignore the token"
         }
      ],
      "after head;END:body,br,html" : [
         {
            "attrs" : "none",
            "tag_name" : "body",
            "type" : "insert an HTML element"
         },
         {
            "im" : "in body",
            "type" : "switch the insertion mode"
         },
         {
            "type" : "reprocess the token"
         }
      ],
      "after head;END:template" : [
         {
            "im" : "in head",
            "type" : "USING-THE-RULES-FOR"
         }
      ],
      "after head;EOF" : [
         {
            "attrs" : "none",
            "tag_name" : "body",
            "type" : "insert an HTML element"
         },
         {
            "im" : "in body",
            "type" : "switch the insertion mode"
         },
         {
            "type" : "reprocess the token"
         }
      ],
      "after head;START-ELSE" : [
         {
            "attrs" : "none",
            "tag_name" : "body",
            "type" : "insert an HTML element"
         },
         {
            "im" : "in body",
            "type" : "switch the insertion mode"
         },
         {
            "type" : "reprocess the token"
         }
      ],
      "after head;START:base,basefont bgsound link,meta,noframes,script,style,template,title" : [
         {
            "type" : "parse error"
         },
         {
            "item" : "head element pointer",
            "type" : "push-oe"
         },
         {
            "im" : "in head",
            "type" : "USING-THE-RULES-FOR"
         },
         {
            "item" : "head element pointer",
            "type" : "remove-oe"
         }
      ],
      "after head;START:body" : [
         {
            "type" : "insert an HTML element"
         },
         {
            "target" : "frameset-ok",
            "type" : "set-false"
         },
         {
            "im" : "in body",
            "type" : "switch the insertion mode"
         }
      ],
      "after head;START:frameset" : [
         {
            "type" : "insert an HTML element"
         },
         {
            "im" : "in frameset",
            "type" : "switch the insertion mode"
         }
      ],
      "after head;START:head" : [
         {
            "type" : "parse error"
         },
         {
            "type" : "ignore the token"
         }
      ],
      "after head;START:html" : [
         {
            "im" : "in body",
            "type" : "USING-THE-RULES-FOR"
         }
      ],
      "after head;TEXT" : [
         {
            "actions" : [
               {
                  "attrs" : "none",
                  "tag_name" : "body",
                  "type" : "insert an HTML element"
               },
               {
                  "im" : "in body",
                  "type" : "switch the insertion mode"
               },
               {
                  "type" : "reprocess the token"
               }
            ],
            "type" : "text-with-optional-ws-prefix",
            "ws_actions" : [
               {
                  "type" : "insert-chars"
               }
            ]
         }
      ],
      "before head;COMMENT" : [
         {
            "type" : "insert a comment"
         }
      ],
      "before head;DOCTYPE" : [
         {
            "type" : "parse error"
         },
         {
            "type" : "ignore the token"
         }
      ],
      "before head;END-ELSE" : [
         {
            "type" : "parse error"
         },
         {
            "type" : "ignore the token"
         }
      ],
      "before head;END:body,br,head,html" : [
         {
            "attrs" : "none",
            "tag_name" : "head",
            "type" : "insert an HTML element"
         },
         {
            "type" : "set-head-element-pointer"
         },
         {
            "im" : "in head",
            "type" : "switch the insertion mode"
         },
         {
            "type" : "reprocess the token"
         }
      ],
      "before head;EOF" : [
         {
            "attrs" : "none",
            "tag_name" : "head",
            "type" : "insert an HTML element"
         },
         {
            "type" : "set-head-element-pointer"
         },
         {
            "im" : "in head",
            "type" : "switch the insertion mode"
         },
         {
            "type" : "reprocess the token"
         }
      ],
      "before head;START-ELSE" : [
         {
            "attrs" : "none",
            "tag_name" : "head",
            "type" : "insert an HTML element"
         },
         {
            "type" : "set-head-element-pointer"
         },
         {
            "im" : "in head",
            "type" : "switch the insertion mode"
         },
         {
            "type" : "reprocess the token"
         }
      ],
      "before head;START:head" : [
         {
            "type" : "insert an HTML element"
         },
         {
            "type" : "set-head-element-pointer"
         },
         {
            "im" : "in head",
            "type" : "switch the insertion mode"
         }
      ],
      "before head;START:html" : [
         {
            "im" : "in body",
            "type" : "USING-THE-RULES-FOR"
         }
      ],
      "before head;TEXT" : [
         {
            "actions" : [
               {
                  "attrs" : "none",
                  "tag_name" : "head",
                  "type" : "insert an HTML element"
               },
               {
                  "type" : "set-head-element-pointer"
               },
               {
                  "im" : "in head",
                  "type" : "switch the insertion mode"
               },
               {
                  "type" : "pop-oe"
               },
               {
                  "im" : "after head",
                  "type" : "switch the insertion mode"
               },
               {
                  "attrs" : "none",
                  "tag_name" : "body",
                  "type" : "insert an HTML element"
               },
               {
                  "im" : "in body",
                  "type" : "switch the insertion mode"
               },
               {
                  "type" : "reprocess the token"
               }
            ],
            "type" : "text-with-optional-ws-prefix",
            "ws_actions" : [
               {
                  "type" : "ignore the token"
               }
            ]
         }
      ],
      "before html;COMMENT" : [
         {
            "position" : "document",
            "type" : "insert a comment"
         }
      ],
      "before html;DOCTYPE" : [
         {
            "type" : "parse error"
         },
         {
            "type" : "ignore the token"
         }
      ],
      "before html;END-ELSE" : [
         {
            "type" : "parse error"
         },
         {
            "type" : "ignore the token"
         }
      ],
      "before html;END:body,br,head,html" : [
         {
            "local_name" : "html",
            "type" : "create an HTML element"
         },
         {
            "type" : "append-to-document"
         },
         {
            "type" : "push-oe"
         },
         {
            "type" : "appcache-processing"
         },
         {
            "im" : "before head",
            "type" : "switch the insertion mode"
         },
         {
            "type" : "reprocess the token"
         }
      ],
      "before html;EOF" : [
         {
            "local_name" : "html",
            "type" : "create an HTML element"
         },
         {
            "type" : "append-to-document"
         },
         {
            "type" : "push-oe"
         },
         {
            "type" : "appcache-processing"
         },
         {
            "im" : "before head",
            "type" : "switch the insertion mode"
         },
         {
            "type" : "reprocess the token"
         }
      ],
      "before html;START-ELSE" : [
         {
            "local_name" : "html",
            "type" : "create an HTML element"
         },
         {
            "type" : "append-to-document"
         },
         {
            "type" : "push-oe"
         },
         {
            "type" : "appcache-processing"
         },
         {
            "im" : "before head",
            "type" : "switch the insertion mode"
         },
         {
            "type" : "reprocess the token"
         }
      ],
      "before html;START:html" : [
         {
            "type" : "create an HTML element"
         },
         {
            "type" : "append-to-document"
         },
         {
            "type" : "push-oe"
         },
         {
            "type" : "appcache-processing"
         },
         {
            "im" : "before head",
            "type" : "switch the insertion mode"
         }
      ],
      "before html;TEXT" : [
         {
            "actions" : [
               {
                  "local_name" : "html",
                  "type" : "create an HTML element"
               },
               {
                  "type" : "append-to-document"
               },
               {
                  "type" : "push-oe"
               },
               {
                  "type" : "appcache-processing"
               },
               {
                  "im" : "before head",
                  "type" : "switch the insertion mode"
               },
               {
                  "attrs" : "none",
                  "tag_name" : "head",
                  "type" : "insert an HTML element"
               },
               {
                  "type" : "set-head-element-pointer"
               },
               {
                  "im" : "in head",
                  "type" : "switch the insertion mode"
               },
               {
                  "type" : "pop-oe"
               },
               {
                  "im" : "after head",
                  "type" : "switch the insertion mode"
               },
               {
                  "attrs" : "none",
                  "tag_name" : "body",
                  "type" : "insert an HTML element"
               },
               {
                  "im" : "in body",
                  "type" : "switch the insertion mode"
               },
               {
                  "type" : "reprocess the token"
               }
            ],
            "type" : "text-with-optional-ws-prefix",
            "ws_actions" : [
               {
                  "type" : "ignore the token"
               }
            ]
         }
      ],
      "in body;COMMENT" : [
         {
            "type" : "insert a comment"
         }
      ],
      "in body;DOCTYPE" : [
         {
            "type" : "parse error"
         },
         {
            "type" : "ignore the token"
         }
      ],
      "in body;END-ELSE" : [
         {
            "actions" : [
               {
                  "actions" : [
                     {
                        "except" : {
                           "ns" : "HTML",
                           "same_tag_name_as_token" : 1
                        },
                        "type" : "pop-oe",
                        "while" : "HTML:dd HTML:dt HTML:li HTML:optgroup,HTML:option HTML:p HTML:rp,HTML:rt"
                     },
                     {
                        "actions" : [
                           {
                              "type" : "parse error"
                           }
                        ],
                        "cond" : [
                           "oe[-1]",
                           "is",
                           "node"
                        ],
                        "type" : "if"
                     },
                     {
                        "type" : "pop-oe",
                        "until" : "node"
                     },
                     {
                        "type" : "abort these steps"
                     }
                  ],
                  "cond" : [
                     "node",
                     "is",
                     {
                        "ns" : "HTML",
                        "same_tag_name_as_token" : 1
                     }
                  ],
                  "false_actions" : [
                     {
                        "actions" : [
                           {
                              "type" : "parse error"
                           },
                           {
                              "type" : "ignore the token"
                           },
                           {
                              "type" : "abort these steps"
                           }
                        ],
                        "cond" : [
                           "node",
                           "is",
                           "HTML:address,HTML:div HTML:applet,HTML:marquee,HTML:object,MathML:annotation-xml HTML:area,HTML:article,HTML:aside,HTML:base,HTML:basefont,HTML:bgsound,HTML:blockquote,HTML:br,HTML:center,HTML:col,HTML:details,HTML:dir,HTML:dl,HTML:embed,HTML:fieldset,HTML:figcaption,HTML:figure,HTML:footer,HTML:form,HTML:frame,HTML:frameset,HTML:head,HTML:header,HTML:hgroup,HTML:hr,HTML:iframe,HTML:img,HTML:input,HTML:isindex,HTML:link,HTML:listing,HTML:main,HTML:menu,HTML:menuitem,HTML:meta,HTML:nav,HTML:noembed,HTML:noframes,HTML:noscript,HTML:param,HTML:plaintext,HTML:pre,HTML:script,HTML:section,HTML:select,HTML:source,HTML:style,HTML:summary,HTML:textarea,HTML:title,HTML:track,HTML:wbr,HTML:xmp HTML:body HTML:button HTML:caption HTML:colgroup HTML:dd HTML:dt HTML:h1,HTML:h2,HTML:h3,HTML:h4,HTML:h5,HTML:h6 HTML:html HTML:li HTML:ol,HTML:ul HTML:p HTML:table HTML:tbody,HTML:tfoot,HTML:thead HTML:td,HTML:th HTML:template HTML:tr MathML:mi,MathML:mn,MathML:mo,MathML:ms,MathML:mtext SVG:desc,SVG:foreignObject,SVG:title"
                        ],
                        "type" : "if"
                     }
                  ],
                  "type" : "if"
               }
            ],
            "between_actions" : [
            ],
            "type" : "for-each-reverse-oe-as-node"
         }
      ],
      "in body;END:a,b big code em i s small strike strong tt u,font,nobr" : [
         {
            "type" : "adoption agency algorithm"
         }
      ],
      "in body;END:address article aside details dialog dir fieldset figcaption figure footer header hgroup main nav section summary,blockquote center div dl menu ol ul,button,listing pre" : [
         {
            "actions" : [
               {
                  "type" : "parse error"
               },
               {
                  "type" : "ignore the token"
               }
            ],
            "cond" : [
               "oe",
               "not in scope",
               "scope",
               "HTML-same-tag-name"
            ],
            "false_actions" : [
               {
                  "type" : "pop-oe",
                  "while" : "HTML:dd HTML:dt HTML:li HTML:optgroup,HTML:option HTML:p HTML:rp,HTML:rt"
               },
               {
                  "actions" : [
                     {
                        "type" : "parse error"
                     }
                  ],
                  "cond" : [
                     "oe[-1]",
                     "is not",
                     "HTML-same-tag-name"
                  ],
                  "type" : "if"
               },
               {
                  "type" : "pop-oe",
                  "until" : "HTML-same-tag-name"
               }
            ],
            "type" : "if"
         }
      ],
      "in body;END:applet marquee object" : [
         {
            "actions" : [
               {
                  "type" : "parse error"
               },
               {
                  "type" : "ignore the token"
               }
            ],
            "cond" : [
               "oe",
               "not in scope",
               "scope",
               "HTML-same-tag-name"
            ],
            "false_actions" : [
               {
                  "type" : "pop-oe",
                  "while" : "HTML:dd HTML:dt HTML:li HTML:optgroup,HTML:option HTML:p HTML:rp,HTML:rt"
               },
               {
                  "actions" : [
                     {
                        "type" : "parse error"
                     }
                  ],
                  "cond" : [
                     "oe[-1]",
                     "is not",
                     "HTML-same-tag-name"
                  ],
                  "type" : "if"
               },
               {
                  "type" : "pop-oe",
                  "until" : "HTML-same-tag-name"
               },
               {
                  "type" : "clear the list of active formatting elements up to the last marker"
               }
            ],
            "type" : "if"
         }
      ],
      "in body;END:body" : [
         {
            "actions" : [
               {
                  "type" : "parse error"
               },
               {
                  "type" : "ignore the token"
               }
            ],
            "cond" : [
               "oe",
               "not in scope",
               "scope",
               "HTML:body"
            ],
            "false_actions" : [
               {
                  "actions" : [
                     {
                        "type" : "parse error"
                     }
                  ],
                  "cond" : [
                     "oe",
                     "in scope not",
                     "all",
                     "HTML:body HTML:dd HTML:dt HTML:html HTML:li HTML:optgroup,HTML:option HTML:p HTML:rp,HTML:rt HTML:tbody,HTML:tfoot,HTML:thead HTML:td,HTML:th HTML:tr"
                  ],
                  "type" : "if"
               },
               {
                  "im" : "after body",
                  "type" : "switch the insertion mode"
               }
            ],
            "type" : "if"
         }
      ],
      "in body;END:br" : [
         {
            "type" : "parse error"
         },
         {
            "type" : "reprocess \u003Cbr>"
         }
      ],
      "in body;END:dd dt" : [
         {
            "actions" : [
               {
                  "type" : "parse error"
               },
               {
                  "type" : "ignore the token"
               }
            ],
            "cond" : [
               "oe",
               "not in scope",
               "scope",
               "HTML-same-tag-name"
            ],
            "false_actions" : [
               {
                  "except" : {
                     "ns" : "HTML",
                     "same_tag_name_as_token" : 1
                  },
                  "type" : "pop-oe",
                  "while" : "HTML:dd HTML:dt HTML:li HTML:optgroup,HTML:option HTML:p HTML:rp,HTML:rt"
               },
               {
                  "actions" : [
                     {
                        "type" : "parse error"
                     }
                  ],
                  "cond" : [
                     "oe[-1]",
                     "is not",
                     "HTML-same-tag-name"
                  ],
                  "type" : "if"
               },
               {
                  "type" : "pop-oe",
                  "until" : "HTML-same-tag-name"
               }
            ],
            "type" : "if"
         }
      ],
      "in body;END:form" : [
         {
            "actions" : [
               {
                  "type" : "set-node",
                  "value" : "form element pointer"
               },
               {
                  "target" : "form element pointer",
                  "type" : "set-null"
               },
               {
                  "actions" : [
                     {
                        "type" : "parse error"
                     },
                     {
                        "type" : "abort these steps"
                     },
                     {
                        "type" : "ignore the token"
                     }
                  ],
                  "cond" : [
                     "or",
                     [
                        "node",
                        "is null"
                     ],
                     [
                        "oe",
                        "not in scope",
                        "all",
                        "node"
                     ]
                  ],
                  "type" : "if"
               },
               {
                  "type" : "pop-oe",
                  "while" : "HTML:dd HTML:dt HTML:li HTML:optgroup,HTML:option HTML:p HTML:rp,HTML:rt"
               },
               {
                  "actions" : [
                     {
                        "type" : "parse error"
                     }
                  ],
                  "cond" : [
                     "oe[-1]",
                     "is",
                     "node"
                  ],
                  "type" : "if"
               },
               {
                  "item" : "node",
                  "type" : "remove-oe"
               }
            ],
            "cond" : [
               "oe",
               "not in scope",
               "all",
               "HTML:template"
            ],
            "type" : "if"
         },
         {
            "actions" : [
               {
                  "actions" : [
                     {
                        "type" : "parse error"
                     },
                     {
                        "type" : "abort these steps"
                     },
                     {
                        "type" : "ignore the token"
                     }
                  ],
                  "cond" : [
                     "oe",
                     "not in scope",
                     "scope",
                     "HTML:form"
                  ],
                  "type" : "if"
               },
               {
                  "type" : "pop-oe",
                  "while" : "HTML:dd HTML:dt HTML:li HTML:optgroup,HTML:option HTML:p HTML:rp,HTML:rt"
               },
               {
                  "actions" : [
                     {
                        "type" : "parse error"
                     }
                  ],
                  "cond" : [
                     "oe[-1]",
                     "is not",
                     "HTML:form"
                  ],
                  "type" : "if"
               },
               {
                  "type" : "pop-oe",
                  "until" : "HTML:form"
               }
            ],
            "cond" : [
               "oe",
               "in scope",
               "all",
               "HTML:template"
            ],
            "type" : "if"
         }
      ],
      "in body;END:h1 h2 h3 h4 h5 h6" : [
         {
            "actions" : [
               {
                  "type" : "parse error"
               },
               {
                  "type" : "ignore the token"
               }
            ],
            "cond" : [
               "oe",
               "not in scope",
               "scope",
               "HTML:h1,HTML:h2,HTML:h3,HTML:h4,HTML:h5,HTML:h6"
            ],
            "false_actions" : [
               {
                  "type" : "pop-oe",
                  "while" : "HTML:dd HTML:dt HTML:li HTML:optgroup,HTML:option HTML:p HTML:rp,HTML:rt"
               },
               {
                  "actions" : [
                     {
                        "type" : "parse error"
                     }
                  ],
                  "cond" : [
                     "oe[-1]",
                     "is not",
                     "HTML-same-tag-name"
                  ],
                  "type" : "if"
               },
               {
                  "type" : "pop-oe",
                  "until" : "HTML:h1,HTML:h2,HTML:h3,HTML:h4,HTML:h5,HTML:h6"
               }
            ],
            "type" : "if"
         }
      ],
      "in body;END:html" : [
         {
            "actions" : [
               {
                  "type" : "parse error"
               },
               {
                  "type" : "ignore the token"
               }
            ],
            "cond" : [
               "oe",
               "not in scope",
               "scope",
               "HTML:body"
            ],
            "false_actions" : [
               {
                  "actions" : [
                     {
                        "type" : "parse error"
                     }
                  ],
                  "cond" : [
                     "oe",
                     "in scope not",
                     "all",
                     "HTML:body HTML:dd HTML:dt HTML:html HTML:li HTML:optgroup,HTML:option HTML:p HTML:rp,HTML:rt HTML:tbody,HTML:tfoot,HTML:thead HTML:td,HTML:th HTML:tr"
                  ],
                  "type" : "if"
               },
               {
                  "im" : "after body",
                  "type" : "switch the insertion mode"
               },
               {
                  "type" : "reprocess the token"
               }
            ],
            "type" : "if"
         }
      ],
      "in body;END:li" : [
         {
            "actions" : [
               {
                  "type" : "parse error"
               },
               {
                  "type" : "ignore the token"
               }
            ],
            "cond" : [
               "oe",
               "not in scope",
               "list item",
               "HTML:li"
            ],
            "false_actions" : [
               {
                  "type" : "pop-oe",
                  "while" : "HTML:dd HTML:dt HTML:optgroup,HTML:option HTML:p HTML:rp,HTML:rt"
               },
               {
                  "actions" : [
                     {
                        "type" : "parse error"
                     }
                  ],
                  "cond" : [
                     "oe[-1]",
                     "is not",
                     "HTML:li"
                  ],
                  "type" : "if"
               },
               {
                  "type" : "pop-oe",
                  "until" : "HTML:li"
               }
            ],
            "type" : "if"
         }
      ],
      "in body;END:p" : [
         {
            "actions" : [
               {
                  "type" : "parse error"
               },
               {
                  "attrs" : "none",
                  "tag_name" : "p",
                  "type" : "insert an HTML element"
               }
            ],
            "cond" : [
               "oe",
               "not in scope",
               "button",
               "HTML:p"
            ],
            "type" : "if"
         },
         {
            "type" : "pop-oe",
            "while" : "HTML:dd HTML:dt HTML:li HTML:optgroup,HTML:option HTML:rp,HTML:rt"
         },
         {
            "actions" : [
               {
                  "type" : "parse error"
               }
            ],
            "cond" : [
               "oe[-1]",
               "is not",
               "HTML:p"
            ],
            "type" : "if"
         },
         {
            "type" : "pop-oe",
            "until" : "HTML:p"
         }
      ],
      "in body;END:sarcasm" : [
         {
            "type" : "take a deep breath"
         },
         {
            "actions" : [
               {
                  "actions" : [
                     {
                        "except" : {
                           "ns" : "HTML",
                           "same_tag_name_as_token" : 1
                        },
                        "type" : "pop-oe",
                        "while" : "HTML:dd HTML:dt HTML:li HTML:optgroup,HTML:option HTML:p HTML:rp,HTML:rt"
                     },
                     {
                        "actions" : [
                           {
                              "type" : "parse error"
                           }
                        ],
                        "cond" : [
                           "oe[-1]",
                           "is",
                           "node"
                        ],
                        "type" : "if"
                     },
                     {
                        "type" : "pop-oe",
                        "until" : "node"
                     },
                     {
                        "type" : "abort these steps"
                     }
                  ],
                  "cond" : [
                     "node",
                     "is",
                     "HTML-same-tag-name"
                  ],
                  "false_actions" : [
                     {
                        "actions" : [
                           {
                              "type" : "parse error"
                           },
                           {
                              "type" : "ignore the token"
                           },
                           {
                              "type" : "abort these steps"
                           }
                        ],
                        "cond" : [
                           "node",
                           "is",
                           "HTML:address,HTML:div HTML:applet,HTML:marquee,HTML:object,MathML:annotation-xml HTML:area,HTML:article,HTML:aside,HTML:base,HTML:basefont,HTML:bgsound,HTML:blockquote,HTML:br,HTML:center,HTML:col,HTML:details,HTML:dir,HTML:dl,HTML:embed,HTML:fieldset,HTML:figcaption,HTML:figure,HTML:footer,HTML:form,HTML:frame,HTML:frameset,HTML:head,HTML:header,HTML:hgroup,HTML:hr,HTML:iframe,HTML:img,HTML:input,HTML:isindex,HTML:link,HTML:listing,HTML:main,HTML:menu,HTML:menuitem,HTML:meta,HTML:nav,HTML:noembed,HTML:noframes,HTML:noscript,HTML:param,HTML:plaintext,HTML:pre,HTML:script,HTML:section,HTML:select,HTML:source,HTML:style,HTML:summary,HTML:textarea,HTML:title,HTML:track,HTML:wbr,HTML:xmp HTML:body HTML:button HTML:caption HTML:colgroup HTML:dd HTML:dt HTML:h1,HTML:h2,HTML:h3,HTML:h4,HTML:h5,HTML:h6 HTML:html HTML:li HTML:ol,HTML:ul HTML:p HTML:table HTML:tbody,HTML:tfoot,HTML:thead HTML:td,HTML:th HTML:template HTML:tr MathML:mi,MathML:mn,MathML:mo,MathML:ms,MathML:mtext SVG:desc,SVG:foreignObject,SVG:title"
                        ],
                        "type" : "if"
                     }
                  ],
                  "type" : "if"
               }
            ],
            "between_actions" : [
            ],
            "type" : "for-each-reverse-oe-as-node"
         }
      ],
      "in body;END:template" : [
         {
            "im" : "in head",
            "type" : "USING-THE-RULES-FOR"
         }
      ],
      "in body;EOF" : [
         {
            "actions" : [
               {
                  "actions" : [
                     {
                        "type" : "stop parsing"
                     }
                  ],
                  "cond" : [
                     "oe",
                     "not in scope",
                     "all",
                     "HTML:template"
                  ],
                  "false_actions" : [
                     {
                        "type" : "parse error"
                     }
                  ],
                  "type" : "if"
               },
               {
                  "type" : "pop-oe",
                  "until" : "HTML:template"
               },
               {
                  "type" : "clear the list of active formatting elements up to the last marker"
               },
               {
                  "type" : "pop-template-ims"
               },
               {
                  "type" : "reset the insertion mode appropriately"
               },
               {
                  "type" : "reprocess the token"
               }
            ],
            "cond" : [
               "stack of template insertion modes",
               "is not empty"
            ],
            "false_actions" : [
               {
                  "actions" : [
                     {
                        "type" : "parse error"
                     }
                  ],
                  "cond" : [
                     "oe",
                     "in scope not",
                     "all",
                     "HTML:body HTML:dd HTML:dt HTML:html HTML:li HTML:optgroup,HTML:option HTML:p HTML:rp,HTML:rt HTML:tbody,HTML:tfoot,HTML:thead HTML:td,HTML:th HTML:tr"
                  ],
                  "type" : "if"
               },
               {
                  "type" : "stop parsing"
               }
            ],
            "type" : "if"
         }
      ],
      "in body;START-ELSE" : [
         {
            "type" : "reconstruct the active formatting elements"
         },
         {
            "type" : "insert an HTML element"
         }
      ],
      "in body;START:a" : [
         {
            "actions" : [
               {
                  "type" : "parse error"
               },
               {
                  "remove_from_afe_and_oe" : 1,
                  "tag_name" : "a",
                  "type" : "adoption agency algorithm"
               }
            ],
            "cond" : [
               "afe",
               "in scope",
               "marker",
               "HTML:a"
            ],
            "type" : "if"
         },
         {
            "type" : "reconstruct the active formatting elements"
         },
         {
            "type" : "insert an HTML element"
         },
         {
            "type" : "push onto the list of active formatting elements"
         }
      ],
      "in body;START:address article aside details dialog dir fieldset figcaption figure footer header hgroup main nav section summary,blockquote center div dl menu ol ul,p" : [
         {
            "actions" : [
               {
                  "type" : "pop-oe",
                  "while" : "HTML:dd HTML:dt HTML:li HTML:optgroup,HTML:option HTML:rp,HTML:rt"
               },
               {
                  "actions" : [
                     {
                        "type" : "parse error"
                     }
                  ],
                  "cond" : [
                     "oe[-1]",
                     "is not",
                     "HTML:p"
                  ],
                  "type" : "if"
               },
               {
                  "type" : "pop-oe",
                  "until" : "HTML:p"
               }
            ],
            "cond" : [
               "oe",
               "in scope",
               "button",
               "HTML:p"
            ],
            "type" : "if"
         },
         {
            "type" : "insert an HTML element"
         }
      ],
      "in body;START:applet marquee object" : [
         {
            "type" : "reconstruct the active formatting elements"
         },
         {
            "type" : "insert an HTML element"
         },
         {
            "type" : "append-marker-to-afe"
         },
         {
            "target" : "frameset-ok",
            "type" : "set-false"
         }
      ],
      "in body;START:area wbr,br,embed img,keygen" : [
         {
            "type" : "reconstruct the active formatting elements"
         },
         {
            "type" : "insert an HTML element"
         },
         {
            "type" : "pop-oe"
         },
         {
            "type" : "acknowledge the token's self-closing flag"
         },
         {
            "target" : "frameset-ok",
            "type" : "set-false"
         }
      ],
      "in body;START:b big code em i s small strike strong tt u,font" : [
         {
            "type" : "reconstruct the active formatting elements"
         },
         {
            "type" : "insert an HTML element"
         },
         {
            "type" : "push onto the list of active formatting elements"
         }
      ],
      "in body;START:base,basefont bgsound link,meta,noframes,script,style,template,title" : [
         {
            "im" : "in head",
            "type" : "USING-THE-RULES-FOR"
         }
      ],
      "in body;START:body" : [
         {
            "type" : "parse error"
         },
         {
            "actions" : [
               {
                  "type" : "ignore the token"
               }
            ],
            "cond" : [
               "or",
               [
                  "oe[1]",
                  "is not",
                  "HTML:body"
               ],
               [
                  "oe[-1]",
                  "is",
                  "HTML:html"
               ],
               [
                  "oe",
                  "in scope",
                  "all",
                  "HTML:template"
               ]
            ],
            "false_actions" : [
               {
                  "target" : "frameset-ok",
                  "type" : "set-false"
               },
               {
                  "node" : "oe[1]",
                  "type" : "set-attrs-if-missing"
               }
            ],
            "type" : "if"
         }
      ],
      "in body;START:button" : [
         {
            "actions" : [
               {
                  "type" : "parse error"
               },
               {
                  "type" : "pop-oe",
                  "while" : "HTML:dd HTML:dt HTML:li HTML:optgroup,HTML:option HTML:p HTML:rp,HTML:rt"
               },
               {
                  "type" : "pop-oe",
                  "until" : "HTML:button"
               }
            ],
            "cond" : [
               "oe",
               "in scope",
               "scope",
               "HTML:button"
            ],
            "type" : "if"
         },
         {
            "type" : "reconstruct the active formatting elements"
         },
         {
            "type" : "insert an HTML element"
         },
         {
            "target" : "frameset-ok",
            "type" : "set-false"
         }
      ],
      "in body;START:caption,col,colgroup,frame,head,tbody tfoot thead,td th,tr" : [
         {
            "type" : "parse error"
         },
         {
            "type" : "ignore the token"
         }
      ],
      "in body;START:dd dt" : [
         {
            "target" : "frameset-ok",
            "type" : "set-false"
         },
         {
            "actions" : [
               {
                  "actions" : [
                     {
                        "type" : "pop-oe",
                        "while" : "HTML:dt HTML:li HTML:optgroup,HTML:option HTML:p HTML:rp,HTML:rt"
                     },
                     {
                        "actions" : [
                           {
                              "type" : "parse error"
                           }
                        ],
                        "cond" : [
                           "oe[-1]",
                           "is not",
                           "HTML:dd"
                        ],
                        "type" : "if"
                     },
                     {
                        "type" : "pop-oe",
                        "until" : "HTML:dd"
                     },
                     {
                        "type" : "break-for-each"
                     }
                  ],
                  "cond" : [
                     "node",
                     "is",
                     "HTML:dd"
                  ],
                  "false_actions" : [
                     {
                        "actions" : [
                           {
                              "type" : "pop-oe",
                              "while" : "HTML:dd HTML:li HTML:optgroup,HTML:option HTML:p HTML:rp,HTML:rt"
                           },
                           {
                              "actions" : [
                                 {
                                    "type" : "parse error"
                                 }
                              ],
                              "cond" : [
                                 "oe[-1]",
                                 "is not",
                                 "HTML:dt"
                              ],
                              "type" : "if"
                           },
                           {
                              "type" : "pop-oe",
                              "until" : "HTML:dt"
                           },
                           {
                              "type" : "break-for-each"
                           }
                        ],
                        "cond" : [
                           "node",
                           "is",
                           "HTML:dt"
                        ],
                        "false_actions" : [
                           {
                              "actions" : [
                                 {
                                    "type" : "break-for-each"
                                 }
                              ],
                              "cond" : [
                                 "node",
                                 "is",
                                 "HTML:applet,HTML:marquee,HTML:object,MathML:annotation-xml HTML:area,HTML:article,HTML:aside,HTML:base,HTML:basefont,HTML:bgsound,HTML:blockquote,HTML:br,HTML:center,HTML:col,HTML:details,HTML:dir,HTML:dl,HTML:embed,HTML:fieldset,HTML:figcaption,HTML:figure,HTML:footer,HTML:form,HTML:frame,HTML:frameset,HTML:head,HTML:header,HTML:hgroup,HTML:hr,HTML:iframe,HTML:img,HTML:input,HTML:isindex,HTML:link,HTML:listing,HTML:main,HTML:menu,HTML:menuitem,HTML:meta,HTML:nav,HTML:noembed,HTML:noframes,HTML:noscript,HTML:param,HTML:plaintext,HTML:pre,HTML:script,HTML:section,HTML:select,HTML:source,HTML:style,HTML:summary,HTML:textarea,HTML:title,HTML:track,HTML:wbr,HTML:xmp HTML:body HTML:button HTML:caption HTML:colgroup HTML:dd HTML:dt HTML:h1,HTML:h2,HTML:h3,HTML:h4,HTML:h5,HTML:h6 HTML:html HTML:li HTML:ol,HTML:ul HTML:table HTML:tbody,HTML:tfoot,HTML:thead HTML:td,HTML:th HTML:template HTML:tr MathML:mi,MathML:mn,MathML:mo,MathML:ms,MathML:mtext SVG:desc,SVG:foreignObject,SVG:title"
                              ],
                              "false_actions" : [
                              ],
                              "type" : "if"
                           }
                        ],
                        "type" : "if"
                     }
                  ],
                  "type" : "if"
               }
            ],
            "between_actions" : [
            ],
            "type" : "for-each-reverse-oe-as-node"
         },
         {
            "actions" : [
               {
                  "type" : "pop-oe",
                  "while" : "HTML:dd HTML:dt HTML:li HTML:optgroup,HTML:option HTML:rp,HTML:rt"
               },
               {
                  "actions" : [
                     {
                        "type" : "parse error"
                     }
                  ],
                  "cond" : [
                     "oe[-1]",
                     "is not",
                     "HTML:p"
                  ],
                  "type" : "if"
               },
               {
                  "type" : "pop-oe",
                  "until" : "HTML:p"
               }
            ],
            "cond" : [
               "oe",
               "in scope",
               "button",
               "HTML:p"
            ],
            "type" : "if"
         },
         {
            "type" : "insert an HTML element"
         }
      ],
      "in body;START:form" : [
         {
            "actions" : [
               {
                  "type" : "parse error"
               }
            ],
            "cond" : [
               "and",
               [
                  "form element pointer",
                  "is not null"
               ],
               [
                  "oe",
                  "not in scope",
                  "all",
                  "HTML:template"
               ]
            ],
            "false_actions" : [
               {
                  "actions" : [
                     {
                        "type" : "pop-oe",
                        "while" : "HTML:dd HTML:dt HTML:li HTML:optgroup,HTML:option HTML:rp,HTML:rt"
                     },
                     {
                        "actions" : [
                           {
                              "type" : "parse error"
                           }
                        ],
                        "cond" : [
                           "oe[-1]",
                           "is not",
                           "HTML:p"
                        ],
                        "type" : "if"
                     },
                     {
                        "type" : "pop-oe",
                        "until" : "HTML:p"
                     }
                  ],
                  "cond" : [
                     "oe",
                     "in scope",
                     "button",
                     "HTML:p"
                  ],
                  "type" : "if"
               },
               {
                  "type" : "insert an HTML element"
               },
               {
                  "actions" : [
                     {
                        "type" : "set-form-element-pointer"
                     }
                  ],
                  "cond" : [
                     "oe",
                     "not in scope",
                     "all",
                     "HTML:template"
                  ],
                  "type" : "if"
               }
            ],
            "type" : "if"
         }
      ],
      "in body;START:frameset" : [
         {
            "type" : "parse error"
         },
         {
            "actions" : [
               {
                  "type" : "ignore the token"
               }
            ],
            "cond" : [
               "or",
               [
                  "oe[-1]",
                  "is",
                  "HTML:html"
               ],
               [
                  "oe[1]",
                  "is not",
                  "HTML:body"
               ]
            ],
            "type" : "if"
         },
         {
            "actions" : [
               {
                  "type" : "ignore the token"
               }
            ],
            "cond" : [
               "frameset-ok flag",
               "is",
               "not ok"
            ],
            "false_actions" : [
               {
                  "item" : "oe[1]",
                  "type" : "remove-tree"
               },
               {
                  "type" : "pop-oe",
                  "until" : "oe[1]"
               },
               {
                  "type" : "insert an HTML element"
               },
               {
                  "im" : "in frameset",
                  "type" : "switch the insertion mode"
               }
            ],
            "type" : "if"
         }
      ],
      "in body;START:h1 h2 h3 h4 h5 h6" : [
         {
            "actions" : [
               {
                  "type" : "pop-oe",
                  "while" : "HTML:dd HTML:dt HTML:li HTML:optgroup,HTML:option HTML:rp,HTML:rt"
               },
               {
                  "actions" : [
                     {
                        "type" : "parse error"
                     }
                  ],
                  "cond" : [
                     "oe[-1]",
                     "is not",
                     "HTML:p"
                  ],
                  "type" : "if"
               },
               {
                  "type" : "pop-oe",
                  "until" : "HTML:p"
               }
            ],
            "cond" : [
               "oe",
               "in scope",
               "button",
               "HTML:p"
            ],
            "type" : "if"
         },
         {
            "actions" : [
               {
                  "type" : "parse error"
               },
               {
                  "type" : "pop-oe"
               }
            ],
            "cond" : [
               "oe[-1]",
               "is",
               "HTML:h1,HTML:h2,HTML:h3,HTML:h4,HTML:h5,HTML:h6"
            ],
            "type" : "if"
         },
         {
            "type" : "insert an HTML element"
         }
      ],
      "in body;START:hr" : [
         {
            "actions" : [
               {
                  "type" : "pop-oe",
                  "while" : "HTML:dd HTML:dt HTML:li HTML:optgroup,HTML:option HTML:rp,HTML:rt"
               },
               {
                  "actions" : [
                     {
                        "type" : "parse error"
                     }
                  ],
                  "cond" : [
                     "oe[-1]",
                     "is not",
                     "HTML:p"
                  ],
                  "type" : "if"
               },
               {
                  "type" : "pop-oe",
                  "until" : "HTML:p"
               }
            ],
            "cond" : [
               "oe",
               "in scope",
               "button",
               "HTML:p"
            ],
            "type" : "if"
         },
         {
            "type" : "insert an HTML element"
         },
         {
            "type" : "pop-oe"
         },
         {
            "type" : "acknowledge the token's self-closing flag"
         },
         {
            "target" : "frameset-ok",
            "type" : "set-false"
         }
      ],
      "in body;START:html" : [
         {
            "type" : "parse error"
         },
         {
            "actions" : [
               {
                  "type" : "ignore the token"
               }
            ],
            "cond" : [
               "oe",
               "in scope",
               "all",
               "HTML:template"
            ],
            "type" : "if"
         },
         {
            "node" : "oe[0]",
            "type" : "set-attrs-if-missing"
         }
      ],
      "in body;START:iframe" : [
         {
            "target" : "frameset-ok",
            "type" : "set-false"
         },
         {
            "type" : "insert an HTML element"
         },
         {
            "state" : "RAWTEXT state",
            "type" : "switch the tokenizer"
         },
         {
            "target" : "original insertion mode",
            "type" : "set-current-im"
         },
         {
            "im" : "text",
            "type" : "switch the insertion mode"
         }
      ],
      "in body;START:image" : [
         {
            "type" : "parse error"
         },
         {
            "tag_name" : "img",
            "type" : "change the token's tag name"
         },
         {
            "type" : "reprocess the token"
         }
      ],
      "in body;START:input" : [
         {
            "type" : "reconstruct the active formatting elements"
         },
         {
            "type" : "insert an HTML element"
         },
         {
            "type" : "pop-oe"
         },
         {
            "type" : "acknowledge the token's self-closing flag"
         },
         {
            "actions" : [
               {
                  "target" : "frameset-ok",
                  "type" : "set-false"
               }
            ],
            "cond" : [
               "token[type]",
               "lc is not",
               "hidden"
            ],
            "type" : "if"
         }
      ],
      "in body;START:isindex" : [
         {
            "type" : "parse error"
         },
         {
            "actions" : [
               {
                  "type" : "ignore the token"
               }
            ],
            "cond" : [
               "and",
               [
                  "oe",
                  "not in scope",
                  "all",
                  "HTML:template"
               ],
               [
                  "form element pointer",
                  "is not null"
               ]
            ],
            "false_actions" : [
               {
                  "type" : "acknowledge the token's self-closing flag"
               },
               {
                  "target" : "frameset-ok",
                  "type" : "set-false"
               },
               {
                  "actions" : [
                     {
                        "type" : "pop-oe",
                        "while" : "HTML:dd HTML:dt HTML:li HTML:optgroup,HTML:option HTML:rp,HTML:rt"
                     },
                     {
                        "actions" : [
                           {
                              "type" : "parse error"
                           }
                        ],
                        "cond" : [
                           "oe[-1]",
                           "is not",
                           "HTML:p"
                        ],
                        "type" : "if"
                     },
                     {
                        "type" : "pop-oe",
                        "until" : "HTML:p"
                     }
                  ],
                  "cond" : [
                     "oe",
                     "in scope",
                     "button",
                     "HTML:p"
                  ],
                  "type" : "if"
               },
               {
                  "attrs" : "none",
                  "tag_name" : "form",
                  "type" : "insert an HTML element"
               },
               {
                  "actions" : [
                     {
                        "type" : "set-form-element-pointer"
                     }
                  ],
                  "cond" : [
                     "oe",
                     "not in scope",
                     "all",
                     "HTML:template"
                  ],
                  "type" : "if"
               },
               {
                  "actions" : [
                     {
                        "target" : "action",
                        "type" : "set-form-attr"
                     }
                  ],
                  "cond" : [
                     "token",
                     "has attr",
                     "action"
                  ],
                  "type" : "if"
               },
               {
                  "attrs" : "none",
                  "tag_name" : "hr",
                  "type" : "insert an HTML element"
               },
               {
                  "type" : "pop-oe"
               },
               {
                  "type" : "reconstruct the active formatting elements"
               },
               {
                  "attrs" : "none",
                  "tag_name" : "label",
                  "type" : "insert an HTML element"
               },
               {
                  "type" : "insert-chars",
                  "value" : [
                     "prompt-string"
                  ]
               },
               {
                  "attrs" : "isindex",
                  "tag_name" : "input",
                  "type" : "insert an HTML element"
               },
               {
                  "type" : "pop-oe"
               },
               {
                  "type" : "insert-chars",
                  "value" : [
                     "prompt-string"
                  ]
               },
               {
                  "type" : "pop-oe"
               },
               {
                  "attrs" : "none",
                  "tag_name" : "hr",
                  "type" : "insert an HTML element"
               },
               {
                  "type" : "pop-oe"
               },
               {
                  "type" : "pop-oe"
               },
               {
                  "actions" : [
                     {
                        "target" : "form element pointer",
                        "type" : "set-null"
                     }
                  ],
                  "cond" : [
                     "oe",
                     "not in scope",
                     "all",
                     "HTML:template"
                  ],
                  "type" : "if"
               }
            ],
            "type" : "if"
         }
      ],
      "in body;START:li" : [
         {
            "target" : "frameset-ok",
            "type" : "set-false"
         },
         {
            "actions" : [
               {
                  "actions" : [
                     {
                        "type" : "pop-oe",
                        "while" : "HTML:dd HTML:dt HTML:optgroup,HTML:option HTML:p HTML:rp,HTML:rt"
                     },
                     {
                        "actions" : [
                           {
                              "type" : "parse error"
                           }
                        ],
                        "cond" : [
                           "oe[-1]",
                           "is not",
                           "HTML:li"
                        ],
                        "type" : "if"
                     },
                     {
                        "type" : "pop-oe",
                        "until" : "HTML:li"
                     },
                     {
                        "type" : "break-for-each"
                     }
                  ],
                  "cond" : [
                     "node",
                     "is",
                     "HTML:li"
                  ],
                  "false_actions" : [
                     {
                        "actions" : [
                           {
                              "type" : "break-for-each"
                           }
                        ],
                        "cond" : [
                           "node",
                           "is",
                           "HTML:applet,HTML:marquee,HTML:object,MathML:annotation-xml HTML:area,HTML:article,HTML:aside,HTML:base,HTML:basefont,HTML:bgsound,HTML:blockquote,HTML:br,HTML:center,HTML:col,HTML:details,HTML:dir,HTML:dl,HTML:embed,HTML:fieldset,HTML:figcaption,HTML:figure,HTML:footer,HTML:form,HTML:frame,HTML:frameset,HTML:head,HTML:header,HTML:hgroup,HTML:hr,HTML:iframe,HTML:img,HTML:input,HTML:isindex,HTML:link,HTML:listing,HTML:main,HTML:menu,HTML:menuitem,HTML:meta,HTML:nav,HTML:noembed,HTML:noframes,HTML:noscript,HTML:param,HTML:plaintext,HTML:pre,HTML:script,HTML:section,HTML:select,HTML:source,HTML:style,HTML:summary,HTML:textarea,HTML:title,HTML:track,HTML:wbr,HTML:xmp HTML:body HTML:button HTML:caption HTML:colgroup HTML:dd HTML:dt HTML:h1,HTML:h2,HTML:h3,HTML:h4,HTML:h5,HTML:h6 HTML:html HTML:li HTML:ol,HTML:ul HTML:table HTML:tbody,HTML:tfoot,HTML:thead HTML:td,HTML:th HTML:template HTML:tr MathML:mi,MathML:mn,MathML:mo,MathML:ms,MathML:mtext SVG:desc,SVG:foreignObject,SVG:title"
                        ],
                        "false_actions" : [
                        ],
                        "type" : "if"
                     }
                  ],
                  "type" : "if"
               }
            ],
            "between_actions" : [
            ],
            "type" : "for-each-reverse-oe-as-node"
         },
         {
            "actions" : [
               {
                  "type" : "pop-oe",
                  "while" : "HTML:dd HTML:dt HTML:li HTML:optgroup,HTML:option HTML:rp,HTML:rt"
               },
               {
                  "actions" : [
                     {
                        "type" : "parse error"
                     }
                  ],
                  "cond" : [
                     "oe[-1]",
                     "is not",
                     "HTML:p"
                  ],
                  "type" : "if"
               },
               {
                  "type" : "pop-oe",
                  "until" : "HTML:p"
               }
            ],
            "cond" : [
               "oe",
               "in scope",
               "button",
               "HTML:p"
            ],
            "type" : "if"
         },
         {
            "type" : "insert an HTML element"
         }
      ],
      "in body;START:listing pre" : [
         {
            "actions" : [
               {
                  "type" : "pop-oe",
                  "while" : "HTML:dd HTML:dt HTML:li HTML:optgroup,HTML:option HTML:rp,HTML:rt"
               },
               {
                  "actions" : [
                     {
                        "type" : "parse error"
                     }
                  ],
                  "cond" : [
                     "oe[-1]",
                     "is not",
                     "HTML:p"
                  ],
                  "type" : "if"
               },
               {
                  "type" : "pop-oe",
                  "until" : "HTML:p"
               }
            ],
            "cond" : [
               "oe",
               "in scope",
               "button",
               "HTML:p"
            ],
            "type" : "if"
         },
         {
            "type" : "insert an HTML element"
         },
         {
            "type" : "ignore-next-lf"
         },
         {
            "target" : "frameset-ok",
            "type" : "set-false"
         }
      ],
      "in body;START:math" : [
         {
            "type" : "reconstruct the active formatting elements"
         },
         {
            "type" : "adjust MathML attributes"
         },
         {
            "type" : "adjust foreign attributes"
         },
         {
            "ns" : "MathML",
            "type" : "insert a foreign element"
         },
         {
            "actions" : [
               {
                  "type" : "pop-oe"
               },
               {
                  "type" : "acknowledge the token's self-closing flag"
               }
            ],
            "cond" : [
               "token",
               "has",
               "self-closing flag"
            ],
            "type" : "if"
         }
      ],
      "in body;START:menuitem param source track" : [
         {
            "type" : "insert an HTML element"
         },
         {
            "type" : "pop-oe"
         },
         {
            "type" : "acknowledge the token's self-closing flag"
         }
      ],
      "in body;START:nobr" : [
         {
            "type" : "reconstruct the active formatting elements"
         },
         {
            "actions" : [
               {
                  "type" : "parse error"
               },
               {
                  "tag_name" : "nobr",
                  "type" : "adoption agency algorithm"
               },
               {
                  "type" : "reconstruct the active formatting elements"
               }
            ],
            "cond" : [
               "oe",
               "in scope",
               "scope",
               "HTML:nobr"
            ],
            "type" : "if"
         },
         {
            "type" : "insert an HTML element"
         },
         {
            "type" : "push onto the list of active formatting elements"
         }
      ],
      "in body;START:noembed" : [
         {
            "type" : "insert an HTML element"
         },
         {
            "state" : "RAWTEXT state",
            "type" : "switch the tokenizer"
         },
         {
            "target" : "original insertion mode",
            "type" : "set-current-im"
         },
         {
            "im" : "text",
            "type" : "switch the insertion mode"
         }
      ],
      "in body;START:noscript" : [
         {
            "actions" : [
               {
                  "type" : "insert an HTML element"
               },
               {
                  "state" : "RAWTEXT state",
                  "type" : "switch the tokenizer"
               },
               {
                  "target" : "original insertion mode",
                  "type" : "set-current-im"
               },
               {
                  "im" : "text",
                  "type" : "switch the insertion mode"
               }
            ],
            "cond" : [
               "scripting"
            ],
            "false_actions" : [
               {
                  "type" : "reconstruct the active formatting elements"
               },
               {
                  "type" : "insert an HTML element"
               }
            ],
            "type" : "if"
         }
      ],
      "in body;START:optgroup,option" : [
         {
            "actions" : [
               {
                  "type" : "pop-oe"
               }
            ],
            "cond" : [
               "oe[-1]",
               "is",
               "HTML:option"
            ],
            "type" : "if"
         },
         {
            "type" : "reconstruct the active formatting elements"
         },
         {
            "type" : "insert an HTML element"
         }
      ],
      "in body;START:plaintext" : [
         {
            "actions" : [
               {
                  "type" : "pop-oe",
                  "while" : "HTML:dd HTML:dt HTML:li HTML:optgroup,HTML:option HTML:rp,HTML:rt"
               },
               {
                  "actions" : [
                     {
                        "type" : "parse error"
                     }
                  ],
                  "cond" : [
                     "oe[-1]",
                     "is not",
                     "HTML:p"
                  ],
                  "type" : "if"
               },
               {
                  "type" : "pop-oe",
                  "until" : "HTML:p"
               }
            ],
            "cond" : [
               "oe",
               "in scope",
               "button",
               "HTML:p"
            ],
            "type" : "if"
         },
         {
            "type" : "insert an HTML element"
         },
         {
            "state" : "PLAINTEXT state",
            "type" : "switch the tokenizer"
         }
      ],
      "in body;START:rp rt" : [
         {
            "actions" : [
               {
                  "type" : "pop-oe",
                  "while" : "HTML:dd HTML:dt HTML:li HTML:optgroup,HTML:option HTML:p HTML:rp,HTML:rt"
               }
            ],
            "cond" : [
               "oe",
               "in scope",
               "scope",
               "HTML:ruby"
            ],
            "type" : "if"
         },
         {
            "actions" : [
               {
                  "type" : "parse error"
               }
            ],
            "cond" : [
               "oe[-1]",
               "is not",
               "HTML:ruby"
            ],
            "type" : "if"
         },
         {
            "type" : "insert an HTML element"
         }
      ],
      "in body;START:select" : [
         {
            "type" : "reconstruct the active formatting elements"
         },
         {
            "type" : "insert an HTML element"
         },
         {
            "target" : "frameset-ok",
            "type" : "set-false"
         },
         {
            "actions" : [
               {
                  "im" : "in select in table",
                  "type" : "switch the insertion mode"
               }
            ],
            "cond" : [
               "im",
               "is",
               [
                  "in table",
                  "in caption",
                  "in table body",
                  "in row",
                  "in cell"
               ]
            ],
            "false_actions" : [
               {
                  "im" : "in select",
                  "type" : "switch the insertion mode"
               }
            ],
            "type" : "if"
         }
      ],
      "in body;START:svg" : [
         {
            "type" : "reconstruct the active formatting elements"
         },
         {
            "type" : "adjust SVG attributes"
         },
         {
            "type" : "adjust foreign attributes"
         },
         {
            "ns" : "SVG",
            "type" : "insert a foreign element"
         },
         {
            "actions" : [
               {
                  "type" : "pop-oe"
               },
               {
                  "type" : "acknowledge the token's self-closing flag"
               }
            ],
            "cond" : [
               "token",
               "has",
               "self-closing flag"
            ],
            "type" : "if"
         }
      ],
      "in body;START:table" : [
         {
            "actions" : [
               {
                  "type" : "pop-oe",
                  "while" : "HTML:dd HTML:dt HTML:li HTML:optgroup,HTML:option HTML:rp,HTML:rt"
               },
               {
                  "actions" : [
                     {
                        "type" : "parse error"
                     }
                  ],
                  "cond" : [
                     "oe[-1]",
                     "is not",
                     "HTML:p"
                  ],
                  "type" : "if"
               },
               {
                  "type" : "pop-oe",
                  "until" : "HTML:p"
               }
            ],
            "cond" : [
               "and",
               [
                  "quirks"
               ],
               [
                  "oe",
                  "in scope",
                  "button",
                  "HTML:p"
               ]
            ],
            "type" : "if"
         },
         {
            "type" : "insert an HTML element"
         },
         {
            "target" : "frameset-ok",
            "type" : "set-false"
         },
         {
            "im" : "in table",
            "type" : "switch the insertion mode"
         }
      ],
      "in body;START:textarea" : [
         {
            "type" : "insert an HTML element"
         },
         {
            "type" : "ignore-next-lf"
         },
         {
            "state" : "RCDATA state",
            "type" : "switch the tokenizer"
         },
         {
            "target" : "original insertion mode",
            "type" : "set-current-im"
         },
         {
            "target" : "frameset-ok",
            "type" : "set-false"
         },
         {
            "im" : "text",
            "type" : "switch the insertion mode"
         }
      ],
      "in body;START:xmp" : [
         {
            "actions" : [
               {
                  "type" : "pop-oe",
                  "while" : "HTML:dd HTML:dt HTML:li HTML:optgroup,HTML:option HTML:rp,HTML:rt"
               },
               {
                  "actions" : [
                     {
                        "type" : "parse error"
                     }
                  ],
                  "cond" : [
                     "oe[-1]",
                     "is not",
                     "HTML:p"
                  ],
                  "type" : "if"
               },
               {
                  "type" : "pop-oe",
                  "until" : "HTML:p"
               }
            ],
            "cond" : [
               "oe",
               "in scope",
               "button",
               "HTML:p"
            ],
            "type" : "if"
         },
         {
            "type" : "reconstruct the active formatting elements"
         },
         {
            "target" : "frameset-ok",
            "type" : "set-false"
         },
         {
            "type" : "insert an HTML element"
         },
         {
            "state" : "RAWTEXT state",
            "type" : "switch the tokenizer"
         },
         {
            "target" : "original insertion mode",
            "type" : "set-current-im"
         },
         {
            "im" : "text",
            "type" : "switch the insertion mode"
         }
      ],
      "in body;TEXT" : [
         {
            "actions" : [
               {
                  "type" : "reconstruct the active formatting elements"
               },
               {
                  "type" : "insert-chars"
               },
               {
                  "target" : "frameset-ok",
                  "type" : "set-false"
               }
            ],
            "null_char_actions" : [
               {
                  "type" : "parse error"
               }
            ],
            "type" : "process-chars",
            "ws_seq_actions" : [
               {
                  "type" : "reconstruct the active formatting elements"
               },
               {
                  "type" : "insert-chars"
               }
            ]
         }
      ],
      "in caption;END-ELSE" : [
         {
            "im" : "in body",
            "type" : "USING-THE-RULES-FOR"
         }
      ],
      "in caption;END:body,col,colgroup,html,tbody tfoot thead,td th,tr" : [
         {
            "type" : "parse error"
         },
         {
            "type" : "ignore the token"
         }
      ],
      "in caption;END:caption" : [
         {
            "actions" : [
               {
                  "type" : "parse error"
               },
               {
                  "type" : "ignore the token"
               }
            ],
            "cond" : [
               "oe",
               "not in scope",
               "table",
               "HTML:caption"
            ],
            "false_actions" : [
               {
                  "type" : "pop-oe",
                  "while" : "HTML:dd HTML:dt HTML:li HTML:optgroup,HTML:option HTML:p HTML:rp,HTML:rt"
               },
               {
                  "actions" : [
                     {
                        "type" : "parse error"
                     }
                  ],
                  "cond" : [
                     "oe[-1]",
                     "is not",
                     "HTML:caption"
                  ],
                  "type" : "if"
               },
               {
                  "type" : "pop-oe",
                  "until" : "HTML:caption"
               },
               {
                  "type" : "clear the list of active formatting elements up to the last marker"
               },
               {
                  "im" : "in table",
                  "type" : "switch the insertion mode"
               }
            ],
            "type" : "if"
         }
      ],
      "in caption;END:table" : [
         {
            "actions" : [
               {
                  "type" : "parse error"
               },
               {
                  "type" : "ignore the token"
               }
            ],
            "cond" : [
               "oe",
               "not in scope",
               "table",
               "HTML:caption"
            ],
            "false_actions" : [
               {
                  "type" : "pop-oe",
                  "while" : "HTML:dd HTML:dt HTML:li HTML:optgroup,HTML:option HTML:p HTML:rp,HTML:rt"
               },
               {
                  "actions" : [
                     {
                        "type" : "parse error"
                     }
                  ],
                  "cond" : [
                     "oe[-1]",
                     "is not",
                     "HTML:caption"
                  ],
                  "type" : "if"
               },
               {
                  "type" : "pop-oe",
                  "until" : "HTML:caption"
               },
               {
                  "type" : "clear the list of active formatting elements up to the last marker"
               },
               {
                  "im" : "in table",
                  "type" : "switch the insertion mode"
               },
               {
                  "type" : "reprocess the token"
               }
            ],
            "type" : "if"
         }
      ],
      "in caption;START-ELSE" : [
         {
            "im" : "in body",
            "type" : "USING-THE-RULES-FOR"
         }
      ],
      "in caption;START:caption,col,colgroup,tbody tfoot thead,td th,tr" : [
         {
            "actions" : [
               {
                  "type" : "parse error"
               },
               {
                  "type" : "ignore the token"
               }
            ],
            "cond" : [
               "oe",
               "not in scope",
               "table",
               "HTML:caption"
            ],
            "false_actions" : [
               {
                  "type" : "pop-oe",
                  "while" : "HTML:dd HTML:dt HTML:li HTML:optgroup,HTML:option HTML:p HTML:rp,HTML:rt"
               },
               {
                  "actions" : [
                     {
                        "type" : "parse error"
                     }
                  ],
                  "cond" : [
                     "oe[-1]",
                     "is not",
                     "HTML:caption"
                  ],
                  "type" : "if"
               },
               {
                  "type" : "pop-oe",
                  "until" : "HTML:caption"
               },
               {
                  "type" : "clear the list of active formatting elements up to the last marker"
               },
               {
                  "im" : "in table",
                  "type" : "switch the insertion mode"
               },
               {
                  "type" : "reprocess the token"
               }
            ],
            "type" : "if"
         }
      ],
      "in caption;TEXT" : [
         {
            "actions" : [
               {
                  "type" : "reconstruct the active formatting elements"
               },
               {
                  "type" : "insert-chars"
               },
               {
                  "target" : "frameset-ok",
                  "type" : "set-false"
               }
            ],
            "null_char_actions" : [
               {
                  "type" : "parse error"
               }
            ],
            "type" : "process-chars",
            "ws_seq_actions" : [
               {
                  "type" : "reconstruct the active formatting elements"
               },
               {
                  "type" : "insert-chars"
               }
            ]
         }
      ],
      "in cell;END-ELSE" : [
         {
            "im" : "in body",
            "type" : "USING-THE-RULES-FOR"
         }
      ],
      "in cell;END:body,caption,col,colgroup,html" : [
         {
            "type" : "parse error"
         },
         {
            "type" : "ignore the token"
         }
      ],
      "in cell;END:table,tbody tfoot thead,tr" : [
         {
            "actions" : [
               {
                  "type" : "parse error"
               },
               {
                  "type" : "ignore the token"
               }
            ],
            "cond" : [
               "oe",
               "not in scope",
               "table",
               "HTML-same-tag-name"
            ],
            "false_actions" : [
               {
                  "type" : "pop-oe",
                  "while" : "HTML:dd HTML:dt HTML:li HTML:optgroup,HTML:option HTML:p HTML:rp,HTML:rt"
               },
               {
                  "actions" : [
                     {
                        "type" : "parse error"
                     }
                  ],
                  "cond" : [
                     "oe[-1]",
                     "is not",
                     "HTML:td,HTML:th"
                  ],
                  "type" : "if"
               },
               {
                  "type" : "pop-oe",
                  "until" : "HTML:td,HTML:th"
               },
               {
                  "type" : "clear the list of active formatting elements up to the last marker"
               },
               {
                  "im" : "in row",
                  "type" : "switch the insertion mode"
               },
               {
                  "type" : "reprocess the token"
               }
            ],
            "type" : "if"
         }
      ],
      "in cell;END:td th" : [
         {
            "actions" : [
               {
                  "type" : "parse error"
               },
               {
                  "type" : "ignore the token"
               }
            ],
            "cond" : [
               "oe",
               "not in scope",
               "table",
               "HTML-same-tag-name"
            ],
            "false_actions" : [
               {
                  "type" : "pop-oe",
                  "while" : "HTML:dd HTML:dt HTML:li HTML:optgroup,HTML:option HTML:p HTML:rp,HTML:rt"
               },
               {
                  "actions" : [
                     {
                        "type" : "parse error"
                     }
                  ],
                  "cond" : [
                     "oe[-1]",
                     "is not",
                     "HTML-same-tag-name"
                  ],
                  "type" : "if"
               },
               {
                  "type" : "pop-oe",
                  "until" : "HTML-same-tag-name"
               },
               {
                  "type" : "clear the list of active formatting elements up to the last marker"
               },
               {
                  "im" : "in row",
                  "type" : "switch the insertion mode"
               }
            ],
            "type" : "if"
         }
      ],
      "in cell;START-ELSE" : [
         {
            "im" : "in body",
            "type" : "USING-THE-RULES-FOR"
         }
      ],
      "in cell;START:caption,col,colgroup,tbody tfoot thead,td th,tr" : [
         {
            "actions" : [
               {
                  "type" : "parse error"
               },
               {
                  "type" : "ignore the token"
               }
            ],
            "cond" : [
               "oe",
               "not in scope",
               "table",
               "HTML:td,HTML:th"
            ],
            "false_actions" : [
               {
                  "type" : "pop-oe",
                  "while" : "HTML:dd HTML:dt HTML:li HTML:optgroup,HTML:option HTML:p HTML:rp,HTML:rt"
               },
               {
                  "actions" : [
                     {
                        "type" : "parse error"
                     }
                  ],
                  "cond" : [
                     "oe[-1]",
                     "is not",
                     "HTML:td,HTML:th"
                  ],
                  "type" : "if"
               },
               {
                  "type" : "pop-oe",
                  "until" : "HTML:td,HTML:th"
               },
               {
                  "type" : "clear the list of active formatting elements up to the last marker"
               },
               {
                  "im" : "in row",
                  "type" : "switch the insertion mode"
               },
               {
                  "type" : "reprocess the token"
               }
            ],
            "type" : "if"
         }
      ],
      "in cell;TEXT" : [
         {
            "actions" : [
               {
                  "type" : "reconstruct the active formatting elements"
               },
               {
                  "type" : "insert-chars"
               },
               {
                  "target" : "frameset-ok",
                  "type" : "set-false"
               }
            ],
            "null_char_actions" : [
               {
                  "type" : "parse error"
               }
            ],
            "type" : "process-chars",
            "ws_seq_actions" : [
               {
                  "type" : "reconstruct the active formatting elements"
               },
               {
                  "type" : "insert-chars"
               }
            ]
         }
      ],
      "in column group;COMMENT" : [
         {
            "type" : "insert a comment"
         }
      ],
      "in column group;DOCTYPE" : [
         {
            "type" : "parse error"
         },
         {
            "type" : "ignore the token"
         }
      ],
      "in column group;END-ELSE" : [
         {
            "actions" : [
               {
                  "type" : "parse error"
               },
               {
                  "type" : "ignore the token"
               }
            ],
            "cond" : [
               "oe[-1]",
               "is not",
               "HTML:colgroup"
            ],
            "false_actions" : [
               {
                  "type" : "pop-oe"
               },
               {
                  "im" : "in table",
                  "type" : "switch the insertion mode"
               },
               {
                  "type" : "reprocess the token"
               }
            ],
            "type" : "if"
         }
      ],
      "in column group;END:col" : [
         {
            "type" : "parse error"
         },
         {
            "type" : "ignore the token"
         }
      ],
      "in column group;END:colgroup" : [
         {
            "actions" : [
               {
                  "type" : "parse error"
               },
               {
                  "type" : "ignore the token"
               }
            ],
            "cond" : [
               "oe[-1]",
               "is not",
               "HTML:colgroup"
            ],
            "false_actions" : [
               {
                  "type" : "pop-oe"
               },
               {
                  "im" : "in table",
                  "type" : "switch the insertion mode"
               }
            ],
            "type" : "if"
         }
      ],
      "in column group;END:template" : [
         {
            "im" : "in head",
            "type" : "USING-THE-RULES-FOR"
         }
      ],
      "in column group;START-ELSE" : [
         {
            "actions" : [
               {
                  "type" : "parse error"
               },
               {
                  "type" : "ignore the token"
               }
            ],
            "cond" : [
               "oe[-1]",
               "is not",
               "HTML:colgroup"
            ],
            "false_actions" : [
               {
                  "type" : "pop-oe"
               },
               {
                  "im" : "in table",
                  "type" : "switch the insertion mode"
               },
               {
                  "type" : "reprocess the token"
               }
            ],
            "type" : "if"
         }
      ],
      "in column group;START:col" : [
         {
            "type" : "insert an HTML element"
         },
         {
            "type" : "pop-oe"
         },
         {
            "type" : "acknowledge the token's self-closing flag"
         }
      ],
      "in column group;START:html" : [
         {
            "im" : "in body",
            "type" : "USING-THE-RULES-FOR"
         }
      ],
      "in column group;START:template" : [
         {
            "im" : "in head",
            "type" : "USING-THE-RULES-FOR"
         }
      ],
      "in column group;TEXT" : [
         {
            "actions" : [
               {
                  "actions" : [
                  ],
                  "char_actions" : [
                     {
                        "type" : "parse error"
                     }
                  ],
                  "type" : "process-chars",
                  "ws_seq_actions" : [
                     {
                        "type" : "insert-chars"
                     }
                  ]
               }
            ],
            "cond" : [
               "oe[-1]",
               "is not",
               "HTML:colgroup"
            ],
            "false_actions" : [
               {
                  "actions" : [
                     {
                        "type" : "pop-oe"
                     },
                     {
                        "im" : "in table",
                        "type" : "switch the insertion mode"
                     },
                     {
                        "type" : "reprocess the token"
                     }
                  ],
                  "type" : "text-with-optional-ws-prefix",
                  "ws_actions" : [
                     {
                        "type" : "insert-chars"
                     }
                  ]
               }
            ],
            "type" : "if"
         }
      ],
      "in foreign content;COMMENT" : [
         {
            "type" : "insert a comment"
         }
      ],
      "in foreign content;DOCTYPE" : [
         {
            "type" : "parse error"
         },
         {
            "type" : "ignore the token"
         }
      ],
      "in foreign content;END-ELSE" : [
         {
            "actions" : [
               {
                  "type" : "parse error"
               }
            ],
            "cond" : [
               "oe[-1]",
               "lc is not",
               {
                  "same_tag_name_as_token" : 1
               }
            ],
            "type" : "if"
         },
         {
            "actions" : [
               {
                  "actions" : [
                     {
                        "type" : "abort these steps"
                     }
                  ],
                  "cond" : [
                     "node",
                     "is",
                     "HTML:html"
                  ],
                  "type" : "if"
               },
               {
                  "actions" : [
                     {
                        "type" : "pop-oe",
                        "until" : "node"
                     },
                     {
                        "type" : "abort these steps"
                     }
                  ],
                  "cond" : [
                     "node",
                     "lc is",
                     {
                        "same_tag_name_as_token" : 1
                     }
                  ],
                  "type" : "if"
               }
            ],
            "between_actions" : [
               {
                  "actions" : [
                  ],
                  "cond" : [
                     "node",
                     "is not",
                     "HTML:*"
                  ],
                  "false_actions" : [
                     {
                        "im" : [
                           "current"
                        ],
                        "type" : "USING-THE-RULES-FOR"
                     },
                     {
                        "type" : "break-for-each"
                     }
                  ],
                  "type" : "if"
               }
            ],
            "type" : "for-each-reverse-oe-as-node"
         }
      ],
      "in foreign content;END:script" : [
         {
            "actions" : [
               {
                  "type" : "pop-oe"
               },
               {
                  "type" : "script-processing"
               }
            ],
            "cond" : [
               "oe[-1]",
               "is",
               "SVG:script"
            ],
            "false_actions" : [
               {
                  "actions" : [
                     {
                        "type" : "parse error"
                     }
                  ],
                  "cond" : [
                     "oe[-1]",
                     "lc is not",
                     {
                        "same_tag_name_as_token" : 1
                     }
                  ],
                  "type" : "if"
               },
               {
                  "actions" : [
                     {
                        "actions" : [
                           {
                              "type" : "abort these steps"
                           }
                        ],
                        "cond" : [
                           "node",
                           "is",
                           "HTML:html"
                        ],
                        "type" : "if"
                     },
                     {
                        "actions" : [
                           {
                              "type" : "pop-oe",
                              "until" : "node"
                           },
                           {
                              "type" : "abort these steps"
                           }
                        ],
                        "cond" : [
                           "node",
                           "lc is",
                           {
                              "same_tag_name_as_token" : 1
                           }
                        ],
                        "type" : "if"
                     }
                  ],
                  "between_actions" : [
                     {
                        "actions" : [
                        ],
                        "cond" : [
                           "node",
                           "is not",
                           "HTML:*"
                        ],
                        "false_actions" : [
                           {
                              "im" : [
                                 "current"
                              ],
                              "type" : "USING-THE-RULES-FOR"
                           },
                           {
                              "type" : "break-for-each"
                           }
                        ],
                        "type" : "if"
                     }
                  ],
                  "type" : "for-each-reverse-oe-as-node"
               }
            ],
            "type" : "if"
         }
      ],
      "in foreign content;EOF" : [
      ],
      "in foreign content;START-ELSE" : [
         {
            "actions" : [
               {
                  "type" : "adjust MathML attributes"
               }
            ],
            "cond" : [
               "adjusted current node",
               "is",
               "MathML:*"
            ],
            "type" : "if"
         },
         {
            "actions" : [
               {
                  "type" : "fixup-svg-tag-name"
               }
            ],
            "cond" : [
               "adjusted current node",
               "is",
               "SVG:*"
            ],
            "type" : "if"
         },
         {
            "actions" : [
               {
                  "type" : "adjust SVG attributes"
               }
            ],
            "cond" : [
               "adjusted current node",
               "is",
               "SVG:*"
            ],
            "type" : "if"
         },
         {
            "type" : "adjust foreign attributes"
         },
         {
            "ns" : "inherit",
            "type" : "insert a foreign element"
         },
         {
            "actions" : [
               {
                  "actions" : [
                     {
                        "type" : "acknowledge the token's self-closing flag"
                     },
                     {
                        "type" : "pop-oe"
                     },
                     {
                        "type" : "script-processing"
                     }
                  ],
                  "cond" : [
                     "and",
                     [
                        "token tag_name",
                        "is",
                        "script"
                     ],
                     [
                        "oe[-1]",
                        "is",
                        "SVG:*"
                     ]
                  ],
                  "false_actions" : [
                     {
                        "type" : "pop-oe"
                     },
                     {
                        "type" : "acknowledge the token's self-closing flag"
                     }
                  ],
                  "type" : "if"
               }
            ],
            "cond" : [
               "token",
               "has",
               "self-closing flag"
            ],
            "type" : "if"
         }
      ],
      "in foreign content;START:b big code em i s small strike strong tt u,blockquote center div dl menu ol ul,body,br,dd dt,embed img,h1 h2 h3 h4 h5 h6,head,hr,li,listing pre,meta,nobr,p,ruby span sub sup var,table" : [
         {
            "type" : "parse error"
         },
         {
            "actions" : [
               {
                  "actions" : [
                     {
                        "type" : "adjust MathML attributes"
                     }
                  ],
                  "cond" : [
                     "adjusted current node",
                     "is",
                     "MathML:*"
                  ],
                  "type" : "if"
               },
               {
                  "actions" : [
                     {
                        "type" : "fixup-svg-tag-name"
                     }
                  ],
                  "cond" : [
                     "adjusted current node",
                     "is",
                     "SVG:*"
                  ],
                  "type" : "if"
               },
               {
                  "actions" : [
                     {
                        "type" : "adjust SVG attributes"
                     }
                  ],
                  "cond" : [
                     "adjusted current node",
                     "is",
                     "SVG:*"
                  ],
                  "type" : "if"
               },
               {
                  "type" : "adjust foreign attributes"
               },
               {
                  "ns" : "inherit",
                  "type" : "insert a foreign element"
               },
               {
                  "actions" : [
                     {
                        "actions" : [
                           {
                              "type" : "acknowledge the token's self-closing flag"
                           },
                           {
                              "type" : "pop-oe"
                           },
                           {
                              "type" : "script-processing"
                           }
                        ],
                        "cond" : [
                           "and",
                           [
                              "token tag_name",
                              "is",
                              "script"
                           ],
                           [
                              "oe[-1]",
                              "is",
                              "SVG:*"
                           ]
                        ],
                        "false_actions" : [
                           {
                              "type" : "pop-oe"
                           },
                           {
                              "type" : "acknowledge the token's self-closing flag"
                           }
                        ],
                        "type" : "if"
                     }
                  ],
                  "cond" : [
                     "token",
                     "has",
                     "self-closing flag"
                  ],
                  "type" : "if"
               }
            ],
            "cond" : [
               "fragment"
            ],
            "false_actions" : [
               {
                  "type" : "pop-oe"
               },
               {
                  "type" : "pop-oe",
                  "while_not" : "HTML:* MathML:annotation-xml@encoding=application/xhtml\u002Bxml,MathML:annotation-xml@encoding=text/html MathML:mi,MathML:mn,MathML:mo,MathML:ms,MathML:mtext SVG:desc,SVG:foreignObject,SVG:title"
               },
               {
                  "type" : "reprocess the token"
               }
            ],
            "type" : "if"
         }
      ],
      "in foreign content;START:font" : [
         {
            "actions" : [
               {
                  "type" : "parse error"
               },
               {
                  "actions" : [
                     {
                        "actions" : [
                           {
                              "type" : "adjust MathML attributes"
                           }
                        ],
                        "cond" : [
                           "adjusted current node",
                           "is",
                           "MathML:*"
                        ],
                        "type" : "if"
                     },
                     {
                        "actions" : [
                           {
                              "type" : "fixup-svg-tag-name"
                           }
                        ],
                        "cond" : [
                           "adjusted current node",
                           "is",
                           "SVG:*"
                        ],
                        "type" : "if"
                     },
                     {
                        "actions" : [
                           {
                              "type" : "adjust SVG attributes"
                           }
                        ],
                        "cond" : [
                           "adjusted current node",
                           "is",
                           "SVG:*"
                        ],
                        "type" : "if"
                     },
                     {
                        "type" : "adjust foreign attributes"
                     },
                     {
                        "ns" : "inherit",
                        "type" : "insert a foreign element"
                     },
                     {
                        "actions" : [
                           {
                              "actions" : [
                                 {
                                    "type" : "acknowledge the token's self-closing flag"
                                 },
                                 {
                                    "type" : "pop-oe"
                                 },
                                 {
                                    "type" : "script-processing"
                                 }
                              ],
                              "cond" : [
                                 "and",
                                 [
                                    "token tag_name",
                                    "is",
                                    "script"
                                 ],
                                 [
                                    "oe[-1]",
                                    "is",
                                    "SVG:*"
                                 ]
                              ],
                              "false_actions" : [
                                 {
                                    "type" : "pop-oe"
                                 },
                                 {
                                    "type" : "acknowledge the token's self-closing flag"
                                 }
                              ],
                              "type" : "if"
                           }
                        ],
                        "cond" : [
                           "token",
                           "has",
                           "self-closing flag"
                        ],
                        "type" : "if"
                     }
                  ],
                  "cond" : [
                     "fragment"
                  ],
                  "false_actions" : [
                     {
                        "type" : "pop-oe"
                     },
                     {
                        "type" : "pop-oe",
                        "while_not" : "HTML:* MathML:annotation-xml@encoding=application/xhtml\u002Bxml,MathML:annotation-xml@encoding=text/html MathML:mi,MathML:mn,MathML:mo,MathML:ms,MathML:mtext SVG:desc,SVG:foreignObject,SVG:title"
                     },
                     {
                        "type" : "reprocess the token"
                     }
                  ],
                  "type" : "if"
               }
            ],
            "cond" : [
               "token",
               "has attr",
               [
                  "color",
                  "face",
                  "size"
               ]
            ],
            "false_actions" : [
               {
                  "actions" : [
                     {
                        "type" : "adjust MathML attributes"
                     }
                  ],
                  "cond" : [
                     "adjusted current node",
                     "is",
                     "MathML:*"
                  ],
                  "type" : "if"
               },
               {
                  "actions" : [
                     {
                        "type" : "fixup-svg-tag-name"
                     }
                  ],
                  "cond" : [
                     "adjusted current node",
                     "is",
                     "SVG:*"
                  ],
                  "type" : "if"
               },
               {
                  "actions" : [
                     {
                        "type" : "adjust SVG attributes"
                     }
                  ],
                  "cond" : [
                     "adjusted current node",
                     "is",
                     "SVG:*"
                  ],
                  "type" : "if"
               },
               {
                  "type" : "adjust foreign attributes"
               },
               {
                  "ns" : "inherit",
                  "type" : "insert a foreign element"
               },
               {
                  "actions" : [
                     {
                        "actions" : [
                        ],
                        "cond" : [
                           "and",
                           [
                              "token tag_name",
                              "is",
                              "script"
                           ],
                           [
                              "oe[-1]",
                              "is",
                              "SVG:*"
                           ]
                        ],
                        "false_actions" : [
                        ],
                        "type" : "if"
                     }
                  ],
                  "cond" : [
                     "token",
                     "has",
                     "self-closing flag"
                  ],
                  "type" : "if"
               }
            ],
            "type" : "if"
         }
      ],
      "in foreign content;TEXT" : [
         {
            "actions" : [
               {
                  "type" : "insert-chars"
               },
               {
                  "target" : "frameset-ok",
                  "type" : "set-false"
               }
            ],
            "null_char_actions" : [
               {
                  "type" : "parse error"
               }
            ],
            "null_seq_actions" : [
               {
                  "type" : "insert-chars"
               }
            ],
            "type" : "process-chars",
            "ws_seq_actions" : [
               {
                  "type" : "insert-chars"
               }
            ]
         }
      ],
      "in frameset;COMMENT" : [
         {
            "type" : "insert a comment"
         }
      ],
      "in frameset;DOCTYPE" : [
         {
            "type" : "parse error"
         },
         {
            "type" : "ignore the token"
         }
      ],
      "in frameset;END-ELSE" : [
         {
            "type" : "parse error"
         },
         {
            "type" : "ignore the token"
         }
      ],
      "in frameset;END:frameset" : [
         {
            "actions" : [
               {
                  "type" : "parse error"
               },
               {
                  "type" : "ignore the token"
               }
            ],
            "cond" : [
               "oe[-1]",
               "is",
               "HTML:html"
            ],
            "false_actions" : [
               {
                  "type" : "pop-oe"
               },
               {
                  "actions" : [
                     {
                        "im" : "after frameset",
                        "type" : "switch the insertion mode"
                     }
                  ],
                  "cond" : [
                     "and",
                     [
                        "fragment"
                     ],
                     [
                        "oe[-1]",
                        "is not",
                        "HTML:frameset"
                     ]
                  ],
                  "type" : "if"
               }
            ],
            "type" : "if"
         }
      ],
      "in frameset;EOF" : [
         {
            "actions" : [
               {
                  "type" : "parse error"
               }
            ],
            "cond" : [
               "oe[-1]",
               "is not",
               "HTML:html"
            ],
            "type" : "if"
         },
         {
            "type" : "stop parsing"
         }
      ],
      "in frameset;START-ELSE" : [
         {
            "type" : "parse error"
         },
         {
            "type" : "ignore the token"
         }
      ],
      "in frameset;START:frame" : [
         {
            "type" : "insert an HTML element"
         },
         {
            "type" : "pop-oe"
         },
         {
            "type" : "acknowledge the token's self-closing flag"
         }
      ],
      "in frameset;START:frameset" : [
         {
            "type" : "insert an HTML element"
         }
      ],
      "in frameset;START:html" : [
         {
            "im" : "in body",
            "type" : "USING-THE-RULES-FOR"
         }
      ],
      "in frameset;START:noframes" : [
         {
            "im" : "in head",
            "type" : "USING-THE-RULES-FOR"
         }
      ],
      "in frameset;TEXT" : [
         {
            "actions" : [
            ],
            "char_actions" : [
               {
                  "type" : "parse error"
               }
            ],
            "type" : "process-chars",
            "ws_seq_actions" : [
               {
                  "type" : "insert-chars"
               }
            ]
         }
      ],
      "in head noscript;DOCTYPE" : [
         {
            "type" : "parse error"
         },
         {
            "type" : "ignore the token"
         }
      ],
      "in head noscript;END-ELSE" : [
         {
            "type" : "parse error"
         },
         {
            "type" : "ignore the token"
         }
      ],
      "in head noscript;END:br" : [
         {
            "type" : "parse error"
         },
         {
            "type" : "pop-oe"
         },
         {
            "im" : "in head",
            "type" : "switch the insertion mode"
         },
         {
            "type" : "reprocess the token"
         }
      ],
      "in head noscript;END:noscript" : [
         {
            "type" : "pop-oe"
         },
         {
            "im" : "in head",
            "type" : "switch the insertion mode"
         }
      ],
      "in head noscript;EOF" : [
         {
            "type" : "parse error"
         },
         {
            "type" : "pop-oe"
         },
         {
            "im" : "in head",
            "type" : "switch the insertion mode"
         },
         {
            "type" : "reprocess the token"
         }
      ],
      "in head noscript;START-ELSE" : [
         {
            "type" : "parse error"
         },
         {
            "type" : "pop-oe"
         },
         {
            "im" : "in head",
            "type" : "switch the insertion mode"
         },
         {
            "type" : "reprocess the token"
         }
      ],
      "in head noscript;START:basefont bgsound link,meta,noframes,style" : [
         {
            "im" : "in head",
            "type" : "USING-THE-RULES-FOR"
         }
      ],
      "in head noscript;START:head,noscript" : [
         {
            "type" : "parse error"
         },
         {
            "type" : "ignore the token"
         }
      ],
      "in head noscript;START:html" : [
         {
            "im" : "in body",
            "type" : "USING-THE-RULES-FOR"
         }
      ],
      "in head noscript;TEXT" : [
         {
            "actions" : [
               {
                  "type" : "parse error"
               },
               {
                  "type" : "pop-oe"
               },
               {
                  "im" : "in head",
                  "type" : "switch the insertion mode"
               },
               {
                  "type" : "pop-oe"
               },
               {
                  "im" : "after head",
                  "type" : "switch the insertion mode"
               },
               {
                  "attrs" : "none",
                  "tag_name" : "body",
                  "type" : "insert an HTML element"
               },
               {
                  "im" : "in body",
                  "type" : "switch the insertion mode"
               },
               {
                  "type" : "reprocess the token"
               }
            ],
            "type" : "text-with-optional-ws-prefix",
            "ws_actions" : [
               {
                  "type" : "insert-chars"
               }
            ]
         }
      ],
      "in head;COMMENT" : [
         {
            "type" : "insert a comment"
         }
      ],
      "in head;DOCTYPE" : [
         {
            "type" : "parse error"
         },
         {
            "type" : "ignore the token"
         }
      ],
      "in head;END-ELSE" : [
         {
            "type" : "parse error"
         },
         {
            "type" : "ignore the token"
         }
      ],
      "in head;END:body,br,html" : [
         {
            "type" : "pop-oe"
         },
         {
            "im" : "after head",
            "type" : "switch the insertion mode"
         },
         {
            "type" : "reprocess the token"
         }
      ],
      "in head;END:head" : [
         {
            "type" : "pop-oe"
         },
         {
            "im" : "after head",
            "type" : "switch the insertion mode"
         }
      ],
      "in head;END:template" : [
         {
            "actions" : [
               {
                  "type" : "parse error"
               },
               {
                  "type" : "ignore the token"
               }
            ],
            "cond" : [
               "oe",
               "not in scope",
               "all",
               "HTML:template"
            ],
            "false_actions" : [
               {
                  "type" : "pop-oe",
                  "while" : "HTML:caption HTML:colgroup HTML:dd HTML:dt HTML:li HTML:optgroup,HTML:option HTML:p HTML:rp,HTML:rt HTML:tbody,HTML:tfoot,HTML:thead HTML:td,HTML:th HTML:tr"
               },
               {
                  "actions" : [
                     {
                        "type" : "parse error"
                     }
                  ],
                  "cond" : [
                     "oe[-1]",
                     "is not",
                     "HTML:template"
                  ],
                  "type" : "if"
               },
               {
                  "type" : "pop-oe",
                  "until" : "HTML:template"
               },
               {
                  "type" : "clear the list of active formatting elements up to the last marker"
               },
               {
                  "type" : "pop-template-ims"
               },
               {
                  "type" : "reset the insertion mode appropriately"
               }
            ],
            "type" : "if"
         }
      ],
      "in head;EOF" : [
         {
            "type" : "pop-oe"
         },
         {
            "im" : "after head",
            "type" : "switch the insertion mode"
         },
         {
            "type" : "reprocess the token"
         }
      ],
      "in head;START-ELSE" : [
         {
            "type" : "pop-oe"
         },
         {
            "im" : "after head",
            "type" : "switch the insertion mode"
         },
         {
            "type" : "reprocess the token"
         }
      ],
      "in head;START:base,basefont bgsound link" : [
         {
            "type" : "insert an HTML element"
         },
         {
            "type" : "pop-oe"
         },
         {
            "type" : "acknowledge the token's self-closing flag"
         }
      ],
      "in head;START:head" : [
         {
            "type" : "parse error"
         },
         {
            "type" : "ignore the token"
         }
      ],
      "in head;START:html" : [
         {
            "im" : "in body",
            "type" : "USING-THE-RULES-FOR"
         }
      ],
      "in head;START:meta" : [
         {
            "type" : "insert an HTML element"
         },
         {
            "type" : "pop-oe"
         },
         {
            "type" : "acknowledge the token's self-closing flag"
         },
         {
            "type" : "change-the-encoding-if-appropriate"
         }
      ],
      "in head;START:noframes,style" : [
         {
            "type" : "insert an HTML element"
         },
         {
            "state" : "RAWTEXT state",
            "type" : "switch the tokenizer"
         },
         {
            "target" : "original insertion mode",
            "type" : "set-current-im"
         },
         {
            "im" : "text",
            "type" : "switch the insertion mode"
         }
      ],
      "in head;START:noscript" : [
         {
            "actions" : [
               {
                  "type" : "insert an HTML element"
               },
               {
                  "state" : "RAWTEXT state",
                  "type" : "switch the tokenizer"
               },
               {
                  "target" : "original insertion mode",
                  "type" : "set-current-im"
               },
               {
                  "im" : "text",
                  "type" : "switch the insertion mode"
               }
            ],
            "cond" : [
               "scripting"
            ],
            "false_actions" : [
               {
                  "type" : "insert an HTML element"
               },
               {
                  "im" : "in head noscript",
                  "type" : "switch the insertion mode"
               }
            ],
            "type" : "if"
         }
      ],
      "in head;START:script" : [
         {
            "target" : "adjusted insertion location",
            "type" : "set-appropriate-place"
         },
         {
            "intended_parent" : "adjusted insertion location parent",
            "type" : "create an HTML element"
         },
         {
            "target" : "parser-inserted",
            "type" : "set-node-flag"
         },
         {
            "target" : "force-async",
            "type" : "unset-node-flag"
         },
         {
            "actions" : [
               {
                  "target" : "already started",
                  "type" : "set-node-flag"
               }
            ],
            "cond" : [
               "fragment"
            ],
            "type" : "if"
         },
         {
            "type" : "append-to-adjusted-insertion-location"
         },
         {
            "type" : "push-oe"
         },
         {
            "state" : "script data state",
            "type" : "switch the tokenizer"
         },
         {
            "target" : "original insertion mode",
            "type" : "set-current-im"
         },
         {
            "im" : "text",
            "type" : "switch the insertion mode"
         }
      ],
      "in head;START:template" : [
         {
            "type" : "insert an HTML element"
         },
         {
            "type" : "append-marker-to-afe"
         },
         {
            "target" : "frameset-ok",
            "type" : "set-false"
         },
         {
            "im" : "in template",
            "type" : "switch the insertion mode"
         },
         {
            "im" : "in template",
            "type" : "push-template-ims"
         }
      ],
      "in head;START:title" : [
         {
            "type" : "insert an HTML element"
         },
         {
            "state" : "RCDATA state",
            "type" : "switch the tokenizer"
         },
         {
            "target" : "original insertion mode",
            "type" : "set-current-im"
         },
         {
            "im" : "text",
            "type" : "switch the insertion mode"
         }
      ],
      "in head;TEXT" : [
         {
            "actions" : [
               {
                  "type" : "pop-oe"
               },
               {
                  "im" : "after head",
                  "type" : "switch the insertion mode"
               },
               {
                  "attrs" : "none",
                  "tag_name" : "body",
                  "type" : "insert an HTML element"
               },
               {
                  "im" : "in body",
                  "type" : "switch the insertion mode"
               },
               {
                  "type" : "reprocess the token"
               }
            ],
            "type" : "text-with-optional-ws-prefix",
            "ws_actions" : [
               {
                  "type" : "insert-chars"
               }
            ]
         }
      ],
      "in row;END-ELSE" : [
         {
            "im" : "in table",
            "type" : "USING-THE-RULES-FOR"
         }
      ],
      "in row;END:body,caption,col,colgroup,html,td th" : [
         {
            "type" : "parse error"
         },
         {
            "type" : "ignore the token"
         }
      ],
      "in row;END:table" : [
         {
            "actions" : [
               {
                  "type" : "parse error"
               },
               {
                  "type" : "ignore the token"
               }
            ],
            "cond" : [
               "oe",
               "not in scope",
               "table",
               "HTML:tr"
            ],
            "false_actions" : [
               {
                  "type" : "pop-oe",
                  "while_not" : "HTML:html HTML:template HTML:tr"
               },
               {
                  "type" : "pop-oe"
               },
               {
                  "im" : "in table body",
                  "type" : "switch the insertion mode"
               },
               {
                  "type" : "reprocess the token"
               }
            ],
            "type" : "if"
         }
      ],
      "in row;END:tbody tfoot thead" : [
         {
            "actions" : [
               {
                  "type" : "parse error"
               },
               {
                  "type" : "ignore the token"
               }
            ],
            "cond" : [
               "oe",
               "not in scope",
               "table",
               "HTML-same-tag-name"
            ],
            "type" : "if"
         },
         {
            "actions" : [
               {
                  "type" : "ignore the token"
               }
            ],
            "cond" : [
               "oe",
               "not in scope",
               "table",
               "HTML:tr"
            ],
            "false_actions" : [
               {
                  "type" : "pop-oe",
                  "while_not" : "HTML:html HTML:template HTML:tr"
               },
               {
                  "type" : "pop-oe"
               },
               {
                  "im" : "in table body",
                  "type" : "switch the insertion mode"
               },
               {
                  "type" : "reprocess the token"
               }
            ],
            "type" : "if"
         }
      ],
      "in row;END:tr" : [
         {
            "actions" : [
               {
                  "type" : "parse error"
               },
               {
                  "type" : "ignore the token"
               }
            ],
            "cond" : [
               "oe",
               "not in scope",
               "table",
               "HTML:tr"
            ],
            "false_actions" : [
               {
                  "type" : "pop-oe",
                  "while_not" : "HTML:html HTML:template HTML:tr"
               },
               {
                  "type" : "pop-oe"
               },
               {
                  "im" : "in table body",
                  "type" : "switch the insertion mode"
               }
            ],
            "type" : "if"
         }
      ],
      "in row;START-ELSE" : [
         {
            "im" : "in table",
            "type" : "USING-THE-RULES-FOR"
         }
      ],
      "in row;START:caption,col,colgroup,tbody tfoot thead,tr" : [
         {
            "actions" : [
               {
                  "type" : "parse error"
               },
               {
                  "type" : "ignore the token"
               }
            ],
            "cond" : [
               "oe",
               "not in scope",
               "table",
               "HTML:tr"
            ],
            "false_actions" : [
               {
                  "type" : "pop-oe",
                  "while_not" : "HTML:html HTML:template HTML:tr"
               },
               {
                  "type" : "pop-oe"
               },
               {
                  "im" : "in table body",
                  "type" : "switch the insertion mode"
               },
               {
                  "type" : "reprocess the token"
               }
            ],
            "type" : "if"
         }
      ],
      "in row;START:td th" : [
         {
            "type" : "pop-oe",
            "while_not" : "HTML:html HTML:template HTML:tr"
         },
         {
            "type" : "insert an HTML element"
         },
         {
            "im" : "in cell",
            "type" : "switch the insertion mode"
         },
         {
            "type" : "append-marker-to-afe"
         }
      ],
      "in row;TEXT" : [
         {
            "actions" : [
               {
                  "target" : "pending table character tokens",
                  "type" : "set-empty"
               },
               {
                  "target" : "original insertion mode",
                  "type" : "set-current-im"
               },
               {
                  "im" : "in table text",
                  "type" : "switch the insertion mode"
               },
               {
                  "type" : "reprocess the token"
               }
            ],
            "cond" : [
               "oe[-1]",
               "is",
               "HTML:table HTML:tbody,HTML:tfoot,HTML:thead HTML:tr"
            ],
            "false_actions" : [
               {
                  "type" : "parse error"
               },
               {
                  "actions" : [
                     {
                        "foster_parenting" : 1,
                        "type" : "reconstruct the active formatting elements"
                     },
                     {
                        "foster_parenting" : 1,
                        "type" : "insert-chars"
                     },
                     {
                        "target" : "frameset-ok",
                        "type" : "set-false"
                     }
                  ],
                  "null_char_actions" : [
                     {
                        "type" : "parse error"
                     }
                  ],
                  "type" : "process-chars",
                  "ws_seq_actions" : [
                     {
                        "foster_parenting" : 1,
                        "type" : "reconstruct the active formatting elements"
                     },
                     {
                        "foster_parenting" : 1,
                        "type" : "insert-chars"
                     }
                  ]
               }
            ],
            "type" : "if"
         }
      ],
      "in select in table;END-ELSE" : [
         {
            "im" : "in select",
            "type" : "USING-THE-RULES-FOR"
         }
      ],
      "in select in table;END:caption,table,tbody tfoot thead,td th,tr" : [
         {
            "type" : "parse error"
         },
         {
            "actions" : [
               {
                  "type" : "ignore the token"
               }
            ],
            "cond" : [
               "oe",
               "not in scope",
               "table",
               "HTML-same-tag-name"
            ],
            "false_actions" : [
               {
                  "type" : "pop-oe",
                  "until" : "HTML:select"
               },
               {
                  "type" : "reset the insertion mode appropriately"
               },
               {
                  "type" : "reprocess the token"
               }
            ],
            "type" : "if"
         }
      ],
      "in select in table;START-ELSE" : [
         {
            "im" : "in select",
            "type" : "USING-THE-RULES-FOR"
         }
      ],
      "in select in table;START:caption,table,tbody tfoot thead,td th,tr" : [
         {
            "type" : "parse error"
         },
         {
            "type" : "pop-oe",
            "until" : "HTML:select"
         },
         {
            "type" : "reset the insertion mode appropriately"
         },
         {
            "type" : "reprocess the token"
         }
      ],
      "in select in table;TEXT" : [
         {
            "actions" : [
               {
                  "type" : "insert-chars"
               }
            ],
            "null_char_actions" : [
               {
                  "type" : "parse error"
               }
            ],
            "type" : "process-chars"
         }
      ],
      "in select;COMMENT" : [
         {
            "type" : "insert a comment"
         }
      ],
      "in select;DOCTYPE" : [
         {
            "type" : "parse error"
         },
         {
            "type" : "ignore the token"
         }
      ],
      "in select;END-ELSE" : [
         {
            "type" : "parse error"
         },
         {
            "type" : "ignore the token"
         }
      ],
      "in select;END:optgroup" : [
         {
            "actions" : [
               {
                  "type" : "pop-oe"
               }
            ],
            "cond" : [
               "and",
               [
                  "oe[-1]",
                  "is",
                  "HTML:option"
               ],
               [
                  "oe[-2]",
                  "is",
                  "HTML:optgroup"
               ]
            ],
            "type" : "if"
         },
         {
            "actions" : [
               {
                  "type" : "pop-oe"
               }
            ],
            "cond" : [
               "oe[-1]",
               "is",
               "HTML:optgroup"
            ],
            "false_actions" : [
               {
                  "type" : "parse error"
               },
               {
                  "type" : "ignore the token"
               }
            ],
            "type" : "if"
         }
      ],
      "in select;END:option" : [
         {
            "actions" : [
               {
                  "type" : "pop-oe"
               }
            ],
            "cond" : [
               "oe[-1]",
               "is",
               "HTML:option"
            ],
            "false_actions" : [
               {
                  "type" : "parse error"
               },
               {
                  "type" : "ignore the token"
               }
            ],
            "type" : "if"
         }
      ],
      "in select;END:select" : [
         {
            "actions" : [
               {
                  "type" : "parse error"
               },
               {
                  "type" : "ignore the token"
               }
            ],
            "cond" : [
               "oe",
               "not in scope",
               "select",
               "HTML:select"
            ],
            "false_actions" : [
               {
                  "type" : "pop-oe",
                  "until" : "HTML:select"
               },
               {
                  "type" : "reset the insertion mode appropriately"
               }
            ],
            "type" : "if"
         }
      ],
      "in select;END:template" : [
         {
            "im" : "in head",
            "type" : "USING-THE-RULES-FOR"
         }
      ],
      "in select;START-ELSE" : [
         {
            "type" : "parse error"
         },
         {
            "type" : "ignore the token"
         }
      ],
      "in select;START:html" : [
         {
            "im" : "in body",
            "type" : "USING-THE-RULES-FOR"
         }
      ],
      "in select;START:input,keygen,textarea" : [
         {
            "type" : "parse error"
         },
         {
            "actions" : [
               {
                  "type" : "ignore the token"
               }
            ],
            "cond" : [
               "oe",
               "not in scope",
               "select",
               "HTML:select"
            ],
            "false_actions" : [
               {
                  "type" : "pop-oe",
                  "until" : "HTML:select"
               },
               {
                  "type" : "reset the insertion mode appropriately"
               },
               {
                  "type" : "reprocess the token"
               }
            ],
            "type" : "if"
         }
      ],
      "in select;START:optgroup" : [
         {
            "actions" : [
               {
                  "type" : "pop-oe"
               }
            ],
            "cond" : [
               "oe[-1]",
               "is",
               "HTML:option"
            ],
            "type" : "if"
         },
         {
            "actions" : [
               {
                  "type" : "pop-oe"
               }
            ],
            "cond" : [
               "oe[-1]",
               "is",
               "HTML:optgroup"
            ],
            "type" : "if"
         },
         {
            "type" : "insert an HTML element"
         }
      ],
      "in select;START:option" : [
         {
            "actions" : [
               {
                  "type" : "pop-oe"
               }
            ],
            "cond" : [
               "oe[-1]",
               "is",
               "HTML:option"
            ],
            "type" : "if"
         },
         {
            "type" : "insert an HTML element"
         }
      ],
      "in select;START:script,template" : [
         {
            "im" : "in head",
            "type" : "USING-THE-RULES-FOR"
         }
      ],
      "in select;START:select" : [
         {
            "type" : "parse error"
         },
         {
            "actions" : [
               {
                  "type" : "ignore the token"
               }
            ],
            "cond" : [
               "oe",
               "not in scope",
               "select",
               "HTML:select"
            ],
            "false_actions" : [
               {
                  "type" : "pop-oe",
                  "until" : "HTML:select"
               },
               {
                  "type" : "reset the insertion mode appropriately"
               }
            ],
            "type" : "if"
         }
      ],
      "in select;TEXT" : [
         {
            "actions" : [
               {
                  "type" : "insert-chars"
               }
            ],
            "null_char_actions" : [
               {
                  "type" : "parse error"
               }
            ],
            "type" : "process-chars"
         }
      ],
      "in table body;END-ELSE" : [
         {
            "im" : "in table",
            "type" : "USING-THE-RULES-FOR"
         }
      ],
      "in table body;END:body,caption,col,colgroup,html,td th,tr" : [
         {
            "type" : "parse error"
         },
         {
            "type" : "ignore the token"
         }
      ],
      "in table body;END:table" : [
         {
            "actions" : [
               {
                  "type" : "parse error"
               },
               {
                  "type" : "ignore the token"
               }
            ],
            "cond" : [
               "oe",
               "not in scope",
               "table",
               "HTML:tbody,HTML:tfoot,HTML:thead"
            ],
            "false_actions" : [
               {
                  "type" : "pop-oe",
                  "while_not" : "HTML:html HTML:tbody,HTML:tfoot,HTML:thead HTML:template"
               },
               {
                  "type" : "pop-oe"
               },
               {
                  "im" : "in table",
                  "type" : "switch the insertion mode"
               },
               {
                  "type" : "reprocess the token"
               }
            ],
            "type" : "if"
         }
      ],
      "in table body;END:tbody tfoot thead" : [
         {
            "actions" : [
               {
                  "type" : "parse error"
               },
               {
                  "type" : "ignore the token"
               }
            ],
            "cond" : [
               "oe",
               "not in scope",
               "table",
               "HTML-same-tag-name"
            ],
            "false_actions" : [
               {
                  "type" : "pop-oe",
                  "while_not" : "HTML:html HTML:tbody,HTML:tfoot,HTML:thead HTML:template"
               },
               {
                  "type" : "pop-oe"
               },
               {
                  "im" : "in table",
                  "type" : "switch the insertion mode"
               }
            ],
            "type" : "if"
         }
      ],
      "in table body;START-ELSE" : [
         {
            "im" : "in table",
            "type" : "USING-THE-RULES-FOR"
         }
      ],
      "in table body;START:caption,col,colgroup,tbody tfoot thead" : [
         {
            "actions" : [
               {
                  "type" : "parse error"
               },
               {
                  "type" : "ignore the token"
               }
            ],
            "cond" : [
               "oe",
               "not in scope",
               "table",
               "HTML:tbody,HTML:tfoot,HTML:thead"
            ],
            "false_actions" : [
               {
                  "type" : "pop-oe",
                  "while_not" : "HTML:html HTML:tbody,HTML:tfoot,HTML:thead HTML:template"
               },
               {
                  "type" : "pop-oe"
               },
               {
                  "im" : "in table",
                  "type" : "switch the insertion mode"
               },
               {
                  "type" : "reprocess the token"
               }
            ],
            "type" : "if"
         }
      ],
      "in table body;START:td th" : [
         {
            "type" : "parse error"
         },
         {
            "type" : "pop-oe",
            "while_not" : "HTML:html HTML:tbody,HTML:tfoot,HTML:thead HTML:template"
         },
         {
            "attrs" : "none",
            "tag_name" : "tr",
            "type" : "insert an HTML element"
         },
         {
            "im" : "in row",
            "type" : "switch the insertion mode"
         },
         {
            "type" : "reprocess the token"
         }
      ],
      "in table body;START:tr" : [
         {
            "type" : "pop-oe",
            "while_not" : "HTML:html HTML:tbody,HTML:tfoot,HTML:thead HTML:template"
         },
         {
            "type" : "insert an HTML element"
         },
         {
            "im" : "in row",
            "type" : "switch the insertion mode"
         }
      ],
      "in table body;TEXT" : [
         {
            "actions" : [
               {
                  "target" : "pending table character tokens",
                  "type" : "set-empty"
               },
               {
                  "target" : "original insertion mode",
                  "type" : "set-current-im"
               },
               {
                  "im" : "in table text",
                  "type" : "switch the insertion mode"
               },
               {
                  "type" : "reprocess the token"
               }
            ],
            "cond" : [
               "oe[-1]",
               "is",
               "HTML:table HTML:tbody,HTML:tfoot,HTML:thead HTML:tr"
            ],
            "false_actions" : [
               {
                  "type" : "parse error"
               },
               {
                  "actions" : [
                     {
                        "foster_parenting" : 1,
                        "type" : "reconstruct the active formatting elements"
                     },
                     {
                        "foster_parenting" : 1,
                        "type" : "insert-chars"
                     },
                     {
                        "target" : "frameset-ok",
                        "type" : "set-false"
                     }
                  ],
                  "null_char_actions" : [
                     {
                        "type" : "parse error"
                     }
                  ],
                  "type" : "process-chars",
                  "ws_seq_actions" : [
                     {
                        "foster_parenting" : 1,
                        "type" : "reconstruct the active formatting elements"
                     },
                     {
                        "foster_parenting" : 1,
                        "type" : "insert-chars"
                     }
                  ]
               }
            ],
            "type" : "if"
         }
      ],
      "in table text;COMMENT" : [
         {
            "actions" : [
               {
                  "type" : "parse error"
               },
               {
                  "FIELD" : "anything else",
                  "im" : "in table",
                  "type" : "reprocess pending table character tokens list"
               }
            ],
            "cond" : [
               "pending table character tokens list",
               "has non-space"
            ],
            "false_actions" : [
               {
                  "type" : "insert-chars",
                  "value" : [
                     "pending table character tokens list"
                  ]
               }
            ],
            "type" : "if"
         },
         {
            "im" : [
               "original"
            ],
            "type" : "switch the insertion mode"
         },
         {
            "type" : "reprocess the token"
         }
      ],
      "in table text;DOCTYPE" : [
         {
            "actions" : [
               {
                  "type" : "parse error"
               },
               {
                  "FIELD" : "anything else",
                  "im" : "in table",
                  "type" : "reprocess pending table character tokens list"
               }
            ],
            "cond" : [
               "pending table character tokens list",
               "has non-space"
            ],
            "false_actions" : [
               {
                  "type" : "insert-chars",
                  "value" : [
                     "pending table character tokens list"
                  ]
               }
            ],
            "type" : "if"
         },
         {
            "im" : [
               "original"
            ],
            "type" : "switch the insertion mode"
         },
         {
            "type" : "reprocess the token"
         }
      ],
      "in table text;END-ELSE" : [
         {
            "actions" : [
               {
                  "type" : "parse error"
               },
               {
                  "FIELD" : "anything else",
                  "im" : "in table",
                  "type" : "reprocess pending table character tokens list"
               }
            ],
            "cond" : [
               "pending table character tokens list",
               "has non-space"
            ],
            "false_actions" : [
               {
                  "type" : "insert-chars",
                  "value" : [
                     "pending table character tokens list"
                  ]
               }
            ],
            "type" : "if"
         },
         {
            "im" : [
               "original"
            ],
            "type" : "switch the insertion mode"
         },
         {
            "type" : "reprocess the token"
         }
      ],
      "in table text;EOF" : [
         {
            "actions" : [
               {
                  "type" : "parse error"
               },
               {
                  "FIELD" : "anything else",
                  "im" : "in table",
                  "type" : "reprocess pending table character tokens list"
               }
            ],
            "cond" : [
               "pending table character tokens list",
               "has non-space"
            ],
            "false_actions" : [
               {
                  "type" : "insert-chars",
                  "value" : [
                     "pending table character tokens list"
                  ]
               }
            ],
            "type" : "if"
         },
         {
            "im" : [
               "original"
            ],
            "type" : "switch the insertion mode"
         },
         {
            "type" : "reprocess the token"
         }
      ],
      "in table text;START-ELSE" : [
         {
            "actions" : [
               {
                  "type" : "parse error"
               },
               {
                  "FIELD" : "anything else",
                  "im" : "in table",
                  "type" : "reprocess pending table character tokens list"
               }
            ],
            "cond" : [
               "pending table character tokens list",
               "has non-space"
            ],
            "false_actions" : [
               {
                  "type" : "insert-chars",
                  "value" : [
                     "pending table character tokens list"
                  ]
               }
            ],
            "type" : "if"
         },
         {
            "im" : [
               "original"
            ],
            "type" : "switch the insertion mode"
         },
         {
            "type" : "reprocess the token"
         }
      ],
      "in table text;TEXT" : [
         {
            "actions" : [
               {
                  "type" : "append-to-pending-table-character-tokens-list"
               }
            ],
            "null_char_actions" : [
               {
                  "type" : "parse error"
               }
            ],
            "type" : "process-chars"
         }
      ],
      "in table;COMMENT" : [
         {
            "type" : "insert a comment"
         }
      ],
      "in table;DOCTYPE" : [
         {
            "type" : "parse error"
         },
         {
            "type" : "ignore the token"
         }
      ],
      "in table;END-ELSE" : [
         {
            "type" : "parse error"
         },
         {
            "im" : "in body",
            "type" : "USING-THE-RULES-FOR"
         }
      ],
      "in table;END:body,caption,col,colgroup,html,tbody tfoot thead,td th,tr" : [
         {
            "type" : "parse error"
         },
         {
            "type" : "ignore the token"
         }
      ],
      "in table;END:table" : [
         {
            "actions" : [
               {
                  "type" : "parse error"
               },
               {
                  "type" : "ignore the token"
               }
            ],
            "cond" : [
               "oe",
               "not in scope",
               "table",
               "HTML:table"
            ],
            "false_actions" : [
               {
                  "type" : "pop-oe",
                  "until" : "HTML:table"
               },
               {
                  "type" : "reset the insertion mode appropriately"
               }
            ],
            "type" : "if"
         }
      ],
      "in table;END:template" : [
         {
            "im" : "in head",
            "type" : "USING-THE-RULES-FOR"
         }
      ],
      "in table;START-ELSE" : [
         {
            "type" : "parse error"
         },
         {
            "foster_parenting" : 1,
            "type" : "reconstruct the active formatting elements"
         },
         {
            "foster_parenting" : 1,
            "type" : "insert an HTML element"
         }
      ],
      "in table;START:a" : [
         {
            "type" : "parse error"
         },
         {
            "actions" : [
               {
                  "type" : "parse error"
               },
               {
                  "foster_parenting" : 1,
                  "remove_from_afe_and_oe" : 1,
                  "tag_name" : "a",
                  "type" : "adoption agency algorithm"
               }
            ],
            "cond" : [
               "afe",
               "in scope",
               "marker",
               "HTML:a"
            ],
            "type" : "if"
         },
         {
            "foster_parenting" : 1,
            "type" : "reconstruct the active formatting elements"
         },
         {
            "foster_parenting" : 1,
            "type" : "insert an HTML element"
         },
         {
            "type" : "push onto the list of active formatting elements"
         }
      ],
      "in table;START:address article aside details dialog dir fieldset figcaption figure footer header hgroup main nav section summary,blockquote center div dl menu ol ul,p" : [
         {
            "type" : "parse error"
         },
         {
            "actions" : [
               {
                  "type" : "pop-oe",
                  "while" : "HTML:dd HTML:dt HTML:li HTML:optgroup,HTML:option HTML:rp,HTML:rt"
               },
               {
                  "actions" : [
                     {
                        "type" : "parse error"
                     }
                  ],
                  "cond" : [
                     "oe[-1]",
                     "is not",
                     "HTML:p"
                  ],
                  "type" : "if"
               },
               {
                  "type" : "pop-oe",
                  "until" : "HTML:p"
               }
            ],
            "cond" : [
               "oe",
               "in scope",
               "button",
               "HTML:p"
            ],
            "type" : "if"
         },
         {
            "foster_parenting" : 1,
            "type" : "insert an HTML element"
         }
      ],
      "in table;START:applet marquee object" : [
         {
            "type" : "parse error"
         },
         {
            "foster_parenting" : 1,
            "type" : "reconstruct the active formatting elements"
         },
         {
            "foster_parenting" : 1,
            "type" : "insert an HTML element"
         },
         {
            "type" : "append-marker-to-afe"
         },
         {
            "target" : "frameset-ok",
            "type" : "set-false"
         }
      ],
      "in table;START:area wbr,br,embed img,keygen" : [
         {
            "type" : "parse error"
         },
         {
            "foster_parenting" : 1,
            "type" : "reconstruct the active formatting elements"
         },
         {
            "foster_parenting" : 1,
            "type" : "insert an HTML element"
         },
         {
            "type" : "pop-oe"
         },
         {
            "type" : "acknowledge the token's self-closing flag"
         },
         {
            "target" : "frameset-ok",
            "type" : "set-false"
         }
      ],
      "in table;START:b big code em i s small strike strong tt u,font" : [
         {
            "type" : "parse error"
         },
         {
            "foster_parenting" : 1,
            "type" : "reconstruct the active formatting elements"
         },
         {
            "foster_parenting" : 1,
            "type" : "insert an HTML element"
         }
      ],
      "in table;START:base,basefont bgsound link,meta,noframes,title" : [
         {
            "type" : "parse error"
         },
         {
            "im" : "in head",
            "type" : "USING-THE-RULES-FOR"
         }
      ],
      "in table;START:body" : [
         {
            "type" : "parse error"
         },
         {
            "type" : "parse error"
         },
         {
            "actions" : [
               {
                  "type" : "ignore the token"
               }
            ],
            "cond" : [
               "or",
               [
                  "oe[1]",
                  "is not",
                  "HTML:body"
               ],
               [
                  "oe[-1]",
                  "is",
                  "HTML:html"
               ],
               [
                  "oe",
                  "in scope",
                  "all",
                  "HTML:template"
               ]
            ],
            "false_actions" : [
               {
                  "target" : "frameset-ok",
                  "type" : "set-false"
               },
               {
                  "node" : "oe[1]",
                  "type" : "set-attrs-if-missing"
               }
            ],
            "type" : "if"
         }
      ],
      "in table;START:button" : [
         {
            "type" : "parse error"
         },
         {
            "foster_parenting" : 1,
            "type" : "reconstruct the active formatting elements"
         },
         {
            "foster_parenting" : 1,
            "type" : "insert an HTML element"
         }
      ],
      "in table;START:caption" : [
         {
            "type" : "pop-oe",
            "while_not" : "HTML:html HTML:table HTML:template"
         },
         {
            "type" : "append-marker-to-afe"
         },
         {
            "type" : "insert an HTML element"
         },
         {
            "im" : "in caption",
            "type" : "switch the insertion mode"
         }
      ],
      "in table;START:col" : [
         {
            "type" : "pop-oe",
            "while_not" : "HTML:html HTML:table HTML:template"
         },
         {
            "attrs" : "none",
            "tag_name" : "colgroup",
            "type" : "insert an HTML element"
         },
         {
            "im" : "in column group",
            "type" : "switch the insertion mode"
         },
         {
            "type" : "reprocess the token"
         }
      ],
      "in table;START:colgroup" : [
         {
            "type" : "pop-oe",
            "while_not" : "HTML:html HTML:table HTML:template"
         },
         {
            "type" : "insert an HTML element"
         },
         {
            "im" : "in column group",
            "type" : "switch the insertion mode"
         }
      ],
      "in table;START:dd dt" : [
         {
            "type" : "parse error"
         },
         {
            "target" : "frameset-ok",
            "type" : "set-false"
         },
         {
            "actions" : [
               {
                  "actions" : [
                     {
                        "type" : "pop-oe",
                        "while" : "HTML:dt HTML:li HTML:optgroup,HTML:option HTML:p HTML:rp,HTML:rt"
                     },
                     {
                        "actions" : [
                           {
                              "type" : "parse error"
                           }
                        ],
                        "cond" : [
                           "oe[-1]",
                           "is not",
                           "HTML:dd"
                        ],
                        "type" : "if"
                     },
                     {
                        "type" : "pop-oe",
                        "until" : "HTML:dd"
                     },
                     {
                        "type" : "break-for-each"
                     }
                  ],
                  "cond" : [
                     "node",
                     "is",
                     "HTML:dd"
                  ],
                  "false_actions" : [
                     {
                        "actions" : [
                           {
                              "type" : "pop-oe",
                              "while" : "HTML:dd HTML:li HTML:optgroup,HTML:option HTML:p HTML:rp,HTML:rt"
                           },
                           {
                              "actions" : [
                                 {
                                    "type" : "parse error"
                                 }
                              ],
                              "cond" : [
                                 "oe[-1]",
                                 "is not",
                                 "HTML:dt"
                              ],
                              "type" : "if"
                           },
                           {
                              "type" : "pop-oe",
                              "until" : "HTML:dt"
                           },
                           {
                              "type" : "break-for-each"
                           }
                        ],
                        "cond" : [
                           "node",
                           "is",
                           "HTML:dt"
                        ],
                        "false_actions" : [
                           {
                              "actions" : [
                                 {
                                    "type" : "break-for-each"
                                 }
                              ],
                              "cond" : [
                                 "node",
                                 "is",
                                 "HTML:applet,HTML:marquee,HTML:object,MathML:annotation-xml HTML:area,HTML:article,HTML:aside,HTML:base,HTML:basefont,HTML:bgsound,HTML:blockquote,HTML:br,HTML:center,HTML:col,HTML:details,HTML:dir,HTML:dl,HTML:embed,HTML:fieldset,HTML:figcaption,HTML:figure,HTML:footer,HTML:form,HTML:frame,HTML:frameset,HTML:head,HTML:header,HTML:hgroup,HTML:hr,HTML:iframe,HTML:img,HTML:input,HTML:isindex,HTML:link,HTML:listing,HTML:main,HTML:menu,HTML:menuitem,HTML:meta,HTML:nav,HTML:noembed,HTML:noframes,HTML:noscript,HTML:param,HTML:plaintext,HTML:pre,HTML:script,HTML:section,HTML:select,HTML:source,HTML:style,HTML:summary,HTML:textarea,HTML:title,HTML:track,HTML:wbr,HTML:xmp HTML:body HTML:button HTML:caption HTML:colgroup HTML:dd HTML:dt HTML:h1,HTML:h2,HTML:h3,HTML:h4,HTML:h5,HTML:h6 HTML:html HTML:li HTML:ol,HTML:ul HTML:table HTML:tbody,HTML:tfoot,HTML:thead HTML:td,HTML:th HTML:template HTML:tr MathML:mi,MathML:mn,MathML:mo,MathML:ms,MathML:mtext SVG:desc,SVG:foreignObject,SVG:title"
                              ],
                              "false_actions" : [
                              ],
                              "type" : "if"
                           }
                        ],
                        "type" : "if"
                     }
                  ],
                  "type" : "if"
               }
            ],
            "between_actions" : [
            ],
            "type" : "for-each-reverse-oe-as-node"
         },
         {
            "actions" : [
               {
                  "type" : "pop-oe",
                  "while" : "HTML:dd HTML:dt HTML:li HTML:optgroup,HTML:option HTML:rp,HTML:rt"
               },
               {
                  "actions" : [
                     {
                        "type" : "parse error"
                     }
                  ],
                  "cond" : [
                     "oe[-1]",
                     "is not",
                     "HTML:p"
                  ],
                  "type" : "if"
               },
               {
                  "type" : "pop-oe",
                  "until" : "HTML:p"
               }
            ],
            "cond" : [
               "oe",
               "in scope",
               "button",
               "HTML:p"
            ],
            "type" : "if"
         },
         {
            "foster_parenting" : 1,
            "type" : "insert an HTML element"
         }
      ],
      "in table;START:form" : [
         {
            "type" : "parse error"
         },
         {
            "actions" : [
               {
                  "type" : "ignore the token"
               }
            ],
            "cond" : [
               "or",
               [
                  "oe",
                  "in scope",
                  "all",
                  "HTML:template"
               ],
               [
                  "form element pointer",
                  "is not null"
               ]
            ],
            "false_actions" : [
               {
                  "type" : "insert an HTML element"
               },
               {
                  "type" : "set-form-element-pointer"
               },
               {
                  "type" : "pop-oe"
               }
            ],
            "type" : "if"
         }
      ],
      "in table;START:frame,head" : [
         {
            "type" : "parse error"
         },
         {
            "type" : "parse error"
         },
         {
            "type" : "ignore the token"
         }
      ],
      "in table;START:frameset" : [
         {
            "type" : "parse error"
         },
         {
            "type" : "parse error"
         },
         {
            "actions" : [
               {
                  "type" : "ignore the token"
               }
            ],
            "cond" : [
               "or",
               [
                  "oe[-1]",
                  "is",
                  "HTML:html"
               ],
               [
                  "oe[1]",
                  "is not",
                  "HTML:body"
               ]
            ],
            "type" : "if"
         },
         {
            "actions" : [
               {
                  "type" : "ignore the token"
               }
            ],
            "cond" : [
               "frameset-ok flag",
               "is",
               "not ok"
            ],
            "false_actions" : [
               {
                  "item" : "oe[1]",
                  "type" : "remove-tree"
               },
               {
                  "type" : "pop-oe",
                  "until" : "oe[1]"
               },
               {
                  "foster_parenting" : 1,
                  "type" : "insert an HTML element"
               },
               {
                  "im" : "in frameset",
                  "type" : "switch the insertion mode"
               }
            ],
            "type" : "if"
         }
      ],
      "in table;START:h1 h2 h3 h4 h5 h6" : [
         {
            "type" : "parse error"
         },
         {
            "foster_parenting" : 1,
            "type" : "reconstruct the active formatting elements"
         },
         {
            "foster_parenting" : 1,
            "type" : "insert an HTML element"
         }
      ],
      "in table;START:hr" : [
         {
            "type" : "parse error"
         },
         {
            "actions" : [
               {
                  "type" : "pop-oe",
                  "while" : "HTML:dd HTML:dt HTML:li HTML:optgroup,HTML:option HTML:rp,HTML:rt"
               },
               {
                  "actions" : [
                     {
                        "type" : "parse error"
                     }
                  ],
                  "cond" : [
                     "oe[-1]",
                     "is not",
                     "HTML:p"
                  ],
                  "type" : "if"
               },
               {
                  "type" : "pop-oe",
                  "until" : "HTML:p"
               }
            ],
            "cond" : [
               "oe",
               "in scope",
               "button",
               "HTML:p"
            ],
            "type" : "if"
         },
         {
            "foster_parenting" : 1,
            "type" : "insert an HTML element"
         },
         {
            "type" : "pop-oe"
         },
         {
            "type" : "acknowledge the token's self-closing flag"
         },
         {
            "target" : "frameset-ok",
            "type" : "set-false"
         }
      ],
      "in table;START:html" : [
         {
            "type" : "parse error"
         },
         {
            "type" : "parse error"
         },
         {
            "actions" : [
               {
                  "type" : "ignore the token"
               }
            ],
            "cond" : [
               "oe",
               "in scope",
               "all",
               "HTML:template"
            ],
            "type" : "if"
         },
         {
            "node" : "oe[0]",
            "type" : "set-attrs-if-missing"
         }
      ],
      "in table;START:iframe" : [
         {
            "type" : "parse error"
         },
         {
            "foster_parenting" : 1,
            "type" : "reconstruct the active formatting elements"
         },
         {
            "foster_parenting" : 1,
            "type" : "insert an HTML element"
         }
      ],
      "in table;START:image" : [
         {
            "type" : "parse error"
         },
         {
            "type" : "parse error"
         },
         {
            "tag_name" : "img",
            "type" : "change the token's tag name"
         },
         {
            "type" : "reprocess the token"
         }
      ],
      "in table;START:input" : [
         {
            "actions" : [
               {
                  "type" : "parse error"
               },
               {
                  "foster_parenting" : 1,
                  "type" : "reconstruct the active formatting elements"
               },
               {
                  "foster_parenting" : 1,
                  "type" : "insert an HTML element"
               },
               {
                  "type" : "pop-oe"
               },
               {
                  "type" : "acknowledge the token's self-closing flag"
               },
               {
                  "actions" : [
                     {
                        "target" : "frameset-ok",
                        "type" : "set-false"
                     }
                  ],
                  "cond" : [
                     "token[type]",
                     "lc is not",
                     "hidden"
                  ],
                  "type" : "if"
               }
            ],
            "cond" : [
               "token[type]",
               "lc is not",
               "hidden"
            ],
            "false_actions" : [
               {
                  "type" : "parse error"
               },
               {
                  "type" : "insert an HTML element"
               },
               {
                  "type" : "pop-oe"
               },
               {
                  "type" : "acknowledge the token's self-closing flag"
               }
            ],
            "type" : "if"
         }
      ],
      "in table;START:isindex" : [
         {
            "type" : "parse error"
         },
         {
            "type" : "parse error"
         },
         {
            "actions" : [
               {
                  "type" : "ignore the token"
               }
            ],
            "cond" : [
               "and",
               [
                  "oe",
                  "not in scope",
                  "all",
                  "HTML:template"
               ],
               [
                  "form element pointer",
                  "is not null"
               ]
            ],
            "false_actions" : [
               {
                  "type" : "acknowledge the token's self-closing flag"
               },
               {
                  "target" : "frameset-ok",
                  "type" : "set-false"
               },
               {
                  "actions" : [
                     {
                        "type" : "pop-oe",
                        "while" : "HTML:dd HTML:dt HTML:li HTML:optgroup,HTML:option HTML:rp,HTML:rt"
                     },
                     {
                        "actions" : [
                           {
                              "type" : "parse error"
                           }
                        ],
                        "cond" : [
                           "oe[-1]",
                           "is not",
                           "HTML:p"
                        ],
                        "type" : "if"
                     },
                     {
                        "type" : "pop-oe",
                        "until" : "HTML:p"
                     }
                  ],
                  "cond" : [
                     "oe",
                     "in scope",
                     "button",
                     "HTML:p"
                  ],
                  "type" : "if"
               },
               {
                  "attrs" : "none",
                  "foster_parenting" : 1,
                  "tag_name" : "form",
                  "type" : "insert an HTML element"
               },
               {
                  "actions" : [
                     {
                        "type" : "set-form-element-pointer"
                     }
                  ],
                  "cond" : [
                     "oe",
                     "not in scope",
                     "all",
                     "HTML:template"
                  ],
                  "type" : "if"
               },
               {
                  "actions" : [
                     {
                        "target" : "action",
                        "type" : "set-form-attr"
                     }
                  ],
                  "cond" : [
                     "token",
                     "has attr",
                     "action"
                  ],
                  "type" : "if"
               },
               {
                  "attrs" : "none",
                  "foster_parenting" : 1,
                  "tag_name" : "hr",
                  "type" : "insert an HTML element"
               },
               {
                  "type" : "pop-oe"
               },
               {
                  "foster_parenting" : 1,
                  "type" : "reconstruct the active formatting elements"
               },
               {
                  "attrs" : "none",
                  "foster_parenting" : 1,
                  "tag_name" : "label",
                  "type" : "insert an HTML element"
               },
               {
                  "foster_parenting" : 1,
                  "type" : "insert-chars",
                  "value" : [
                     "prompt-string"
                  ]
               },
               {
                  "attrs" : "isindex",
                  "foster_parenting" : 1,
                  "tag_name" : "input",
                  "type" : "insert an HTML element"
               },
               {
                  "type" : "pop-oe"
               },
               {
                  "foster_parenting" : 1,
                  "type" : "insert-chars",
                  "value" : [
                     "prompt-string"
                  ]
               },
               {
                  "type" : "pop-oe"
               },
               {
                  "attrs" : "none",
                  "foster_parenting" : 1,
                  "tag_name" : "hr",
                  "type" : "insert an HTML element"
               },
               {
                  "type" : "pop-oe"
               },
               {
                  "type" : "pop-oe"
               },
               {
                  "actions" : [
                     {
                        "target" : "form element pointer",
                        "type" : "set-null"
                     }
                  ],
                  "cond" : [
                     "oe",
                     "not in scope",
                     "all",
                     "HTML:template"
                  ],
                  "type" : "if"
               }
            ],
            "type" : "if"
         }
      ],
      "in table;START:li" : [
         {
            "type" : "parse error"
         },
         {
            "target" : "frameset-ok",
            "type" : "set-false"
         },
         {
            "actions" : [
               {
                  "actions" : [
                     {
                        "type" : "pop-oe",
                        "while" : "HTML:dd HTML:dt HTML:optgroup,HTML:option HTML:p HTML:rp,HTML:rt"
                     },
                     {
                        "actions" : [
                           {
                              "type" : "parse error"
                           }
                        ],
                        "cond" : [
                           "oe[-1]",
                           "is not",
                           "HTML:li"
                        ],
                        "type" : "if"
                     },
                     {
                        "type" : "pop-oe",
                        "until" : "HTML:li"
                     },
                     {
                        "type" : "break-for-each"
                     }
                  ],
                  "cond" : [
                     "node",
                     "is",
                     "HTML:li"
                  ],
                  "false_actions" : [
                     {
                        "actions" : [
                           {
                              "type" : "break-for-each"
                           }
                        ],
                        "cond" : [
                           "node",
                           "is",
                           "HTML:applet,HTML:marquee,HTML:object,MathML:annotation-xml HTML:area,HTML:article,HTML:aside,HTML:base,HTML:basefont,HTML:bgsound,HTML:blockquote,HTML:br,HTML:center,HTML:col,HTML:details,HTML:dir,HTML:dl,HTML:embed,HTML:fieldset,HTML:figcaption,HTML:figure,HTML:footer,HTML:form,HTML:frame,HTML:frameset,HTML:head,HTML:header,HTML:hgroup,HTML:hr,HTML:iframe,HTML:img,HTML:input,HTML:isindex,HTML:link,HTML:listing,HTML:main,HTML:menu,HTML:menuitem,HTML:meta,HTML:nav,HTML:noembed,HTML:noframes,HTML:noscript,HTML:param,HTML:plaintext,HTML:pre,HTML:script,HTML:section,HTML:select,HTML:source,HTML:style,HTML:summary,HTML:textarea,HTML:title,HTML:track,HTML:wbr,HTML:xmp HTML:body HTML:button HTML:caption HTML:colgroup HTML:dd HTML:dt HTML:h1,HTML:h2,HTML:h3,HTML:h4,HTML:h5,HTML:h6 HTML:html HTML:li HTML:ol,HTML:ul HTML:table HTML:tbody,HTML:tfoot,HTML:thead HTML:td,HTML:th HTML:template HTML:tr MathML:mi,MathML:mn,MathML:mo,MathML:ms,MathML:mtext SVG:desc,SVG:foreignObject,SVG:title"
                        ],
                        "false_actions" : [
                        ],
                        "type" : "if"
                     }
                  ],
                  "type" : "if"
               }
            ],
            "between_actions" : [
            ],
            "type" : "for-each-reverse-oe-as-node"
         },
         {
            "actions" : [
               {
                  "type" : "pop-oe",
                  "while" : "HTML:dd HTML:dt HTML:li HTML:optgroup,HTML:option HTML:rp,HTML:rt"
               },
               {
                  "actions" : [
                     {
                        "type" : "parse error"
                     }
                  ],
                  "cond" : [
                     "oe[-1]",
                     "is not",
                     "HTML:p"
                  ],
                  "type" : "if"
               },
               {
                  "type" : "pop-oe",
                  "until" : "HTML:p"
               }
            ],
            "cond" : [
               "oe",
               "in scope",
               "button",
               "HTML:p"
            ],
            "type" : "if"
         },
         {
            "foster_parenting" : 1,
            "type" : "insert an HTML element"
         }
      ],
      "in table;START:listing pre" : [
         {
            "type" : "parse error"
         },
         {
            "foster_parenting" : 1,
            "type" : "reconstruct the active formatting elements"
         },
         {
            "foster_parenting" : 1,
            "type" : "insert an HTML element"
         }
      ],
      "in table;START:math" : [
         {
            "type" : "parse error"
         },
         {
            "foster_parenting" : 1,
            "type" : "reconstruct the active formatting elements"
         },
         {
            "type" : "adjust MathML attributes"
         },
         {
            "type" : "adjust foreign attributes"
         },
         {
            "foster_parenting" : 1,
            "ns" : "MathML",
            "type" : "insert a foreign element"
         },
         {
            "actions" : [
               {
                  "type" : "pop-oe"
               },
               {
                  "type" : "acknowledge the token's self-closing flag"
               }
            ],
            "cond" : [
               "token",
               "has",
               "self-closing flag"
            ],
            "type" : "if"
         }
      ],
      "in table;START:menuitem param source track" : [
         {
            "type" : "parse error"
         },
         {
            "foster_parenting" : 1,
            "type" : "insert an HTML element"
         },
         {
            "type" : "pop-oe"
         },
         {
            "type" : "acknowledge the token's self-closing flag"
         }
      ],
      "in table;START:nobr" : [
         {
            "type" : "parse error"
         },
         {
            "foster_parenting" : 1,
            "type" : "reconstruct the active formatting elements"
         },
         {
            "actions" : [
               {
                  "type" : "parse error"
               },
               {
                  "foster_parenting" : 1,
                  "tag_name" : "nobr",
                  "type" : "adoption agency algorithm"
               },
               {
                  "foster_parenting" : 1,
                  "type" : "reconstruct the active formatting elements"
               }
            ],
            "cond" : [
               "oe",
               "in scope",
               "scope",
               "HTML:nobr"
            ],
            "type" : "if"
         },
         {
            "foster_parenting" : 1,
            "type" : "insert an HTML element"
         },
         {
            "type" : "push onto the list of active formatting elements"
         }
      ],
      "in table;START:noembed" : [
         {
            "type" : "parse error"
         },
         {
            "foster_parenting" : 1,
            "type" : "insert an HTML element"
         },
         {
            "state" : "RAWTEXT state",
            "type" : "switch the tokenizer"
         },
         {
            "target" : "original insertion mode",
            "type" : "set-current-im"
         },
         {
            "im" : "text",
            "type" : "switch the insertion mode"
         }
      ],
      "in table;START:noscript" : [
         {
            "type" : "parse error"
         },
         {
            "actions" : [
               {
                  "foster_parenting" : 1,
                  "type" : "insert an HTML element"
               },
               {
                  "state" : "RAWTEXT state",
                  "type" : "switch the tokenizer"
               },
               {
                  "target" : "original insertion mode",
                  "type" : "set-current-im"
               },
               {
                  "im" : "text",
                  "type" : "switch the insertion mode"
               }
            ],
            "cond" : [
               "scripting"
            ],
            "false_actions" : [
               {
                  "foster_parenting" : 1,
                  "type" : "reconstruct the active formatting elements"
               },
               {
                  "foster_parenting" : 1,
                  "type" : "insert an HTML element"
               }
            ],
            "type" : "if"
         }
      ],
      "in table;START:optgroup,option" : [
         {
            "type" : "parse error"
         },
         {
            "actions" : [
               {
                  "type" : "pop-oe"
               }
            ],
            "cond" : [
               "oe[-1]",
               "is",
               "HTML:option"
            ],
            "type" : "if"
         },
         {
            "foster_parenting" : 1,
            "type" : "reconstruct the active formatting elements"
         },
         {
            "foster_parenting" : 1,
            "type" : "insert an HTML element"
         }
      ],
      "in table;START:plaintext" : [
         {
            "type" : "parse error"
         },
         {
            "actions" : [
               {
                  "type" : "pop-oe",
                  "while" : "HTML:dd HTML:dt HTML:li HTML:optgroup,HTML:option HTML:rp,HTML:rt"
               },
               {
                  "actions" : [
                     {
                        "type" : "parse error"
                     }
                  ],
                  "cond" : [
                     "oe[-1]",
                     "is not",
                     "HTML:p"
                  ],
                  "type" : "if"
               },
               {
                  "type" : "pop-oe",
                  "until" : "HTML:p"
               }
            ],
            "cond" : [
               "oe",
               "in scope",
               "button",
               "HTML:p"
            ],
            "type" : "if"
         },
         {
            "foster_parenting" : 1,
            "type" : "insert an HTML element"
         },
         {
            "state" : "PLAINTEXT state",
            "type" : "switch the tokenizer"
         }
      ],
      "in table;START:rp rt" : [
         {
            "type" : "parse error"
         },
         {
            "actions" : [
               {
                  "type" : "pop-oe",
                  "while" : "HTML:dd HTML:dt HTML:li HTML:optgroup,HTML:option HTML:p HTML:rp,HTML:rt"
               }
            ],
            "cond" : [
               "oe",
               "in scope",
               "scope",
               "HTML:ruby"
            ],
            "type" : "if"
         },
         {
            "actions" : [
               {
                  "type" : "parse error"
               }
            ],
            "cond" : [
               "oe[-1]",
               "is not",
               "HTML:ruby"
            ],
            "type" : "if"
         },
         {
            "foster_parenting" : 1,
            "type" : "insert an HTML element"
         }
      ],
      "in table;START:script,style,template" : [
         {
            "im" : "in head",
            "type" : "USING-THE-RULES-FOR"
         }
      ],
      "in table;START:select" : [
         {
            "type" : "parse error"
         },
         {
            "foster_parenting" : 1,
            "type" : "reconstruct the active formatting elements"
         },
         {
            "foster_parenting" : 1,
            "type" : "insert an HTML element"
         },
         {
            "target" : "frameset-ok",
            "type" : "set-false"
         },
         {
            "actions" : [
               {
                  "im" : "in select in table",
                  "type" : "switch the insertion mode"
               }
            ],
            "cond" : [
               "im",
               "is",
               [
                  "in table",
                  "in caption",
                  "in table body",
                  "in row",
                  "in cell"
               ]
            ],
            "false_actions" : [
               {
                  "im" : "in select",
                  "type" : "switch the insertion mode"
               }
            ],
            "type" : "if"
         }
      ],
      "in table;START:svg" : [
         {
            "type" : "parse error"
         },
         {
            "foster_parenting" : 1,
            "type" : "reconstruct the active formatting elements"
         },
         {
            "type" : "adjust SVG attributes"
         },
         {
            "type" : "adjust foreign attributes"
         },
         {
            "foster_parenting" : 1,
            "ns" : "SVG",
            "type" : "insert a foreign element"
         },
         {
            "actions" : [
               {
                  "type" : "pop-oe"
               },
               {
                  "type" : "acknowledge the token's self-closing flag"
               }
            ],
            "cond" : [
               "token",
               "has",
               "self-closing flag"
            ],
            "type" : "if"
         }
      ],
      "in table;START:table" : [
         {
            "type" : "parse error"
         },
         {
            "actions" : [
               {
                  "type" : "ignore the token"
               }
            ],
            "cond" : [
               "oe",
               "not in scope",
               "table",
               "HTML:table"
            ],
            "false_actions" : [
               {
                  "type" : "pop-oe",
                  "until" : "HTML:table"
               },
               {
                  "type" : "reset the insertion mode appropriately"
               },
               {
                  "type" : "reprocess the token"
               }
            ],
            "type" : "if"
         }
      ],
      "in table;START:tbody tfoot thead" : [
         {
            "type" : "pop-oe",
            "while_not" : "HTML:html HTML:table HTML:template"
         },
         {
            "type" : "insert an HTML element"
         },
         {
            "im" : "in table body",
            "type" : "switch the insertion mode"
         }
      ],
      "in table;START:td th,tr" : [
         {
            "type" : "pop-oe",
            "while_not" : "HTML:html HTML:table HTML:template"
         },
         {
            "attrs" : "none",
            "tag_name" : "tbody",
            "type" : "insert an HTML element"
         },
         {
            "im" : "in table body",
            "type" : "switch the insertion mode"
         },
         {
            "type" : "reprocess the token"
         }
      ],
      "in table;START:textarea" : [
         {
            "type" : "parse error"
         },
         {
            "foster_parenting" : 1,
            "type" : "insert an HTML element"
         },
         {
            "type" : "ignore-next-lf"
         },
         {
            "state" : "RCDATA state",
            "type" : "switch the tokenizer"
         },
         {
            "target" : "original insertion mode",
            "type" : "set-current-im"
         },
         {
            "target" : "frameset-ok",
            "type" : "set-false"
         },
         {
            "im" : "text",
            "type" : "switch the insertion mode"
         }
      ],
      "in table;START:xmp" : [
         {
            "type" : "parse error"
         },
         {
            "actions" : [
               {
                  "type" : "pop-oe",
                  "while" : "HTML:dd HTML:dt HTML:li HTML:optgroup,HTML:option HTML:rp,HTML:rt"
               },
               {
                  "actions" : [
                     {
                        "type" : "parse error"
                     }
                  ],
                  "cond" : [
                     "oe[-1]",
                     "is not",
                     "HTML:p"
                  ],
                  "type" : "if"
               },
               {
                  "type" : "pop-oe",
                  "until" : "HTML:p"
               }
            ],
            "cond" : [
               "oe",
               "in scope",
               "button",
               "HTML:p"
            ],
            "type" : "if"
         },
         {
            "foster_parenting" : 1,
            "type" : "reconstruct the active formatting elements"
         },
         {
            "target" : "frameset-ok",
            "type" : "set-false"
         },
         {
            "foster_parenting" : 1,
            "type" : "insert an HTML element"
         },
         {
            "state" : "RAWTEXT state",
            "type" : "switch the tokenizer"
         },
         {
            "target" : "original insertion mode",
            "type" : "set-current-im"
         },
         {
            "im" : "text",
            "type" : "switch the insertion mode"
         }
      ],
      "in table;TEXT" : [
         {
            "actions" : [
               {
                  "target" : "pending table character tokens",
                  "type" : "set-empty"
               },
               {
                  "target" : "original insertion mode",
                  "type" : "set-current-im"
               },
               {
                  "im" : "in table text",
                  "type" : "switch the insertion mode"
               },
               {
                  "type" : "reprocess the token"
               }
            ],
            "cond" : [
               "oe[-1]",
               "is",
               "HTML:table HTML:tbody,HTML:tfoot,HTML:thead HTML:tr"
            ],
            "false_actions" : [
               {
                  "type" : "parse error"
               },
               {
                  "actions" : [
                     {
                        "foster_parenting" : 1,
                        "type" : "reconstruct the active formatting elements"
                     },
                     {
                        "foster_parenting" : 1,
                        "type" : "insert-chars"
                     },
                     {
                        "target" : "frameset-ok",
                        "type" : "set-false"
                     }
                  ],
                  "null_char_actions" : [
                     {
                        "type" : "parse error"
                     }
                  ],
                  "type" : "process-chars",
                  "ws_seq_actions" : [
                     {
                        "foster_parenting" : 1,
                        "type" : "reconstruct the active formatting elements"
                     },
                     {
                        "foster_parenting" : 1,
                        "type" : "insert-chars"
                     }
                  ]
               }
            ],
            "type" : "if"
         }
      ],
      "in template;END-ELSE" : [
         {
            "type" : "parse error"
         },
         {
            "type" : "ignore the token"
         }
      ],
      "in template;END:template" : [
         {
            "im" : "in head",
            "type" : "USING-THE-RULES-FOR"
         }
      ],
      "in template;EOF" : [
         {
            "actions" : [
               {
                  "type" : "stop parsing"
               }
            ],
            "cond" : [
               "oe",
               "not in scope",
               "all",
               "HTML:template"
            ],
            "false_actions" : [
               {
                  "type" : "parse error"
               }
            ],
            "type" : "if"
         },
         {
            "type" : "pop-oe",
            "until" : "HTML:template"
         },
         {
            "type" : "clear the list of active formatting elements up to the last marker"
         },
         {
            "type" : "pop-template-ims"
         },
         {
            "type" : "reset the insertion mode appropriately"
         },
         {
            "type" : "reprocess the token"
         }
      ],
      "in template;START-ELSE" : [
         {
            "type" : "pop-template-ims"
         },
         {
            "im" : "in body",
            "type" : "push-template-ims"
         },
         {
            "im" : "in body",
            "type" : "switch the insertion mode"
         },
         {
            "type" : "reprocess the token"
         }
      ],
      "in template;START:base,basefont bgsound link,meta,noframes,script,style,template,title" : [
         {
            "im" : "in head",
            "type" : "USING-THE-RULES-FOR"
         }
      ],
      "in template;START:caption,colgroup,tbody tfoot thead" : [
         {
            "type" : "pop-template-ims"
         },
         {
            "im" : "in table",
            "type" : "push-template-ims"
         },
         {
            "im" : "in table",
            "type" : "switch the insertion mode"
         },
         {
            "type" : "reprocess the token"
         }
      ],
      "in template;START:col" : [
         {
            "type" : "pop-template-ims"
         },
         {
            "im" : "in column group",
            "type" : "push-template-ims"
         },
         {
            "im" : "in column group",
            "type" : "switch the insertion mode"
         },
         {
            "type" : "reprocess the token"
         }
      ],
      "in template;START:td th" : [
         {
            "type" : "pop-template-ims"
         },
         {
            "im" : "in row",
            "type" : "push-template-ims"
         },
         {
            "im" : "in row",
            "type" : "switch the insertion mode"
         },
         {
            "type" : "reprocess the token"
         }
      ],
      "in template;START:tr" : [
         {
            "type" : "pop-template-ims"
         },
         {
            "im" : "in table body",
            "type" : "push-template-ims"
         },
         {
            "im" : "in table body",
            "type" : "switch the insertion mode"
         },
         {
            "type" : "reprocess the token"
         }
      ],
      "in template;TEXT" : [
         {
            "actions" : [
               {
                  "type" : "reconstruct the active formatting elements"
               },
               {
                  "type" : "insert-chars"
               },
               {
                  "target" : "frameset-ok",
                  "type" : "set-false"
               }
            ],
            "null_char_actions" : [
               {
                  "type" : "parse error"
               }
            ],
            "type" : "process-chars",
            "ws_seq_actions" : [
               {
                  "type" : "reconstruct the active formatting elements"
               },
               {
                  "type" : "insert-chars"
               }
            ]
         }
      ],
      "initial;COMMENT" : [
         {
            "position" : "document",
            "type" : "insert a comment"
         }
      ],
      "initial;DOCTYPE" : [
         {
            "actions" : [
               {
                  "type" : "parse error"
               }
            ],
            "cond" : [
               "legacy doctype"
            ],
            "type" : "if"
         },
         {
            "item" : "DocumentType",
            "type" : "append-to-document"
         },
         {
            "type" : "doctype-switch"
         },
         {
            "im" : "before html",
            "type" : "switch the insertion mode"
         }
      ],
      "initial;END-ELSE" : [
         {
            "actions" : [
               {
                  "type" : "parse error"
               },
               {
                  "type" : "set-compat-mode",
                  "value" : "quirks"
               }
            ],
            "cond" : [
               "not iframe srcdoc document"
            ],
            "type" : "if"
         },
         {
            "im" : "before html",
            "type" : "switch the insertion mode"
         },
         {
            "type" : "reprocess the token"
         }
      ],
      "initial;EOF" : [
         {
            "actions" : [
               {
                  "type" : "parse error"
               },
               {
                  "type" : "set-compat-mode",
                  "value" : "quirks"
               }
            ],
            "cond" : [
               "not iframe srcdoc document"
            ],
            "type" : "if"
         },
         {
            "im" : "before html",
            "type" : "switch the insertion mode"
         },
         {
            "type" : "reprocess the token"
         }
      ],
      "initial;START-ELSE" : [
         {
            "actions" : [
               {
                  "type" : "parse error"
               },
               {
                  "type" : "set-compat-mode",
                  "value" : "quirks"
               }
            ],
            "cond" : [
               "not iframe srcdoc document"
            ],
            "type" : "if"
         },
         {
            "im" : "before html",
            "type" : "switch the insertion mode"
         },
         {
            "type" : "reprocess the token"
         }
      ],
      "initial;TEXT" : [
         {
            "actions" : [
               {
                  "actions" : [
                     {
                        "type" : "parse error"
                     },
                     {
                        "type" : "set-compat-mode",
                        "value" : "quirks"
                     }
                  ],
                  "cond" : [
                     "not iframe srcdoc document"
                  ],
                  "type" : "if"
               },
               {
                  "im" : "before html",
                  "type" : "switch the insertion mode"
               },
               {
                  "local_name" : "html",
                  "type" : "create an HTML element"
               },
               {
                  "type" : "append-to-document"
               },
               {
                  "type" : "push-oe"
               },
               {
                  "type" : "appcache-processing"
               },
               {
                  "im" : "before head",
                  "type" : "switch the insertion mode"
               },
               {
                  "attrs" : "none",
                  "tag_name" : "head",
                  "type" : "insert an HTML element"
               },
               {
                  "type" : "set-head-element-pointer"
               },
               {
                  "im" : "in head",
                  "type" : "switch the insertion mode"
               },
               {
                  "type" : "pop-oe"
               },
               {
                  "im" : "after head",
                  "type" : "switch the insertion mode"
               },
               {
                  "attrs" : "none",
                  "tag_name" : "body",
                  "type" : "insert an HTML element"
               },
               {
                  "im" : "in body",
                  "type" : "switch the insertion mode"
               },
               {
                  "type" : "reprocess the token"
               }
            ],
            "type" : "text-with-optional-ws-prefix",
            "ws_actions" : [
               {
                  "type" : "ignore the token"
               }
            ]
         }
      ],
      "text;COMMENT" : [
      ],
      "text;DOCTYPE" : [
      ],
      "text;END-ELSE" : [
         {
            "type" : "pop-oe"
         },
         {
            "im" : [
               "original"
            ],
            "type" : "switch the insertion mode"
         }
      ],
      "text;END:script" : [
         {
            "type" : "script-processing"
         },
         {
            "type" : "pop-oe"
         },
         {
            "im" : [
               "original"
            ],
            "type" : "switch the insertion mode"
         },
         {
            "type" : "script-processing"
         }
      ],
      "text;EOF" : [
         {
            "type" : "parse error"
         },
         {
            "actions" : [
               {
                  "target" : "already started",
                  "type" : "set-node-flag"
               }
            ],
            "cond" : [
               "oe[-1]",
               "is",
               "HTML:script"
            ],
            "type" : "if"
         },
         {
            "type" : "pop-oe"
         },
         {
            "im" : [
               "original"
            ],
            "type" : "switch the insertion mode"
         },
         {
            "type" : "reprocess the token"
         }
      ],
      "text;START-ELSE" : [
      ],
      "text;TEXT" : [
         {
            "actions" : [
               {
                  "type" : "insert-chars"
               }
            ],
            "type" : "process-chars"
         }
      ]
   },
   "dispatcher_html" : [
      "or",
      [
         "oe",
         "is empty"
      ],
      [
         "adjusted current node",
         "is",
         "HTML:*"
      ],
      [
         "and",
         [
            "adjusted current node",
            "is",
            "MathML:mi,MathML:mn,MathML:mo,MathML:ms,MathML:mtext"
         ],
         [
            "token",
            "is a",
            "START-NOT:malignmark mglyph"
         ]
      ],
      [
         "and",
         [
            "adjusted current node",
            "is",
            "MathML:mi,MathML:mn,MathML:mo,MathML:ms,MathML:mtext"
         ],
         [
            "token",
            "is a",
            "CHAR"
         ]
      ],
      [
         "and",
         [
            "adjusted current node",
            "is",
            "MathML:annotation-xml"
         ],
         [
            "token",
            "is a",
            "START:svg"
         ]
      ],
      [
         "and",
         [
            "adjusted current node",
            "is",
            "MathML:annotation-xml@encoding=application/xhtml\u002Bxml,MathML:annotation-xml@encoding=text/html SVG:desc,SVG:foreignObject,SVG:title"
         ],
         [
            "token",
            "is a",
            "START"
         ]
      ],
      [
         "and",
         [
            "adjusted current node",
            "is",
            "MathML:annotation-xml@encoding=application/xhtml\u002Bxml,MathML:annotation-xml@encoding=text/html SVG:desc,SVG:foreignObject,SVG:title"
         ],
         [
            "token",
            "is a",
            "CHAR"
         ]
      ],
      [
         "token",
         "is a",
         "EOF"
      ]
   ],
   "element_matching" : {
      "element_groups" : [
         "HTML:*",
         "HTML:a,HTML:b,HTML:big,HTML:code,HTML:em,HTML:font,HTML:i,HTML:nobr,HTML:s,HTML:small,HTML:strike,HTML:strong,HTML:tt,HTML:u",
         "HTML:address,HTML:div",
         "HTML:applet,HTML:marquee,HTML:object,MathML:annotation-xml",
         "HTML:area,HTML:article,HTML:aside,HTML:base,HTML:basefont,HTML:bgsound,HTML:blockquote,HTML:br,HTML:center,HTML:col,HTML:details,HTML:dir,HTML:dl,HTML:embed,HTML:fieldset,HTML:figcaption,HTML:figure,HTML:footer,HTML:form,HTML:frame,HTML:frameset,HTML:head,HTML:header,HTML:hgroup,HTML:hr,HTML:iframe,HTML:img,HTML:input,HTML:isindex,HTML:link,HTML:listing,HTML:main,HTML:menu,HTML:menuitem,HTML:meta,HTML:nav,HTML:noembed,HTML:noframes,HTML:noscript,HTML:param,HTML:plaintext,HTML:pre,HTML:script,HTML:section,HTML:select,HTML:source,HTML:style,HTML:summary,HTML:textarea,HTML:title,HTML:track,HTML:wbr,HTML:xmp",
         "HTML:body",
         "HTML:button",
         "HTML:caption",
         "HTML:colgroup",
         "HTML:dd",
         "HTML:dt",
         "HTML:h1,HTML:h2,HTML:h3,HTML:h4,HTML:h5,HTML:h6",
         "HTML:html",
         "HTML:li",
         "HTML:ol,HTML:ul",
         "HTML:optgroup,HTML:option",
         "HTML:p",
         "HTML:rp,HTML:rt",
         "HTML:table",
         "HTML:tbody,HTML:tfoot,HTML:thead",
         "HTML:td,HTML:th",
         "HTML:template",
         "HTML:tr",
         "MathML:*",
         "MathML:annotation-xml",
         "MathML:annotation-xml@encoding=application/xhtml\u002Bxml,MathML:annotation-xml@encoding=text/html",
         "MathML:mi,MathML:mn,MathML:mo,MathML:ms,MathML:mtext",
         "SVG:*",
         "SVG:desc,SVG:foreignObject,SVG:title"
      ],
      "element_types" : [
         "HTML:a",
         "HTML:address",
         "HTML:applet",
         "HTML:article",
         "HTML:aside",
         "HTML:blockquote",
         "HTML:body",
         "HTML:button",
         "HTML:caption",
         "HTML:center",
         "HTML:colgroup",
         "HTML:dd",
         "HTML:details",
         "HTML:dialog",
         "HTML:dir",
         "HTML:div",
         "HTML:dl",
         "HTML:dt",
         "HTML:fieldset",
         "HTML:figcaption",
         "HTML:figure",
         "HTML:footer",
         "HTML:form",
         "HTML:frameset",
         "HTML:h1",
         "HTML:h2",
         "HTML:h3",
         "HTML:h4",
         "HTML:h5",
         "HTML:h6",
         "HTML:header",
         "HTML:hgroup",
         "HTML:html",
         "HTML:li",
         "HTML:listing",
         "HTML:main",
         "HTML:marquee",
         "HTML:menu",
         "HTML:nav",
         "HTML:nobr",
         "HTML:object",
         "HTML:ol",
         "HTML:optgroup",
         "HTML:option",
         "HTML:p",
         "HTML:pre",
         "HTML:ruby",
         "HTML:sarcasm",
         "HTML:script",
         "HTML:section",
         "HTML:select",
         "HTML:summary",
         "HTML:table",
         "HTML:tbody",
         "HTML:td",
         "HTML:template",
         "HTML:tfoot",
         "HTML:th",
         "HTML:thead",
         "HTML:tr",
         "HTML:ul",
         "SVG:script"
      ]
   },
   "ims" : {
      "after after body" : {
         "conds" : {
            "COMMENT" : {
               "steps" : "after after body;COMMENT"
            },
            "DOCTYPE" : {
               "steps" : "in body;DOCTYPE"
            },
            "END-ELSE" : {
               "steps" : "after after body;END-ELSE"
            },
            "EOF" : {
               "steps" : "after after body;EOF"
            },
            "START-ELSE" : {
               "steps" : "after after body;START-ELSE"
            },
            "START:html" : {
               "steps" : "after after body;START:html"
            },
            "TEXT" : {
               "steps" : "after after body;TEXT"
            }
         }
      },
      "after after frameset" : {
         "conds" : {
            "COMMENT" : {
               "steps" : "after after frameset;COMMENT"
            },
            "DOCTYPE" : {
               "steps" : "in body;DOCTYPE"
            },
            "END-ELSE" : {
               "steps" : "after after frameset;END-ELSE"
            },
            "EOF" : {
               "steps" : "after after frameset;EOF"
            },
            "START-ELSE" : {
               "steps" : "after after frameset;START-ELSE"
            },
            "START:html" : {
               "steps" : "after after frameset;START:html"
            },
            "START:noframes" : {
               "steps" : "after after frameset;START:noframes"
            },
            "TEXT" : {
               "steps" : "after after frameset;TEXT"
            }
         }
      },
      "after body" : {
         "conds" : {
            "COMMENT" : {
               "steps" : "after body;COMMENT"
            },
            "DOCTYPE" : {
               "steps" : "after body;DOCTYPE"
            },
            "END-ELSE" : {
               "steps" : "after body;END-ELSE"
            },
            "END:html" : {
               "steps" : "after body;END:html"
            },
            "EOF" : {
               "steps" : "after body;EOF"
            },
            "START-ELSE" : {
               "steps" : "after body;START-ELSE"
            },
            "START:html" : {
               "steps" : "after body;START:html"
            },
            "TEXT" : {
               "steps" : "after body;TEXT"
            }
         }
      },
      "after frameset" : {
         "conds" : {
            "COMMENT" : {
               "steps" : "after frameset;COMMENT"
            },
            "DOCTYPE" : {
               "steps" : "after frameset;DOCTYPE"
            },
            "END-ELSE" : {
               "steps" : "after frameset;END-ELSE"
            },
            "END:html" : {
               "steps" : "after frameset;END:html"
            },
            "EOF" : {
               "steps" : "after frameset;EOF"
            },
            "START-ELSE" : {
               "steps" : "after frameset;START-ELSE"
            },
            "START:html" : {
               "steps" : "after frameset;START:html"
            },
            "START:noframes" : {
               "steps" : "after frameset;START:noframes"
            },
            "TEXT" : {
               "steps" : "after frameset;TEXT"
            }
         }
      },
      "after head" : {
         "conds" : {
            "COMMENT" : {
               "steps" : "after head;COMMENT"
            },
            "DOCTYPE" : {
               "steps" : "after head;DOCTYPE"
            },
            "END-ELSE" : {
               "steps" : "after head;END-ELSE"
            },
            "END:body,br,html" : {
               "steps" : "after head;END:body,br,html"
            },
            "END:template" : {
               "steps" : "after head;END:template"
            },
            "EOF" : {
               "steps" : "after head;EOF"
            },
            "START-ELSE" : {
               "steps" : "after head;START-ELSE"
            },
            "START:base,basefont bgsound link,meta,noframes,script,style,template,title" : {
               "steps" : "after head;START:base,basefont bgsound link,meta,noframes,script,style,template,title"
            },
            "START:body" : {
               "steps" : "after head;START:body"
            },
            "START:frameset" : {
               "steps" : "after head;START:frameset"
            },
            "START:head" : {
               "steps" : "after head;START:head"
            },
            "START:html" : {
               "steps" : "after head;START:html"
            },
            "TEXT" : {
               "steps" : "after head;TEXT"
            }
         }
      },
      "before head" : {
         "conds" : {
            "COMMENT" : {
               "steps" : "before head;COMMENT"
            },
            "DOCTYPE" : {
               "steps" : "before head;DOCTYPE"
            },
            "END-ELSE" : {
               "steps" : "before head;END-ELSE"
            },
            "END:body,br,head,html" : {
               "steps" : "before head;END:body,br,head,html"
            },
            "EOF" : {
               "steps" : "before head;EOF"
            },
            "START-ELSE" : {
               "steps" : "before head;START-ELSE"
            },
            "START:head" : {
               "steps" : "before head;START:head"
            },
            "START:html" : {
               "steps" : "before head;START:html"
            },
            "TEXT" : {
               "steps" : "before head;TEXT"
            }
         }
      },
      "before html" : {
         "conds" : {
            "COMMENT" : {
               "steps" : "before html;COMMENT"
            },
            "DOCTYPE" : {
               "steps" : "before html;DOCTYPE"
            },
            "END-ELSE" : {
               "steps" : "before html;END-ELSE"
            },
            "END:body,br,head,html" : {
               "steps" : "before html;END:body,br,head,html"
            },
            "EOF" : {
               "steps" : "before html;EOF"
            },
            "START-ELSE" : {
               "steps" : "before html;START-ELSE"
            },
            "START:html" : {
               "steps" : "before html;START:html"
            },
            "TEXT" : {
               "steps" : "before html;TEXT"
            }
         }
      },
      "in body" : {
         "conds" : {
            "COMMENT" : {
               "steps" : "in body;COMMENT"
            },
            "DOCTYPE" : {
               "steps" : "in body;DOCTYPE"
            },
            "END-ELSE" : {
               "steps" : "in body;END-ELSE"
            },
            "END:a,b big code em i s small strike strong tt u,font,nobr" : {
               "steps" : "in body;END:a,b big code em i s small strike strong tt u,font,nobr"
            },
            "END:address article aside details dialog dir fieldset figcaption figure footer header hgroup main nav section summary,blockquote center div dl menu ol ul,button,listing pre" : {
               "steps" : "in body;END:address article aside details dialog dir fieldset figcaption figure footer header hgroup main nav section summary,blockquote center div dl menu ol ul,button,listing pre"
            },
            "END:applet marquee object" : {
               "steps" : "in body;END:applet marquee object"
            },
            "END:body" : {
               "steps" : "in body;END:body"
            },
            "END:br" : {
               "steps" : "in body;END:br"
            },
            "END:dd dt" : {
               "steps" : "in body;END:dd dt"
            },
            "END:form" : {
               "steps" : "in body;END:form"
            },
            "END:h1 h2 h3 h4 h5 h6" : {
               "steps" : "in body;END:h1 h2 h3 h4 h5 h6"
            },
            "END:html" : {
               "steps" : "in body;END:html"
            },
            "END:li" : {
               "steps" : "in body;END:li"
            },
            "END:p" : {
               "steps" : "in body;END:p"
            },
            "END:sarcasm" : {
               "steps" : "in body;END:sarcasm"
            },
            "END:template" : {
               "steps" : "in body;END:template"
            },
            "EOF" : {
               "steps" : "in body;EOF"
            },
            "START-ELSE" : {
               "steps" : "in body;START-ELSE"
            },
            "START:a" : {
               "steps" : "in body;START:a"
            },
            "START:address article aside details dialog dir fieldset figcaption figure footer header hgroup main nav section summary,blockquote center div dl menu ol ul,p" : {
               "steps" : "in body;START:address article aside details dialog dir fieldset figcaption figure footer header hgroup main nav section summary,blockquote center div dl menu ol ul,p"
            },
            "START:applet marquee object" : {
               "steps" : "in body;START:applet marquee object"
            },
            "START:area wbr,br,embed img,keygen" : {
               "steps" : "in body;START:area wbr,br,embed img,keygen"
            },
            "START:b big code em i s small strike strong tt u,font" : {
               "steps" : "in body;START:b big code em i s small strike strong tt u,font"
            },
            "START:base,basefont bgsound link,meta,noframes,script,style,template,title" : {
               "steps" : "in body;START:base,basefont bgsound link,meta,noframes,script,style,template,title"
            },
            "START:body" : {
               "steps" : "in body;START:body"
            },
            "START:button" : {
               "steps" : "in body;START:button"
            },
            "START:caption,col,colgroup,frame,head,tbody tfoot thead,td th,tr" : {
               "steps" : "in body;START:caption,col,colgroup,frame,head,tbody tfoot thead,td th,tr"
            },
            "START:dd dt" : {
               "steps" : "in body;START:dd dt"
            },
            "START:form" : {
               "steps" : "in body;START:form"
            },
            "START:frameset" : {
               "steps" : "in body;START:frameset"
            },
            "START:h1 h2 h3 h4 h5 h6" : {
               "steps" : "in body;START:h1 h2 h3 h4 h5 h6"
            },
            "START:hr" : {
               "steps" : "in body;START:hr"
            },
            "START:html" : {
               "steps" : "in body;START:html"
            },
            "START:iframe" : {
               "steps" : "in body;START:iframe"
            },
            "START:image" : {
               "steps" : "in body;START:image"
            },
            "START:input" : {
               "steps" : "in body;START:input"
            },
            "START:isindex" : {
               "steps" : "in body;START:isindex"
            },
            "START:li" : {
               "steps" : "in body;START:li"
            },
            "START:listing pre" : {
               "steps" : "in body;START:listing pre"
            },
            "START:math" : {
               "steps" : "in body;START:math"
            },
            "START:menuitem param source track" : {
               "steps" : "in body;START:menuitem param source track"
            },
            "START:nobr" : {
               "steps" : "in body;START:nobr"
            },
            "START:noembed" : {
               "steps" : "in body;START:noembed"
            },
            "START:noscript" : {
               "steps" : "in body;START:noscript"
            },
            "START:optgroup,option" : {
               "steps" : "in body;START:optgroup,option"
            },
            "START:plaintext" : {
               "steps" : "in body;START:plaintext"
            },
            "START:rp rt" : {
               "steps" : "in body;START:rp rt"
            },
            "START:select" : {
               "steps" : "in body;START:select"
            },
            "START:svg" : {
               "steps" : "in body;START:svg"
            },
            "START:table" : {
               "steps" : "in body;START:table"
            },
            "START:textarea" : {
               "steps" : "in body;START:textarea"
            },
            "START:xmp" : {
               "steps" : "in body;START:xmp"
            },
            "TEXT" : {
               "steps" : "in body;TEXT"
            }
         }
      },
      "in caption" : {
         "conds" : {
            "COMMENT" : {
               "steps" : "in body;COMMENT"
            },
            "DOCTYPE" : {
               "steps" : "in body;DOCTYPE"
            },
            "END-ELSE" : {
               "steps" : "in caption;END-ELSE"
            },
            "END:body,col,colgroup,html,tbody tfoot thead,td th,tr" : {
               "steps" : "in caption;END:body,col,colgroup,html,tbody tfoot thead,td th,tr"
            },
            "END:caption" : {
               "steps" : "in caption;END:caption"
            },
            "END:table" : {
               "steps" : "in caption;END:table"
            },
            "EOF" : {
               "steps" : "in body;EOF"
            },
            "START-ELSE" : {
               "steps" : "in caption;START-ELSE"
            },
            "START:caption,col,colgroup,tbody tfoot thead,td th,tr" : {
               "steps" : "in caption;START:caption,col,colgroup,tbody tfoot thead,td th,tr"
            },
            "TEXT" : {
               "steps" : "in caption;TEXT"
            }
         }
      },
      "in cell" : {
         "conds" : {
            "COMMENT" : {
               "steps" : "in body;COMMENT"
            },
            "DOCTYPE" : {
               "steps" : "in body;DOCTYPE"
            },
            "END-ELSE" : {
               "steps" : "in cell;END-ELSE"
            },
            "END:body,caption,col,colgroup,html" : {
               "steps" : "in cell;END:body,caption,col,colgroup,html"
            },
            "END:table,tbody tfoot thead,tr" : {
               "steps" : "in cell;END:table,tbody tfoot thead,tr"
            },
            "END:td th" : {
               "steps" : "in cell;END:td th"
            },
            "EOF" : {
               "steps" : "in body;EOF"
            },
            "START-ELSE" : {
               "steps" : "in cell;START-ELSE"
            },
            "START:caption,col,colgroup,tbody tfoot thead,td th,tr" : {
               "steps" : "in cell;START:caption,col,colgroup,tbody tfoot thead,td th,tr"
            },
            "TEXT" : {
               "steps" : "in cell;TEXT"
            }
         }
      },
      "in column group" : {
         "conds" : {
            "COMMENT" : {
               "steps" : "in column group;COMMENT"
            },
            "DOCTYPE" : {
               "steps" : "in column group;DOCTYPE"
            },
            "END-ELSE" : {
               "steps" : "in column group;END-ELSE"
            },
            "END:col" : {
               "steps" : "in column group;END:col"
            },
            "END:colgroup" : {
               "steps" : "in column group;END:colgroup"
            },
            "END:template" : {
               "steps" : "in column group;END:template"
            },
            "EOF" : {
               "steps" : "in body;EOF"
            },
            "START-ELSE" : {
               "steps" : "in column group;START-ELSE"
            },
            "START:col" : {
               "steps" : "in column group;START:col"
            },
            "START:html" : {
               "steps" : "in column group;START:html"
            },
            "START:template" : {
               "steps" : "in column group;START:template"
            },
            "TEXT" : {
               "steps" : "in column group;TEXT"
            }
         }
      },
      "in foreign content" : {
         "conds" : {
            "COMMENT" : {
               "steps" : "in foreign content;COMMENT"
            },
            "DOCTYPE" : {
               "steps" : "in foreign content;DOCTYPE"
            },
            "END-ELSE" : {
               "steps" : "in foreign content;END-ELSE"
            },
            "END:script" : {
               "steps" : "in foreign content;END:script"
            },
            "EOF" : {
               "steps" : "in foreign content;EOF"
            },
            "START-ELSE" : {
               "steps" : "in foreign content;START-ELSE"
            },
            "START:b big code em i s small strike strong tt u,blockquote center div dl menu ol ul,body,br,dd dt,embed img,h1 h2 h3 h4 h5 h6,head,hr,li,listing pre,meta,nobr,p,ruby span sub sup var,table" : {
               "steps" : "in foreign content;START:b big code em i s small strike strong tt u,blockquote center div dl menu ol ul,body,br,dd dt,embed img,h1 h2 h3 h4 h5 h6,head,hr,li,listing pre,meta,nobr,p,ruby span sub sup var,table"
            },
            "START:font" : {
               "steps" : "in foreign content;START:font"
            },
            "TEXT" : {
               "steps" : "in foreign content;TEXT"
            }
         }
      },
      "in frameset" : {
         "conds" : {
            "COMMENT" : {
               "steps" : "in frameset;COMMENT"
            },
            "DOCTYPE" : {
               "steps" : "in frameset;DOCTYPE"
            },
            "END-ELSE" : {
               "steps" : "in frameset;END-ELSE"
            },
            "END:frameset" : {
               "steps" : "in frameset;END:frameset"
            },
            "EOF" : {
               "steps" : "in frameset;EOF"
            },
            "START-ELSE" : {
               "steps" : "in frameset;START-ELSE"
            },
            "START:frame" : {
               "steps" : "in frameset;START:frame"
            },
            "START:frameset" : {
               "steps" : "in frameset;START:frameset"
            },
            "START:html" : {
               "steps" : "in frameset;START:html"
            },
            "START:noframes" : {
               "steps" : "in frameset;START:noframes"
            },
            "TEXT" : {
               "steps" : "in frameset;TEXT"
            }
         }
      },
      "in head" : {
         "conds" : {
            "COMMENT" : {
               "steps" : "in head;COMMENT"
            },
            "DOCTYPE" : {
               "steps" : "in head;DOCTYPE"
            },
            "END-ELSE" : {
               "steps" : "in head;END-ELSE"
            },
            "END:body,br,html" : {
               "steps" : "in head;END:body,br,html"
            },
            "END:head" : {
               "steps" : "in head;END:head"
            },
            "END:template" : {
               "steps" : "in head;END:template"
            },
            "EOF" : {
               "steps" : "in head;EOF"
            },
            "START-ELSE" : {
               "steps" : "in head;START-ELSE"
            },
            "START:base,basefont bgsound link" : {
               "steps" : "in head;START:base,basefont bgsound link"
            },
            "START:head" : {
               "steps" : "in head;START:head"
            },
            "START:html" : {
               "steps" : "in head;START:html"
            },
            "START:meta" : {
               "steps" : "in head;START:meta"
            },
            "START:noframes,style" : {
               "steps" : "in head;START:noframes,style"
            },
            "START:noscript" : {
               "steps" : "in head;START:noscript"
            },
            "START:script" : {
               "steps" : "in head;START:script"
            },
            "START:template" : {
               "steps" : "in head;START:template"
            },
            "START:title" : {
               "steps" : "in head;START:title"
            },
            "TEXT" : {
               "steps" : "in head;TEXT"
            }
         }
      },
      "in head noscript" : {
         "conds" : {
            "COMMENT" : {
               "steps" : "in head;COMMENT"
            },
            "DOCTYPE" : {
               "steps" : "in head noscript;DOCTYPE"
            },
            "END-ELSE" : {
               "steps" : "in head noscript;END-ELSE"
            },
            "END:br" : {
               "steps" : "in head noscript;END:br"
            },
            "END:noscript" : {
               "steps" : "in head noscript;END:noscript"
            },
            "EOF" : {
               "steps" : "in head noscript;EOF"
            },
            "START-ELSE" : {
               "steps" : "in head noscript;START-ELSE"
            },
            "START:basefont bgsound link,meta,noframes,style" : {
               "steps" : "in head noscript;START:basefont bgsound link,meta,noframes,style"
            },
            "START:head,noscript" : {
               "steps" : "in head noscript;START:head,noscript"
            },
            "START:html" : {
               "steps" : "in head noscript;START:html"
            },
            "TEXT" : {
               "steps" : "in head noscript;TEXT"
            }
         }
      },
      "in row" : {
         "conds" : {
            "COMMENT" : {
               "steps" : "in table;COMMENT"
            },
            "DOCTYPE" : {
               "steps" : "in table;DOCTYPE"
            },
            "END-ELSE" : {
               "steps" : "in row;END-ELSE"
            },
            "END:body,caption,col,colgroup,html,td th" : {
               "steps" : "in row;END:body,caption,col,colgroup,html,td th"
            },
            "END:table" : {
               "steps" : "in row;END:table"
            },
            "END:tbody tfoot thead" : {
               "steps" : "in row;END:tbody tfoot thead"
            },
            "END:tr" : {
               "steps" : "in row;END:tr"
            },
            "EOF" : {
               "steps" : "in body;EOF"
            },
            "START-ELSE" : {
               "steps" : "in row;START-ELSE"
            },
            "START:caption,col,colgroup,tbody tfoot thead,tr" : {
               "steps" : "in row;START:caption,col,colgroup,tbody tfoot thead,tr"
            },
            "START:td th" : {
               "steps" : "in row;START:td th"
            },
            "TEXT" : {
               "steps" : "in row;TEXT"
            }
         }
      },
      "in select" : {
         "conds" : {
            "COMMENT" : {
               "steps" : "in select;COMMENT"
            },
            "DOCTYPE" : {
               "steps" : "in select;DOCTYPE"
            },
            "END-ELSE" : {
               "steps" : "in select;END-ELSE"
            },
            "END:optgroup" : {
               "steps" : "in select;END:optgroup"
            },
            "END:option" : {
               "steps" : "in select;END:option"
            },
            "END:select" : {
               "steps" : "in select;END:select"
            },
            "END:template" : {
               "steps" : "in select;END:template"
            },
            "EOF" : {
               "steps" : "in body;EOF"
            },
            "START-ELSE" : {
               "steps" : "in select;START-ELSE"
            },
            "START:html" : {
               "steps" : "in select;START:html"
            },
            "START:input,keygen,textarea" : {
               "steps" : "in select;START:input,keygen,textarea"
            },
            "START:optgroup" : {
               "steps" : "in select;START:optgroup"
            },
            "START:option" : {
               "steps" : "in select;START:option"
            },
            "START:script,template" : {
               "steps" : "in select;START:script,template"
            },
            "START:select" : {
               "steps" : "in select;START:select"
            },
            "TEXT" : {
               "steps" : "in select;TEXT"
            }
         }
      },
      "in select in table" : {
         "conds" : {
            "COMMENT" : {
               "steps" : "in select;COMMENT"
            },
            "DOCTYPE" : {
               "steps" : "in select;DOCTYPE"
            },
            "END-ELSE" : {
               "steps" : "in select in table;END-ELSE"
            },
            "END:caption,table,tbody tfoot thead,td th,tr" : {
               "steps" : "in select in table;END:caption,table,tbody tfoot thead,td th,tr"
            },
            "EOF" : {
               "steps" : "in body;EOF"
            },
            "START-ELSE" : {
               "steps" : "in select in table;START-ELSE"
            },
            "START:caption,table,tbody tfoot thead,td th,tr" : {
               "steps" : "in select in table;START:caption,table,tbody tfoot thead,td th,tr"
            },
            "TEXT" : {
               "steps" : "in select in table;TEXT"
            }
         }
      },
      "in table" : {
         "conds" : {
            "COMMENT" : {
               "steps" : "in table;COMMENT"
            },
            "DOCTYPE" : {
               "steps" : "in table;DOCTYPE"
            },
            "END-ELSE" : {
               "steps" : "in table;END-ELSE"
            },
            "END:body,caption,col,colgroup,html,tbody tfoot thead,td th,tr" : {
               "steps" : "in table;END:body,caption,col,colgroup,html,tbody tfoot thead,td th,tr"
            },
            "END:table" : {
               "steps" : "in table;END:table"
            },
            "END:template" : {
               "steps" : "in table;END:template"
            },
            "EOF" : {
               "steps" : "in body;EOF"
            },
            "START-ELSE" : {
               "steps" : "in table;START-ELSE"
            },
            "START:a" : {
               "steps" : "in table;START:a"
            },
            "START:address article aside details dialog dir fieldset figcaption figure footer header hgroup main nav section summary,blockquote center div dl menu ol ul,p" : {
               "steps" : "in table;START:address article aside details dialog dir fieldset figcaption figure footer header hgroup main nav section summary,blockquote center div dl menu ol ul,p"
            },
            "START:applet marquee object" : {
               "steps" : "in table;START:applet marquee object"
            },
            "START:area wbr,br,embed img,keygen" : {
               "steps" : "in table;START:area wbr,br,embed img,keygen"
            },
            "START:b big code em i s small strike strong tt u,font" : {
               "steps" : "in table;START:b big code em i s small strike strong tt u,font"
            },
            "START:base,basefont bgsound link,meta,noframes,title" : {
               "steps" : "in table;START:base,basefont bgsound link,meta,noframes,title"
            },
            "START:body" : {
               "steps" : "in table;START:body"
            },
            "START:button" : {
               "steps" : "in table;START:button"
            },
            "START:caption" : {
               "steps" : "in table;START:caption"
            },
            "START:col" : {
               "steps" : "in table;START:col"
            },
            "START:colgroup" : {
               "steps" : "in table;START:colgroup"
            },
            "START:dd dt" : {
               "steps" : "in table;START:dd dt"
            },
            "START:form" : {
               "steps" : "in table;START:form"
            },
            "START:frame,head" : {
               "steps" : "in table;START:frame,head"
            },
            "START:frameset" : {
               "steps" : "in table;START:frameset"
            },
            "START:h1 h2 h3 h4 h5 h6" : {
               "steps" : "in table;START:h1 h2 h3 h4 h5 h6"
            },
            "START:hr" : {
               "steps" : "in table;START:hr"
            },
            "START:html" : {
               "steps" : "in table;START:html"
            },
            "START:iframe" : {
               "steps" : "in table;START:iframe"
            },
            "START:image" : {
               "steps" : "in table;START:image"
            },
            "START:input" : {
               "steps" : "in table;START:input"
            },
            "START:isindex" : {
               "steps" : "in table;START:isindex"
            },
            "START:li" : {
               "steps" : "in table;START:li"
            },
            "START:listing pre" : {
               "steps" : "in table;START:listing pre"
            },
            "START:math" : {
               "steps" : "in table;START:math"
            },
            "START:menuitem param source track" : {
               "steps" : "in table;START:menuitem param source track"
            },
            "START:nobr" : {
               "steps" : "in table;START:nobr"
            },
            "START:noembed" : {
               "steps" : "in table;START:noembed"
            },
            "START:noscript" : {
               "steps" : "in table;START:noscript"
            },
            "START:optgroup,option" : {
               "steps" : "in table;START:optgroup,option"
            },
            "START:plaintext" : {
               "steps" : "in table;START:plaintext"
            },
            "START:rp rt" : {
               "steps" : "in table;START:rp rt"
            },
            "START:script,style,template" : {
               "steps" : "in table;START:script,style,template"
            },
            "START:select" : {
               "steps" : "in table;START:select"
            },
            "START:svg" : {
               "steps" : "in table;START:svg"
            },
            "START:table" : {
               "steps" : "in table;START:table"
            },
            "START:tbody tfoot thead" : {
               "steps" : "in table;START:tbody tfoot thead"
            },
            "START:td th,tr" : {
               "steps" : "in table;START:td th,tr"
            },
            "START:textarea" : {
               "steps" : "in table;START:textarea"
            },
            "START:xmp" : {
               "steps" : "in table;START:xmp"
            },
            "TEXT" : {
               "steps" : "in table;TEXT"
            }
         }
      },
      "in table body" : {
         "conds" : {
            "COMMENT" : {
               "steps" : "in table;COMMENT"
            },
            "DOCTYPE" : {
               "steps" : "in table;DOCTYPE"
            },
            "END-ELSE" : {
               "steps" : "in table body;END-ELSE"
            },
            "END:body,caption,col,colgroup,html,td th,tr" : {
               "steps" : "in table body;END:body,caption,col,colgroup,html,td th,tr"
            },
            "END:table" : {
               "steps" : "in table body;END:table"
            },
            "END:tbody tfoot thead" : {
               "steps" : "in table body;END:tbody tfoot thead"
            },
            "EOF" : {
               "steps" : "in body;EOF"
            },
            "START-ELSE" : {
               "steps" : "in table body;START-ELSE"
            },
            "START:caption,col,colgroup,tbody tfoot thead" : {
               "steps" : "in table body;START:caption,col,colgroup,tbody tfoot thead"
            },
            "START:td th" : {
               "steps" : "in table body;START:td th"
            },
            "START:tr" : {
               "steps" : "in table body;START:tr"
            },
            "TEXT" : {
               "steps" : "in table body;TEXT"
            }
         }
      },
      "in table text" : {
         "conds" : {
            "COMMENT" : {
               "steps" : "in table text;COMMENT"
            },
            "DOCTYPE" : {
               "steps" : "in table text;DOCTYPE"
            },
            "END-ELSE" : {
               "steps" : "in table text;END-ELSE"
            },
            "EOF" : {
               "steps" : "in table text;EOF"
            },
            "START-ELSE" : {
               "steps" : "in table text;START-ELSE"
            },
            "TEXT" : {
               "steps" : "in table text;TEXT"
            }
         }
      },
      "in template" : {
         "conds" : {
            "COMMENT" : {
               "steps" : "in body;COMMENT"
            },
            "DOCTYPE" : {
               "steps" : "in body;DOCTYPE"
            },
            "END-ELSE" : {
               "steps" : "in template;END-ELSE"
            },
            "END:template" : {
               "steps" : "in template;END:template"
            },
            "EOF" : {
               "steps" : "in template;EOF"
            },
            "START-ELSE" : {
               "steps" : "in template;START-ELSE"
            },
            "START:base,basefont bgsound link,meta,noframes,script,style,template,title" : {
               "steps" : "in template;START:base,basefont bgsound link,meta,noframes,script,style,template,title"
            },
            "START:caption,colgroup,tbody tfoot thead" : {
               "steps" : "in template;START:caption,colgroup,tbody tfoot thead"
            },
            "START:col" : {
               "steps" : "in template;START:col"
            },
            "START:td th" : {
               "steps" : "in template;START:td th"
            },
            "START:tr" : {
               "steps" : "in template;START:tr"
            },
            "TEXT" : {
               "steps" : "in template;TEXT"
            }
         }
      },
      "initial" : {
         "conds" : {
            "COMMENT" : {
               "steps" : "initial;COMMENT"
            },
            "DOCTYPE" : {
               "steps" : "initial;DOCTYPE"
            },
            "END-ELSE" : {
               "steps" : "initial;END-ELSE"
            },
            "EOF" : {
               "steps" : "initial;EOF"
            },
            "START-ELSE" : {
               "steps" : "initial;START-ELSE"
            },
            "TEXT" : {
               "steps" : "initial;TEXT"
            }
         }
      },
      "text" : {
         "conds" : {
            "COMMENT" : {
               "steps" : "text;COMMENT"
            },
            "DOCTYPE" : {
               "steps" : "text;DOCTYPE"
            },
            "END-ELSE" : {
               "steps" : "text;END-ELSE"
            },
            "END:script" : {
               "steps" : "text;END:script"
            },
            "EOF" : {
               "steps" : "text;EOF"
            },
            "START-ELSE" : {
               "steps" : "text;START-ELSE"
            },
            "TEXT" : {
               "steps" : "text;TEXT"
            }
         }
      }
   },
   "tag_name_groups" : [
      "a",
      "address article aside details dialog dir fieldset figcaption figure footer header hgroup main nav section summary",
      "applet marquee object",
      "area wbr",
      "b big code em i s small strike strong tt u",
      "base",
      "basefont bgsound link",
      "blockquote center div dl menu ol ul",
      "body",
      "br",
      "button",
      "caption",
      "col",
      "colgroup",
      "dd dt",
      "embed img",
      "font",
      "form",
      "frame",
      "frameset",
      "h1 h2 h3 h4 h5 h6",
      "head",
      "hr",
      "html",
      "iframe",
      "image",
      "input",
      "isindex",
      "keygen",
      "li",
      "listing pre",
      "malignmark mglyph",
      "math",
      "menuitem param source track",
      "meta",
      "nobr",
      "noembed",
      "noframes",
      "noscript",
      "optgroup",
      "option",
      "p",
      "plaintext",
      "rp rt",
      "ruby span sub sup var",
      "sarcasm",
      "script",
      "select",
      "style",
      "svg",
      "table",
      "tbody tfoot thead",
      "td th",
      "template",
      "textarea",
      "title",
      "tr",
      "xmp"
   ],
   "tree_patterns" : {
      "HTML integration point" : "MathML:annotation-xml@encoding=application/xhtml\u002Bxml,MathML:annotation-xml@encoding=text/html SVG:desc,SVG:foreignObject,SVG:title",
      "MathML text integration point" : "MathML:mi,MathML:mn,MathML:mo,MathML:ms,MathML:mtext",
      "formatting category" : "HTML:a,HTML:b,HTML:big,HTML:code,HTML:em,HTML:font,HTML:i,HTML:nobr,HTML:s,HTML:small,HTML:strike,HTML:strong,HTML:tt,HTML:u",
      "has an element in button scope" : "HTML:applet,HTML:marquee,HTML:object,MathML:annotation-xml HTML:button HTML:caption HTML:html HTML:table HTML:td,HTML:th HTML:template MathML:mi,MathML:mn,MathML:mo,MathML:ms,MathML:mtext SVG:desc,SVG:foreignObject,SVG:title",
      "has an element in list item scope" : "HTML:applet,HTML:marquee,HTML:object,MathML:annotation-xml HTML:caption HTML:html HTML:ol,HTML:ul HTML:table HTML:td,HTML:th HTML:template MathML:mi,MathML:mn,MathML:mo,MathML:ms,MathML:mtext SVG:desc,SVG:foreignObject,SVG:title",
      "has an element in scope" : "HTML:applet,HTML:marquee,HTML:object,MathML:annotation-xml HTML:caption HTML:html HTML:table HTML:td,HTML:th HTML:template MathML:mi,MathML:mn,MathML:mo,MathML:ms,MathML:mtext SVG:desc,SVG:foreignObject,SVG:title",
      "has an element in table scope" : "HTML:html HTML:table HTML:template",
      "special category" : "HTML:address,HTML:div HTML:applet,HTML:marquee,HTML:object,MathML:annotation-xml HTML:area,HTML:article,HTML:aside,HTML:base,HTML:basefont,HTML:bgsound,HTML:blockquote,HTML:br,HTML:center,HTML:col,HTML:details,HTML:dir,HTML:dl,HTML:embed,HTML:fieldset,HTML:figcaption,HTML:figure,HTML:footer,HTML:form,HTML:frame,HTML:frameset,HTML:head,HTML:header,HTML:hgroup,HTML:hr,HTML:iframe,HTML:img,HTML:input,HTML:isindex,HTML:link,HTML:listing,HTML:main,HTML:menu,HTML:menuitem,HTML:meta,HTML:nav,HTML:noembed,HTML:noframes,HTML:noscript,HTML:param,HTML:plaintext,HTML:pre,HTML:script,HTML:section,HTML:select,HTML:source,HTML:style,HTML:summary,HTML:textarea,HTML:title,HTML:track,HTML:wbr,HTML:xmp HTML:body HTML:button HTML:caption HTML:colgroup HTML:dd HTML:dt HTML:h1,HTML:h2,HTML:h3,HTML:h4,HTML:h5,HTML:h6 HTML:html HTML:li HTML:ol,HTML:ul HTML:p HTML:table HTML:tbody,HTML:tfoot,HTML:thead HTML:td,HTML:th HTML:template HTML:tr MathML:mi,MathML:mn,MathML:mo,MathML:ms,MathML:mtext SVG:desc,SVG:foreignObject,SVG:title"
   },
   "tree_patterns_not" : {
      "has an element in select scope" : "HTML:optgroup,HTML:option"
   }
}
