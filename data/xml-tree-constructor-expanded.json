{
   "actions" : {
      "after DOCTYPE;ATTLIST" : [
         {
            "type" : "construct the DOCTYPE node, if necessary"
         },
         {
            "im" : "before root element",
            "type" : "switch the insertion mode"
         },
         {
            "type" : "reprocess the token"
         }
      ],
      "after DOCTYPE;COMMENT" : [
         {
            "type" : "construct the DOCTYPE node, if necessary"
         },
         {
            "im" : "before root element",
            "type" : "switch the insertion mode"
         },
         {
            "type" : "reprocess the token"
         }
      ],
      "after DOCTYPE;DOCTYPE" : [
         {
            "type" : "construct the DOCTYPE node, if necessary"
         },
         {
            "im" : "before root element",
            "type" : "switch the insertion mode"
         },
         {
            "type" : "reprocess the token"
         }
      ],
      "after DOCTYPE;ELEMENT" : [
         {
            "type" : "construct the DOCTYPE node, if necessary"
         },
         {
            "im" : "before root element",
            "type" : "switch the insertion mode"
         },
         {
            "type" : "reprocess the token"
         }
      ],
      "after DOCTYPE;END-ELSE" : [
         {
            "type" : "construct the DOCTYPE node, if necessary"
         },
         {
            "im" : "before root element",
            "type" : "switch the insertion mode"
         },
         {
            "type" : "reprocess the token"
         }
      ],
      "after DOCTYPE;ENTITY" : [
         {
            "type" : "construct the DOCTYPE node, if necessary"
         },
         {
            "im" : "before root element",
            "type" : "switch the insertion mode"
         },
         {
            "type" : "reprocess the token"
         }
      ],
      "after DOCTYPE;EOD" : [
         {
            "type" : "construct the DOCTYPE node, if necessary"
         },
         {
            "im" : "before root element",
            "type" : "switch the insertion mode"
         },
         {
            "type" : "reprocess the token"
         }
      ],
      "after DOCTYPE;EOF" : [
         {
            "type" : "construct the DOCTYPE node, if necessary"
         },
         {
            "im" : "before root element",
            "type" : "switch the insertion mode"
         },
         {
            "type" : "reprocess the token"
         }
      ],
      "after DOCTYPE;NOTATION" : [
         {
            "type" : "construct the DOCTYPE node, if necessary"
         },
         {
            "im" : "before root element",
            "type" : "switch the insertion mode"
         },
         {
            "type" : "reprocess the token"
         }
      ],
      "after DOCTYPE;PI" : [
         {
            "type" : "construct the DOCTYPE node, if necessary"
         },
         {
            "im" : "before root element",
            "type" : "switch the insertion mode"
         },
         {
            "type" : "reprocess the token"
         }
      ],
      "after DOCTYPE;START-ELSE" : [
         {
            "type" : "construct the DOCTYPE node, if necessary"
         },
         {
            "im" : "before root element",
            "type" : "switch the insertion mode"
         },
         {
            "type" : "reprocess the token"
         }
      ],
      "after DOCTYPE;TEXT" : [
         {
            "type" : "construct the DOCTYPE node, if necessary"
         },
         {
            "im" : "before root element",
            "type" : "switch the insertion mode"
         },
         {
            "type" : "reprocess the token"
         }
      ],
      "after root element;ATTLIST" : [
      ],
      "after root element;COMMENT" : [
         {
            "position" : "document",
            "type" : "insert a comment"
         }
      ],
      "after root element;DOCTYPE" : [
         {
            "error_type" : "doctype:bad context",
            "name" : "after-root-element-doctype",
            "type" : "parse error"
         },
         {
            "actions" : [
               {
                  "type" : "set the stop processing flag"
               },
               {
                  "im" : "in subset after root element",
                  "type" : "switch the insertion mode"
               }
            ],
            "cond" : [
               "token",
               "has",
               "has internal subset flag"
            ],
            "type" : "if"
         }
      ],
      "after root element;ELEMENT" : [
      ],
      "after root element;END-ELSE" : [
         {
            "error_type" : "stray end tag",
            "error_value" : [
               "token",
               "tag name"
            ],
            "name" : "after-root-element-end-else",
            "type" : "parse error"
         },
         {
            "type" : "ignore the token"
         }
      ],
      "after root element;ENTITY" : [
      ],
      "after root element;EOD" : [
      ],
      "after root element;EOF" : [
         {
            "type" : "stop parsing"
         }
      ],
      "after root element;NOTATION" : [
      ],
      "after root element;PI" : [
         {
            "position" : "document",
            "type" : "insert a processing instruction"
         }
      ],
      "after root element;START-ELSE" : [
         {
            "error_type" : "second root element",
            "name" : "after-root-element-start-else",
            "type" : "parse error"
         },
         {
            "actions" : [
               {
                  "error_text" : [
                     "token",
                     "tag name"
                  ],
                  "error_type" : "nestc",
                  "name" : "-start-tag-self-closing-flag",
                  "type" : "parse error"
               }
            ],
            "cond" : [
               "token",
               "has",
               "self-closing flag"
            ],
            "type" : "if"
         },
         {
            "type" : "ignore the token"
         }
      ],
      "after root element;TEXT" : [
         {
            "actions" : [
               {
                  "error_type" : "text outside of root element",
                  "name" : "after-root-element-char",
                  "type" : "parse error"
               }
            ],
            "type" : "text-with-optional-ws-prefix",
            "ws_actions" : [
            ]
         }
      ],
      "before DOCTYPE;ATTLIST" : [
      ],
      "before DOCTYPE;COMMENT" : [
         {
            "position" : "document",
            "type" : "insert a comment"
         }
      ],
      "before DOCTYPE;DOCTYPE" : [
         {
            "type" : "insert a DOCTYPE"
         },
         {
            "type" : "set-DOCTYPE-system-identifier"
         },
         {
            "actions" : [
               {
                  "im" : "in subset",
                  "type" : "switch the insertion mode"
               }
            ],
            "cond" : [
               "token",
               "has",
               "has internal subset flag"
            ],
            "false_actions" : [
               {
                  "actions" : [
                     {
                        "type" : "process the external subset"
                     },
                     {
                        "im" : "after DOCTYPE",
                        "type" : "switch the insertion mode"
                     }
                  ],
                  "cond" : [
                     "DOCTYPE system identifier",
                     "non-empty"
                  ],
                  "false_actions" : [
                     {
                        "im" : "after DOCTYPE",
                        "type" : "switch the insertion mode"
                     }
                  ],
                  "type" : "if"
               }
            ],
            "type" : "if"
         }
      ],
      "before DOCTYPE;ELEMENT" : [
      ],
      "before DOCTYPE;END-ELSE" : [
         {
            "error_type" : "stray end tag",
            "error_value" : [
               "token",
               "tag name"
            ],
            "name" : "before-doctype-end-else",
            "type" : "parse error"
         },
         {
            "type" : "ignore the token"
         }
      ],
      "before DOCTYPE;ENTITY" : [
      ],
      "before DOCTYPE;EOD" : [
      ],
      "before DOCTYPE;EOF" : [
         {
            "im" : "before root element",
            "type" : "switch the insertion mode"
         },
         {
            "type" : "reprocess the token"
         }
      ],
      "before DOCTYPE;NOTATION" : [
      ],
      "before DOCTYPE;PI" : [
         {
            "position" : "document",
            "type" : "insert a processing instruction"
         }
      ],
      "before DOCTYPE;START-ELSE" : [
         {
            "im" : "before root element",
            "type" : "switch the insertion mode"
         },
         {
            "type" : "reprocess the token"
         }
      ],
      "before DOCTYPE;TEXT" : [
         {
            "actions" : [
               {
                  "error_type" : "text outside of root element",
                  "name" : "before-doctype-char",
                  "type" : "parse error"
               }
            ],
            "type" : "text-with-optional-ws-prefix",
            "ws_actions" : [
            ]
         }
      ],
      "before DTD text declaration;ATTLIST" : [
         {
            "type" : "the XML declaration is missing"
         },
         {
            "im" : "in subset",
            "type" : "switch the insertion mode"
         },
         {
            "type" : "reprocess the token"
         }
      ],
      "before DTD text declaration;COMMENT" : [
         {
            "type" : "the XML declaration is missing"
         },
         {
            "im" : "in subset",
            "type" : "switch the insertion mode"
         },
         {
            "type" : "reprocess the token"
         }
      ],
      "before DTD text declaration;DOCTYPE" : [
         {
            "type" : "the XML declaration is missing"
         },
         {
            "im" : "in subset",
            "type" : "switch the insertion mode"
         },
         {
            "type" : "reprocess the token"
         }
      ],
      "before DTD text declaration;ELEMENT" : [
         {
            "type" : "the XML declaration is missing"
         },
         {
            "im" : "in subset",
            "type" : "switch the insertion mode"
         },
         {
            "type" : "reprocess the token"
         }
      ],
      "before DTD text declaration;END-ELSE" : [
         {
            "type" : "the XML declaration is missing"
         },
         {
            "im" : "in subset",
            "type" : "switch the insertion mode"
         },
         {
            "type" : "reprocess the token"
         }
      ],
      "before DTD text declaration;ENTITY" : [
         {
            "type" : "the XML declaration is missing"
         },
         {
            "im" : "in subset",
            "type" : "switch the insertion mode"
         },
         {
            "type" : "reprocess the token"
         }
      ],
      "before DTD text declaration;EOD" : [
         {
            "type" : "the XML declaration is missing"
         },
         {
            "im" : "in subset",
            "type" : "switch the insertion mode"
         },
         {
            "type" : "reprocess the token"
         }
      ],
      "before DTD text declaration;EOF" : [
         {
            "type" : "the XML declaration is missing"
         },
         {
            "im" : "in subset",
            "type" : "switch the insertion mode"
         },
         {
            "type" : "reprocess the token"
         }
      ],
      "before DTD text declaration;NOTATION" : [
         {
            "type" : "the XML declaration is missing"
         },
         {
            "im" : "in subset",
            "type" : "switch the insertion mode"
         },
         {
            "type" : "reprocess the token"
         }
      ],
      "before DTD text declaration;PI" : [
         {
            "actions" : [
               {
                  "type" : "process an XML declaration"
               },
               {
                  "im" : "in subset",
                  "type" : "switch the insertion mode"
               }
            ],
            "cond" : [
               "token target",
               "is",
               "xml"
            ],
            "false_actions" : [
               {
                  "type" : "the XML declaration is missing"
               },
               {
                  "im" : "in subset",
                  "type" : "switch the insertion mode"
               },
               {
                  "type" : "reprocess the token"
               }
            ],
            "type" : "if"
         }
      ],
      "before DTD text declaration;START-ELSE" : [
         {
            "type" : "the XML declaration is missing"
         },
         {
            "im" : "in subset",
            "type" : "switch the insertion mode"
         },
         {
            "type" : "reprocess the token"
         }
      ],
      "before DTD text declaration;TEXT" : [
         {
            "type" : "the XML declaration is missing"
         },
         {
            "im" : "in subset",
            "type" : "switch the insertion mode"
         },
         {
            "type" : "reprocess the token"
         }
      ],
      "before XML declaration;ATTLIST" : [
         {
            "type" : "the XML declaration is missing"
         },
         {
            "im" : "before DOCTYPE",
            "type" : "switch the insertion mode"
         },
         {
            "type" : "reprocess the token"
         }
      ],
      "before XML declaration;COMMENT" : [
         {
            "type" : "the XML declaration is missing"
         },
         {
            "im" : "before DOCTYPE",
            "type" : "switch the insertion mode"
         },
         {
            "type" : "reprocess the token"
         }
      ],
      "before XML declaration;DOCTYPE" : [
         {
            "type" : "the XML declaration is missing"
         },
         {
            "im" : "before DOCTYPE",
            "type" : "switch the insertion mode"
         },
         {
            "type" : "reprocess the token"
         }
      ],
      "before XML declaration;ELEMENT" : [
         {
            "type" : "the XML declaration is missing"
         },
         {
            "im" : "before DOCTYPE",
            "type" : "switch the insertion mode"
         },
         {
            "type" : "reprocess the token"
         }
      ],
      "before XML declaration;END-ELSE" : [
         {
            "type" : "the XML declaration is missing"
         },
         {
            "im" : "before DOCTYPE",
            "type" : "switch the insertion mode"
         },
         {
            "type" : "reprocess the token"
         }
      ],
      "before XML declaration;ENTITY" : [
         {
            "type" : "the XML declaration is missing"
         },
         {
            "im" : "before DOCTYPE",
            "type" : "switch the insertion mode"
         },
         {
            "type" : "reprocess the token"
         }
      ],
      "before XML declaration;EOD" : [
         {
            "type" : "the XML declaration is missing"
         },
         {
            "im" : "before DOCTYPE",
            "type" : "switch the insertion mode"
         },
         {
            "type" : "reprocess the token"
         }
      ],
      "before XML declaration;EOF" : [
         {
            "type" : "the XML declaration is missing"
         },
         {
            "im" : "before DOCTYPE",
            "type" : "switch the insertion mode"
         },
         {
            "type" : "reprocess the token"
         }
      ],
      "before XML declaration;NOTATION" : [
         {
            "type" : "the XML declaration is missing"
         },
         {
            "im" : "before DOCTYPE",
            "type" : "switch the insertion mode"
         },
         {
            "type" : "reprocess the token"
         }
      ],
      "before XML declaration;PI" : [
         {
            "actions" : [
               {
                  "type" : "process an XML declaration"
               },
               {
                  "im" : "before DOCTYPE",
                  "type" : "switch the insertion mode"
               }
            ],
            "cond" : [
               "token target",
               "is",
               "xml"
            ],
            "false_actions" : [
               {
                  "type" : "the XML declaration is missing"
               },
               {
                  "im" : "before DOCTYPE",
                  "type" : "switch the insertion mode"
               },
               {
                  "type" : "reprocess the token"
               }
            ],
            "type" : "if"
         }
      ],
      "before XML declaration;START-ELSE" : [
         {
            "type" : "the XML declaration is missing"
         },
         {
            "im" : "before DOCTYPE",
            "type" : "switch the insertion mode"
         },
         {
            "type" : "reprocess the token"
         }
      ],
      "before XML declaration;TEXT" : [
         {
            "type" : "the XML declaration is missing"
         },
         {
            "im" : "before DOCTYPE",
            "type" : "switch the insertion mode"
         },
         {
            "type" : "reprocess the token"
         }
      ],
      "before content text declaration;ATTLIST" : [
         {
            "type" : "the XML declaration is missing"
         },
         {
            "im" : "in element",
            "type" : "switch the insertion mode"
         },
         {
            "type" : "reprocess the token"
         }
      ],
      "before content text declaration;COMMENT" : [
         {
            "type" : "the XML declaration is missing"
         },
         {
            "im" : "in element",
            "type" : "switch the insertion mode"
         },
         {
            "type" : "reprocess the token"
         }
      ],
      "before content text declaration;DOCTYPE" : [
         {
            "type" : "the XML declaration is missing"
         },
         {
            "im" : "in element",
            "type" : "switch the insertion mode"
         },
         {
            "type" : "reprocess the token"
         }
      ],
      "before content text declaration;ELEMENT" : [
         {
            "type" : "the XML declaration is missing"
         },
         {
            "im" : "in element",
            "type" : "switch the insertion mode"
         },
         {
            "type" : "reprocess the token"
         }
      ],
      "before content text declaration;END-ELSE" : [
         {
            "type" : "the XML declaration is missing"
         },
         {
            "im" : "in element",
            "type" : "switch the insertion mode"
         },
         {
            "type" : "reprocess the token"
         }
      ],
      "before content text declaration;ENTITY" : [
         {
            "type" : "the XML declaration is missing"
         },
         {
            "im" : "in element",
            "type" : "switch the insertion mode"
         },
         {
            "type" : "reprocess the token"
         }
      ],
      "before content text declaration;EOD" : [
         {
            "type" : "the XML declaration is missing"
         },
         {
            "im" : "in element",
            "type" : "switch the insertion mode"
         },
         {
            "type" : "reprocess the token"
         }
      ],
      "before content text declaration;EOF" : [
         {
            "type" : "the XML declaration is missing"
         },
         {
            "im" : "in element",
            "type" : "switch the insertion mode"
         },
         {
            "type" : "reprocess the token"
         }
      ],
      "before content text declaration;NOTATION" : [
         {
            "type" : "the XML declaration is missing"
         },
         {
            "im" : "in element",
            "type" : "switch the insertion mode"
         },
         {
            "type" : "reprocess the token"
         }
      ],
      "before content text declaration;PI" : [
         {
            "actions" : [
               {
                  "type" : "process an XML declaration"
               },
               {
                  "im" : "in element",
                  "type" : "switch the insertion mode"
               }
            ],
            "cond" : [
               "token target",
               "is",
               "xml"
            ],
            "false_actions" : [
               {
                  "type" : "the XML declaration is missing"
               },
               {
                  "im" : "in element",
                  "type" : "switch the insertion mode"
               },
               {
                  "type" : "reprocess the token"
               }
            ],
            "type" : "if"
         }
      ],
      "before content text declaration;START-ELSE" : [
         {
            "type" : "the XML declaration is missing"
         },
         {
            "im" : "in element",
            "type" : "switch the insertion mode"
         },
         {
            "type" : "reprocess the token"
         }
      ],
      "before content text declaration;TEXT" : [
         {
            "type" : "the XML declaration is missing"
         },
         {
            "im" : "in element",
            "type" : "switch the insertion mode"
         },
         {
            "type" : "reprocess the token"
         }
      ],
      "before root element;ATTLIST" : [
      ],
      "before root element;COMMENT" : [
         {
            "position" : "document",
            "type" : "insert a comment"
         }
      ],
      "before root element;DOCTYPE" : [
         {
            "error_type" : "doctype:bad context",
            "name" : "before-root-element-doctype",
            "type" : "parse error"
         },
         {
            "actions" : [
               {
                  "type" : "set the stop processing flag"
               },
               {
                  "im" : "in subset before root element",
                  "type" : "switch the insertion mode"
               }
            ],
            "cond" : [
               "token",
               "has",
               "has internal subset flag"
            ],
            "type" : "if"
         }
      ],
      "before root element;ELEMENT" : [
      ],
      "before root element;END-ELSE" : [
         {
            "error_type" : "stray end tag",
            "error_value" : [
               "token",
               "tag name"
            ],
            "name" : "before-root-element-end-else",
            "type" : "parse error"
         },
         {
            "type" : "ignore the token"
         }
      ],
      "before root element;ENTITY" : [
      ],
      "before root element;EOD" : [
      ],
      "before root element;EOF" : [
         {
            "error_type" : "no root element",
            "name" : "before-root-element-eof",
            "type" : "parse error"
         },
         {
            "type" : "stop parsing"
         }
      ],
      "before root element;NOTATION" : [
      ],
      "before root element;PI" : [
         {
            "position" : "document",
            "type" : "insert a processing instruction"
         }
      ],
      "before root element;START-ELSE" : [
         {
            "type" : "create an XML element"
         },
         {
            "type" : "append-to-document"
         },
         {
            "type" : "push-oe"
         },
         {
            "type" : "appcache-processing"
         },
         {
            "actions" : [
               {
                  "type" : "pop-oe"
               },
               {
                  "foreign" : 1,
                  "type" : "acknowledge the token's self-closing flag"
               },
               {
                  "im" : "after root element",
                  "type" : "switch the insertion mode"
               }
            ],
            "cond" : [
               "token",
               "has",
               "self-closing flag"
            ],
            "false_actions" : [
               {
                  "im" : "in element",
                  "type" : "switch the insertion mode"
               }
            ],
            "type" : "if"
         }
      ],
      "before root element;TEXT" : [
         {
            "actions" : [
               {
                  "error_type" : "text outside of root element",
                  "name" : "before-root-element-char",
                  "type" : "parse error"
               }
            ],
            "type" : "text-with-optional-ws-prefix",
            "ws_actions" : [
            ]
         }
      ],
      "in element;ATTLIST" : [
      ],
      "in element;COMMENT" : [
         {
            "type" : "insert a comment"
         }
      ],
      "in element;DOCTYPE" : [
         {
            "error_type" : "doctype:bad context",
            "name" : "in-element-doctype",
            "type" : "parse error"
         },
         {
            "actions" : [
               {
                  "type" : "set the stop processing flag"
               },
               {
                  "im" : "in subset in element",
                  "type" : "switch the insertion mode"
               }
            ],
            "cond" : [
               "token",
               "has",
               "has internal subset flag"
            ],
            "type" : "if"
         }
      ],
      "in element;ELEMENT" : [
      ],
      "in element;END-ELSE" : [
         {
            "type" : "set-end-tag-name"
         },
         {
            "actions" : [
               {
                  "actions" : [
                     {
                        "error_type" : "stray end tag",
                        "error_value" : [
                           "token",
                           "tag name"
                        ],
                        "name" : "in-element-end-else",
                        "type" : "parse error"
                     },
                     {
                        "type" : "ignore the token"
                     },
                     {
                        "type" : "abort these steps"
                     }
                  ],
                  "cond" : [
                     "and",
                     [
                        "fragment"
                     ],
                     [
                        "node",
                        "is",
                        "oe[0]"
                     ]
                  ],
                  "type" : "if"
               },
               {
                  "actions" : [
                     {
                        "actions" : [
                           {
                              "error_text" : [
                                 "oe[-1]",
                                 "local name"
                              ],
                              "error_type" : "not closed before ancestor end tag",
                              "error_value" : [
                                 "token",
                                 "tag name"
                              ],
                              "name" : "in-element-end-else-2",
                              "type" : "parse error"
                           }
                        ],
                        "cond" : [
                           "oe[-1]",
                           "is not",
                           "node"
                        ],
                        "type" : "if"
                     },
                     {
                        "actions" : [
                           {
                              "im" : "after root element",
                              "type" : "switch the insertion mode"
                           }
                        ],
                        "cond" : [
                           "node",
                           "is",
                           "oe[0]"
                        ],
                        "type" : "if"
                     },
                     {
                        "type" : "pop-oe",
                        "until" : "node"
                     },
                     {
                        "type" : "abort these steps"
                     }
                  ],
                  "cond" : [
                     "node",
                     "is",
                     {
                        "tag_name" : 1
                     }
                  ],
                  "false_actions" : [
                     {
                        "actions" : [
                           {
                              "error_type" : "stray end tag",
                              "error_value" : [
                                 "token",
                                 "tag name"
                              ],
                              "name" : "in-element-end-else-3",
                              "type" : "parse error"
                           },
                           {
                              "type" : "ignore the token"
                           },
                           {
                              "type" : "abort these steps"
                           }
                        ],
                        "cond" : [
                           "node",
                           "is",
                           "oe[0]"
                        ],
                        "type" : "if"
                     }
                  ],
                  "type" : "if"
               }
            ],
            "between_actions" : [
            ],
            "type" : "for-each-reverse-oe-as-node"
         }
      ],
      "in element;ENTITY" : [
      ],
      "in element;EOD" : [
      ],
      "in element;EOF" : [
         {
            "actions" : [
               {
                  "actions" : [
                     {
                        "error_text" : [
                           "oe[-1]",
                           "local name"
                        ],
                        "error_type" : "in body:#eof",
                        "name" : "in-element-eof",
                        "type" : "parse error"
                     }
                  ],
                  "cond" : [
                     "oe",
                     "> 1"
                  ],
                  "type" : "if"
               },
               {
                  "type" : "stop parsing"
               }
            ],
            "cond" : [
               "fragment"
            ],
            "false_actions" : [
               {
                  "error_text" : [
                     "oe[-1]",
                     "local name"
                  ],
                  "error_type" : "in body:#eof",
                  "name" : "in-element-eof-2",
                  "type" : "parse error"
               },
               {
                  "type" : "stop parsing"
               }
            ],
            "type" : "if"
         }
      ],
      "in element;NOTATION" : [
      ],
      "in element;PI" : [
         {
            "type" : "insert a processing instruction"
         }
      ],
      "in element;START-ELSE" : [
         {
            "type" : "create an XML element"
         },
         {
            "type" : "append-to-current"
         },
         {
            "type" : "push-oe"
         },
         {
            "actions" : [
               {
                  "type" : "pop-oe"
               },
               {
                  "foreign" : 1,
                  "type" : "acknowledge the token's self-closing flag"
               }
            ],
            "cond" : [
               "token",
               "has",
               "self-closing flag"
            ],
            "type" : "if"
         }
      ],
      "in element;TEXT" : [
         {
            "actions" : [
               {
                  "type" : "insert-chars"
               }
            ],
            "null_char_actions" : [
               {
                  "error_type" : "parser:NULL",
                  "name" : "in-element-null",
                  "type" : "parse error"
               }
            ],
            "type" : "process-chars"
         }
      ],
      "in subset after root element;ATTLIST" : [
         {
            "type" : "ignore the token"
         }
      ],
      "in subset after root element;COMMENT" : [
         {
            "type" : "ignore the token"
         }
      ],
      "in subset after root element;DOCTYPE" : [
         {
            "type" : "ignore the token"
         }
      ],
      "in subset after root element;ELEMENT" : [
         {
            "type" : "ignore the token"
         }
      ],
      "in subset after root element;END-ELSE" : [
         {
            "type" : "ignore the token"
         }
      ],
      "in subset after root element;ENTITY" : [
         {
            "type" : "ignore the token"
         }
      ],
      "in subset after root element;EOD" : [
         {
            "im" : "after root element",
            "type" : "switch the insertion mode"
         }
      ],
      "in subset after root element;EOF" : [
         {
            "type" : "stop parsing"
         }
      ],
      "in subset after root element;NOTATION" : [
         {
            "type" : "ignore the token"
         }
      ],
      "in subset after root element;PI" : [
         {
            "type" : "ignore the token"
         }
      ],
      "in subset after root element;START-ELSE" : [
         {
            "actions" : [
               {
                  "error_text" : [
                     "token",
                     "tag name"
                  ],
                  "error_type" : "nestc",
                  "name" : "-start-tag-self-closing-flag",
                  "type" : "parse error"
               }
            ],
            "cond" : [
               "token",
               "has",
               "self-closing flag"
            ],
            "type" : "if"
         },
         {
            "type" : "ignore the token"
         }
      ],
      "in subset after root element;TEXT" : [
         {
            "actions" : [
            ],
            "type" : "process-chars"
         }
      ],
      "in subset before root element;ATTLIST" : [
         {
            "type" : "ignore the token"
         }
      ],
      "in subset before root element;COMMENT" : [
         {
            "type" : "ignore the token"
         }
      ],
      "in subset before root element;DOCTYPE" : [
         {
            "type" : "ignore the token"
         }
      ],
      "in subset before root element;ELEMENT" : [
         {
            "type" : "ignore the token"
         }
      ],
      "in subset before root element;END-ELSE" : [
         {
            "type" : "ignore the token"
         }
      ],
      "in subset before root element;ENTITY" : [
         {
            "type" : "ignore the token"
         }
      ],
      "in subset before root element;EOD" : [
         {
            "im" : "before root element",
            "type" : "switch the insertion mode"
         }
      ],
      "in subset before root element;EOF" : [
         {
            "type" : "stop parsing"
         }
      ],
      "in subset before root element;NOTATION" : [
         {
            "type" : "ignore the token"
         }
      ],
      "in subset before root element;PI" : [
         {
            "type" : "ignore the token"
         }
      ],
      "in subset before root element;START-ELSE" : [
         {
            "actions" : [
               {
                  "error_text" : [
                     "token",
                     "tag name"
                  ],
                  "error_type" : "nestc",
                  "name" : "-start-tag-self-closing-flag",
                  "type" : "parse error"
               }
            ],
            "cond" : [
               "token",
               "has",
               "self-closing flag"
            ],
            "type" : "if"
         },
         {
            "type" : "ignore the token"
         }
      ],
      "in subset before root element;TEXT" : [
         {
            "actions" : [
            ],
            "type" : "process-chars"
         }
      ],
      "in subset in element;ATTLIST" : [
         {
            "type" : "ignore the token"
         }
      ],
      "in subset in element;COMMENT" : [
         {
            "type" : "ignore the token"
         }
      ],
      "in subset in element;DOCTYPE" : [
         {
            "type" : "ignore the token"
         }
      ],
      "in subset in element;ELEMENT" : [
         {
            "type" : "ignore the token"
         }
      ],
      "in subset in element;END-ELSE" : [
         {
            "type" : "ignore the token"
         }
      ],
      "in subset in element;ENTITY" : [
         {
            "type" : "ignore the token"
         }
      ],
      "in subset in element;EOD" : [
         {
            "im" : "in element",
            "type" : "switch the insertion mode"
         }
      ],
      "in subset in element;EOF" : [
         {
            "type" : "stop parsing"
         }
      ],
      "in subset in element;NOTATION" : [
         {
            "type" : "ignore the token"
         }
      ],
      "in subset in element;PI" : [
         {
            "type" : "ignore the token"
         }
      ],
      "in subset in element;START-ELSE" : [
         {
            "actions" : [
               {
                  "error_text" : [
                     "token",
                     "tag name"
                  ],
                  "error_type" : "nestc",
                  "name" : "-start-tag-self-closing-flag",
                  "type" : "parse error"
               }
            ],
            "cond" : [
               "token",
               "has",
               "self-closing flag"
            ],
            "type" : "if"
         },
         {
            "type" : "ignore the token"
         }
      ],
      "in subset in element;TEXT" : [
         {
            "actions" : [
            ],
            "type" : "process-chars"
         }
      ],
      "in subset;ATTLIST" : [
         {
            "type" : "process an ATTLIST token"
         }
      ],
      "in subset;COMMENT" : [
         {
            "type" : "ignore the token"
         }
      ],
      "in subset;DOCTYPE" : [
      ],
      "in subset;ELEMENT" : [
         {
            "type" : "process an ELEMENT token"
         }
      ],
      "in subset;END-ELSE" : [
      ],
      "in subset;ENTITY" : [
         {
            "type" : "process an ENTITY token"
         }
      ],
      "in subset;EOD" : [
         {
            "actions" : [
               {
                  "type" : "process the external subset"
               }
            ],
            "cond" : [
               "DOCTYPE system identifier",
               "non-empty"
            ],
            "type" : "if"
         },
         {
            "im" : "after DOCTYPE",
            "type" : "switch the insertion mode"
         }
      ],
      "in subset;EOF" : [
         {
            "type" : "stop parsing"
         }
      ],
      "in subset;NOTATION" : [
         {
            "type" : "process a NOTATION token"
         }
      ],
      "in subset;PI" : [
         {
            "position" : "doctype",
            "type" : "insert a processing instruction"
         }
      ],
      "in subset;START-ELSE" : [
         {
            "actions" : [
               {
                  "error_text" : [
                     "token",
                     "tag name"
                  ],
                  "error_type" : "nestc",
                  "name" : "-start-tag-self-closing-flag",
                  "type" : "parse error"
               }
            ],
            "cond" : [
               "token",
               "has",
               "self-closing flag"
            ],
            "type" : "if"
         }
      ],
      "in subset;TEXT" : [
         {
            "actions" : [
               {
                  "error_type" : "string in internal subset",
                  "name" : "in-subset-char",
                  "type" : "parse error"
               }
            ],
            "type" : "text-with-optional-ws-prefix",
            "ws_actions" : [
            ]
         }
      ],
      "initial;ATTLIST" : [
         {
            "type" : "the XML declaration is missing"
         },
         {
            "im" : "before DOCTYPE",
            "type" : "switch the insertion mode"
         },
         {
            "type" : "reprocess the token"
         }
      ],
      "initial;COMMENT" : [
         {
            "type" : "the XML declaration is missing"
         },
         {
            "im" : "before DOCTYPE",
            "type" : "switch the insertion mode"
         },
         {
            "type" : "reprocess the token"
         }
      ],
      "initial;DOCTYPE" : [
         {
            "type" : "the XML declaration is missing"
         },
         {
            "im" : "before DOCTYPE",
            "type" : "switch the insertion mode"
         },
         {
            "type" : "reprocess the token"
         }
      ],
      "initial;ELEMENT" : [
         {
            "type" : "the XML declaration is missing"
         },
         {
            "im" : "before DOCTYPE",
            "type" : "switch the insertion mode"
         },
         {
            "type" : "reprocess the token"
         }
      ],
      "initial;END-ELSE" : [
         {
            "type" : "the XML declaration is missing"
         },
         {
            "im" : "before DOCTYPE",
            "type" : "switch the insertion mode"
         },
         {
            "type" : "reprocess the token"
         }
      ],
      "initial;ENTITY" : [
         {
            "type" : "the XML declaration is missing"
         },
         {
            "im" : "before DOCTYPE",
            "type" : "switch the insertion mode"
         },
         {
            "type" : "reprocess the token"
         }
      ],
      "initial;EOD" : [
         {
            "type" : "the XML declaration is missing"
         },
         {
            "im" : "before DOCTYPE",
            "type" : "switch the insertion mode"
         },
         {
            "type" : "reprocess the token"
         }
      ],
      "initial;EOF" : [
         {
            "type" : "the XML declaration is missing"
         },
         {
            "im" : "before DOCTYPE",
            "type" : "switch the insertion mode"
         },
         {
            "type" : "reprocess the token"
         }
      ],
      "initial;NOTATION" : [
         {
            "type" : "the XML declaration is missing"
         },
         {
            "im" : "before DOCTYPE",
            "type" : "switch the insertion mode"
         },
         {
            "type" : "reprocess the token"
         }
      ],
      "initial;PI" : [
         {
            "actions" : [
               {
                  "type" : "process an XML declaration"
               },
               {
                  "im" : "before root element",
                  "type" : "switch the insertion mode"
               }
            ],
            "cond" : [
               "token target",
               "is",
               "xml"
            ],
            "false_actions" : [
               {
                  "type" : "the XML declaration is missing"
               },
               {
                  "im" : "before DOCTYPE",
                  "type" : "switch the insertion mode"
               },
               {
                  "type" : "reprocess the token"
               }
            ],
            "type" : "if"
         }
      ],
      "initial;START-ELSE" : [
         {
            "type" : "the XML declaration is missing"
         },
         {
            "im" : "before DOCTYPE",
            "type" : "switch the insertion mode"
         },
         {
            "type" : "reprocess the token"
         }
      ],
      "initial;TEXT" : [
         {
            "type" : "the XML declaration is missing"
         },
         {
            "im" : "before DOCTYPE",
            "type" : "switch the insertion mode"
         },
         {
            "type" : "reprocess the token"
         }
      ]
   },
   "charrefs_pubids" : {
      "-//W3C//DTD MathML 2.0//EN" : 1,
      "-//W3C//DTD XHTML 1.0 Frameset//EN" : 1,
      "-//W3C//DTD XHTML 1.0 Strict//EN" : 1,
      "-//W3C//DTD XHTML 1.0 Transitional//EN" : 1,
      "-//W3C//DTD XHTML 1.1 plus MathML 2.0 plus SVG 1.1//EN" : 1,
      "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN" : 1,
      "-//W3C//DTD XHTML 1.1//EN" : 1,
      "-//W3C//DTD XHTML Basic 1.0//EN" : 1,
      "-//WAPFORUM//DTD XHTML Mobile 1.0//EN" : 1
   },
   "element_matching" : {
      "element_groups" : [
         "HTML:*",
         "HTML:applet,HTML:audio,HTML:style,HTML:video",
         "HTML:button,HTML:fieldset,HTML:input,HTML:keygen,HTML:label,HTML:output,HTML:select",
         "HTML:img",
         "HTML:object,HTML:textarea"
      ],
      "element_types" : [
         "HTML:head",
         "HTML:html",
         "HTML:select",
         "HTML:table",
         "HTML:template"
      ]
   },
   "ims" : {
      "after DOCTYPE" : {
         "conds" : {
            "ATTLIST" : "after DOCTYPE;ATTLIST",
            "COMMENT" : "after DOCTYPE;COMMENT",
            "DOCTYPE" : "after DOCTYPE;DOCTYPE",
            "ELEMENT" : "after DOCTYPE;ELEMENT",
            "END-ELSE" : "after DOCTYPE;END-ELSE",
            "END:button fieldset img input keygen label object output select textarea" : "after DOCTYPE;END-ELSE",
            "ENTITY" : "after DOCTYPE;ENTITY",
            "EOD" : "after DOCTYPE;EOD",
            "EOF" : "after DOCTYPE;EOF",
            "NOTATION" : "after DOCTYPE;NOTATION",
            "PI" : "after DOCTYPE;PI",
            "START-ELSE" : "after DOCTYPE;START-ELSE",
            "START:button fieldset img input keygen label object output select textarea" : "after DOCTYPE;START-ELSE",
            "TEXT" : "after DOCTYPE;TEXT"
         }
      },
      "after root element" : {
         "conds" : {
            "ATTLIST" : "after root element;ATTLIST",
            "COMMENT" : "after root element;COMMENT",
            "DOCTYPE" : "after root element;DOCTYPE",
            "ELEMENT" : "after root element;ELEMENT",
            "END-ELSE" : "after root element;END-ELSE",
            "END:button fieldset img input keygen label object output select textarea" : "after root element;END-ELSE",
            "ENTITY" : "after root element;ENTITY",
            "EOD" : "after root element;EOD",
            "EOF" : "after root element;EOF",
            "NOTATION" : "after root element;NOTATION",
            "PI" : "after root element;PI",
            "START-ELSE" : "after root element;START-ELSE",
            "START:button fieldset img input keygen label object output select textarea" : "after root element;START-ELSE",
            "TEXT" : "after root element;TEXT"
         }
      },
      "before DOCTYPE" : {
         "conds" : {
            "ATTLIST" : "before DOCTYPE;ATTLIST",
            "COMMENT" : "before DOCTYPE;COMMENT",
            "DOCTYPE" : "before DOCTYPE;DOCTYPE",
            "ELEMENT" : "before DOCTYPE;ELEMENT",
            "END-ELSE" : "before DOCTYPE;END-ELSE",
            "END:button fieldset img input keygen label object output select textarea" : "before DOCTYPE;END-ELSE",
            "ENTITY" : "before DOCTYPE;ENTITY",
            "EOD" : "before DOCTYPE;EOD",
            "EOF" : "before DOCTYPE;EOF",
            "NOTATION" : "before DOCTYPE;NOTATION",
            "PI" : "before DOCTYPE;PI",
            "START-ELSE" : "before DOCTYPE;START-ELSE",
            "START:button fieldset img input keygen label object output select textarea" : "before DOCTYPE;START-ELSE",
            "TEXT" : "before DOCTYPE;TEXT"
         }
      },
      "before DTD text declaration" : {
         "conds" : {
            "ATTLIST" : "before DTD text declaration;ATTLIST",
            "COMMENT" : "before DTD text declaration;COMMENT",
            "DOCTYPE" : "before DTD text declaration;DOCTYPE",
            "ELEMENT" : "before DTD text declaration;ELEMENT",
            "END-ELSE" : "before DTD text declaration;END-ELSE",
            "END:button fieldset img input keygen label object output select textarea" : "before DTD text declaration;END-ELSE",
            "ENTITY" : "before DTD text declaration;ENTITY",
            "EOD" : "before DTD text declaration;EOD",
            "EOF" : "before DTD text declaration;EOF",
            "NOTATION" : "before DTD text declaration;NOTATION",
            "PI" : "before DTD text declaration;PI",
            "START-ELSE" : "before DTD text declaration;START-ELSE",
            "START:button fieldset img input keygen label object output select textarea" : "before DTD text declaration;START-ELSE",
            "TEXT" : "before DTD text declaration;TEXT"
         }
      },
      "before XML declaration" : {
         "conds" : {
            "ATTLIST" : "before XML declaration;ATTLIST",
            "COMMENT" : "before XML declaration;COMMENT",
            "DOCTYPE" : "before XML declaration;DOCTYPE",
            "ELEMENT" : "before XML declaration;ELEMENT",
            "END-ELSE" : "before XML declaration;END-ELSE",
            "END:button fieldset img input keygen label object output select textarea" : "before XML declaration;END-ELSE",
            "ENTITY" : "before XML declaration;ENTITY",
            "EOD" : "before XML declaration;EOD",
            "EOF" : "before XML declaration;EOF",
            "NOTATION" : "before XML declaration;NOTATION",
            "PI" : "before XML declaration;PI",
            "START-ELSE" : "before XML declaration;START-ELSE",
            "START:button fieldset img input keygen label object output select textarea" : "before XML declaration;START-ELSE",
            "TEXT" : "before XML declaration;TEXT"
         }
      },
      "before content text declaration" : {
         "conds" : {
            "ATTLIST" : "before content text declaration;ATTLIST",
            "COMMENT" : "before content text declaration;COMMENT",
            "DOCTYPE" : "before content text declaration;DOCTYPE",
            "ELEMENT" : "before content text declaration;ELEMENT",
            "END-ELSE" : "before content text declaration;END-ELSE",
            "END:button fieldset img input keygen label object output select textarea" : "before content text declaration;END-ELSE",
            "ENTITY" : "before content text declaration;ENTITY",
            "EOD" : "before content text declaration;EOD",
            "EOF" : "before content text declaration;EOF",
            "NOTATION" : "before content text declaration;NOTATION",
            "PI" : "before content text declaration;PI",
            "START-ELSE" : "before content text declaration;START-ELSE",
            "START:button fieldset img input keygen label object output select textarea" : "before content text declaration;START-ELSE",
            "TEXT" : "before content text declaration;TEXT"
         }
      },
      "before root element" : {
         "conds" : {
            "ATTLIST" : "before root element;ATTLIST",
            "COMMENT" : "before root element;COMMENT",
            "DOCTYPE" : "before root element;DOCTYPE",
            "ELEMENT" : "before root element;ELEMENT",
            "END-ELSE" : "before root element;END-ELSE",
            "END:button fieldset img input keygen label object output select textarea" : "before root element;END-ELSE",
            "ENTITY" : "before root element;ENTITY",
            "EOD" : "before root element;EOD",
            "EOF" : "before root element;EOF",
            "NOTATION" : "before root element;NOTATION",
            "PI" : "before root element;PI",
            "START-ELSE" : "before root element;START-ELSE",
            "START:button fieldset img input keygen label object output select textarea" : "before root element;START-ELSE",
            "TEXT" : "before root element;TEXT"
         }
      },
      "in element" : {
         "conds" : {
            "ATTLIST" : "in element;ATTLIST",
            "COMMENT" : "in element;COMMENT",
            "DOCTYPE" : "in element;DOCTYPE",
            "ELEMENT" : "in element;ELEMENT",
            "END-ELSE" : "in element;END-ELSE",
            "END:button fieldset img input keygen label object output select textarea" : "in element;END-ELSE",
            "ENTITY" : "in element;ENTITY",
            "EOD" : "in element;EOD",
            "EOF" : "in element;EOF",
            "NOTATION" : "in element;NOTATION",
            "PI" : "in element;PI",
            "START-ELSE" : "in element;START-ELSE",
            "START:button fieldset img input keygen label object output select textarea" : "in element;START-ELSE",
            "TEXT" : "in element;TEXT"
         }
      },
      "in subset" : {
         "conds" : {
            "ATTLIST" : "in subset;ATTLIST",
            "COMMENT" : "in subset;COMMENT",
            "DOCTYPE" : "in subset;DOCTYPE",
            "ELEMENT" : "in subset;ELEMENT",
            "END-ELSE" : "in subset;END-ELSE",
            "END:button fieldset img input keygen label object output select textarea" : "in subset;END-ELSE",
            "ENTITY" : "in subset;ENTITY",
            "EOD" : "in subset;EOD",
            "EOF" : "in subset;EOF",
            "NOTATION" : "in subset;NOTATION",
            "PI" : "in subset;PI",
            "START-ELSE" : "in subset;START-ELSE",
            "START:button fieldset img input keygen label object output select textarea" : "in subset;START-ELSE",
            "TEXT" : "in subset;TEXT"
         }
      },
      "in subset after root element" : {
         "conds" : {
            "ATTLIST" : "in subset after root element;ATTLIST",
            "COMMENT" : "in subset after root element;COMMENT",
            "DOCTYPE" : "in subset after root element;DOCTYPE",
            "ELEMENT" : "in subset after root element;ELEMENT",
            "END-ELSE" : "in subset after root element;END-ELSE",
            "END:button fieldset img input keygen label object output select textarea" : "in subset after root element;END-ELSE",
            "ENTITY" : "in subset after root element;ENTITY",
            "EOD" : "in subset after root element;EOD",
            "EOF" : "in subset after root element;EOF",
            "NOTATION" : "in subset after root element;NOTATION",
            "PI" : "in subset after root element;PI",
            "START-ELSE" : "in subset after root element;START-ELSE",
            "START:button fieldset img input keygen label object output select textarea" : "in subset after root element;START-ELSE",
            "TEXT" : "in subset after root element;TEXT"
         }
      },
      "in subset before root element" : {
         "conds" : {
            "ATTLIST" : "in subset before root element;ATTLIST",
            "COMMENT" : "in subset before root element;COMMENT",
            "DOCTYPE" : "in subset before root element;DOCTYPE",
            "ELEMENT" : "in subset before root element;ELEMENT",
            "END-ELSE" : "in subset before root element;END-ELSE",
            "END:button fieldset img input keygen label object output select textarea" : "in subset before root element;END-ELSE",
            "ENTITY" : "in subset before root element;ENTITY",
            "EOD" : "in subset before root element;EOD",
            "EOF" : "in subset before root element;EOF",
            "NOTATION" : "in subset before root element;NOTATION",
            "PI" : "in subset before root element;PI",
            "START-ELSE" : "in subset before root element;START-ELSE",
            "START:button fieldset img input keygen label object output select textarea" : "in subset before root element;START-ELSE",
            "TEXT" : "in subset before root element;TEXT"
         }
      },
      "in subset in element" : {
         "conds" : {
            "ATTLIST" : "in subset in element;ATTLIST",
            "COMMENT" : "in subset in element;COMMENT",
            "DOCTYPE" : "in subset in element;DOCTYPE",
            "ELEMENT" : "in subset in element;ELEMENT",
            "END-ELSE" : "in subset in element;END-ELSE",
            "END:button fieldset img input keygen label object output select textarea" : "in subset in element;END-ELSE",
            "ENTITY" : "in subset in element;ENTITY",
            "EOD" : "in subset in element;EOD",
            "EOF" : "in subset in element;EOF",
            "NOTATION" : "in subset in element;NOTATION",
            "PI" : "in subset in element;PI",
            "START-ELSE" : "in subset in element;START-ELSE",
            "START:button fieldset img input keygen label object output select textarea" : "in subset in element;START-ELSE",
            "TEXT" : "in subset in element;TEXT"
         }
      },
      "initial" : {
         "conds" : {
            "ATTLIST" : "initial;ATTLIST",
            "COMMENT" : "initial;COMMENT",
            "DOCTYPE" : "initial;DOCTYPE",
            "ELEMENT" : "initial;ELEMENT",
            "END-ELSE" : "initial;END-ELSE",
            "END:button fieldset img input keygen label object output select textarea" : "initial;END-ELSE",
            "ENTITY" : "initial;ENTITY",
            "EOD" : "initial;EOD",
            "EOF" : "initial;EOF",
            "NOTATION" : "initial;NOTATION",
            "PI" : "initial;PI",
            "START-ELSE" : "initial;START-ELSE",
            "START:button fieldset img input keygen label object output select textarea" : "initial;START-ELSE",
            "TEXT" : "initial;TEXT"
         }
      }
   },
   "reset_im_by_html_element" : {
   },
   "tag_name_groups" : [
      "button fieldset img input keygen label object output select textarea"
   ],
   "tree_patterns" : {
      "HTML element" : "HTML:*",
      "category-form-attr" : "HTML:button,HTML:fieldset,HTML:input,HTML:keygen,HTML:label,HTML:output,HTML:select HTML:object,HTML:textarea",
      "form-associated element" : "HTML:button,HTML:fieldset,HTML:input,HTML:keygen,HTML:label,HTML:output,HTML:select HTML:img HTML:object,HTML:textarea",
      "has_popped_action" : "HTML:applet,HTML:audio,HTML:style,HTML:video HTML:object,HTML:textarea"
   },
   "tree_patterns_not" : {
   }
}
