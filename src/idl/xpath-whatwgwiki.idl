/* Source: <https://wiki.whatwg.org/wiki/DOM_XPath> with following
   modifications:

     - Added [Exposed] extended attributes
     - Replace |implements| by |includes| and introduced |XPathEvaluatorMixin|
*/

/* License of the source (at the time this file forked from it):
   "Content is available under a CC0 Universal Public Domain
   Declaration, with some restrictions
   <https://wiki.whatwg.org/wiki/WHATWG_Wiki:Copyrights> unless
   otherwise noted." */

[Exposed=Window]
interface XPathResult {
  const unsigned short      ANY_TYPE                       = 0;
  const unsigned short      NUMBER_TYPE                    = 1;
  const unsigned short      STRING_TYPE                    = 2;
  const unsigned short      BOOLEAN_TYPE                   = 3;
  const unsigned short      UNORDERED_NODE_ITERATOR_TYPE   = 4;
  const unsigned short      ORDERED_NODE_ITERATOR_TYPE     = 5;
  const unsigned short      UNORDERED_NODE_SNAPSHOT_TYPE   = 6;
  const unsigned short      ORDERED_NODE_SNAPSHOT_TYPE     = 7;
  const unsigned short      ANY_UNORDERED_NODE_TYPE        = 8;
  const unsigned short      FIRST_ORDERED_NODE_TYPE        = 9;

  readonly attribute unsigned short resultType;
  readonly attribute unrestricted double numberValue;
  // Maybe "DOMString?".
  readonly attribute DOMString stringValue;
  readonly attribute boolean booleanValue;
  readonly attribute Node singleNodeValue;
  readonly attribute boolean          invalidIteratorState;
  readonly attribute unsigned long    snapshotLength;
  Node?               iterateNext();
  Node?               snapshotItem(unsigned long index);
};

[Exposed=Window]
interface XPathExpression {
  XPathResult evaluate(Node contextNode,
                       optional unsigned short type,
                       optional object? result);
};

[Exposed=Window]
interface XPathNSResolver {
  DOMString? lookupNamespaceURI(DOMString? prefix);
};

interface mixin XPathEvaluatorMixin {
  XPathExpression    createExpression(DOMString expression, 
                                      optional XPathNSResolver? resolver);
  XPathNSResolver    createNSResolver(Node nodeResolver);

  XPathResult evaluate(DOMString expression,
                       Node contextNode,
                       optional XPathNSResolver? resolver,
                       optional unsigned short type,
                       optional object? result);

};

[Constructor, Exposed=Window]
interface XPathEvaluator { };

Document includes XPathEvaluatorMixin;
XPathEvaluator includes XPathEvaluatorMixin;