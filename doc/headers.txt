data/headers.json
~~~~~~~~~~~~~~~~~

The file contains data on headers in various RFC 822 derived message
formats, including HTTP and MIME.

* Structure

The file contains a JSON object with following name/value pairs:

  addition_types [object]

    Names are addition-type values (in lowercase) and values are their
    descriptions, as [protocol-object].

  alt_svc_params [object]

    Names are parameters names used in |Alt-Svc:| header and values
    are their descriptions, as [protocol-object], with following
    additional name/value pair:

      value_type [value-type?]

        The type of the value, if known.

  auth_schemes [object]

    Names are auth-scheme values (in lowercase) and values are their
    descriptions, as [protocol-object], with following additional
    name/value pairs:

      challenge [protocol-object?]
      credentials [protocol-object?]
      info [protocol-object?]

        If specified, the |auth-scheme| value might be used in
        |challenge|, |credentials|, or |Authentication-Info:| and
        |Proxy-Authentication-Info:| headers, respectively.  Values
        are descriptions of them for the authorization scheme, with
        following name/value pairs:

          auth_params [object?]

            Names are known |auth-param| names in lowercase and values
            are their descriptions, as [protocol-object].

          syntax [string?]

            The syntax of the component following the |auth-scheme|
            and spaces in |challenge| or |credentials|, if known,
            represented by one of following values:

              |auth-param|   A |#auth-param| value.
              |token68|      A authorization scheme specific |token68| value.
              |non-standard| A non-standard value.

      origin_server [boolean]

        Whether the authorization scheme is intended to be used to
        authenticate with the origin server or not.

      proxy [boolean]

        Whether the authorization scheme is intended to be used to
        authenticate with a proxy or not.

      protocol [object?]

        Names are protocol names such as |HTTP|, |RTSP|, |SIP|, and
        |MSRP| and values are [conformance] value representing the
        conformance of the authorization scheme in the protocol in
        question.

  cache_directives [object]

    Names are cache-directive names (in lowercase) and values are
    their descriptions, as [protocol-object], with following
    additional name/value pairs:

      request [protocol-object?]
      response [protocol-object?]

        Descriptions of the cache-directive, applied when the
        directive is used in a request or response message,
        respectively.  The value can contain following additional
        name/value pairs:

          value_is_list [boolean]

            Whether the value is an HTTP list (|#|) or not.

          value_optionality [conformance?]

            Whether the value is allowed, required, or not.

          value_should [string?]

            The RECOMMENDED syntax for the value, |token| or
            |quoted-string|, if any.

          value_type [value-type?]

            The type of the value, if known.

  cookie_attrs [object]

    Names are cookie attribute names in lowercase and values are their
    description, as [protocol-object], with following additional
    name/value pairs:

      value_optionality [conformance?]

        Whether the value is allowed, or not.

      value_type [value-type?]

        The type of the value, if known.

  codings [object]

    Names are coding names in lowercase and values are their
    descriptions.  Values are JSON objects with following name/value
    pairs:

      content [object?]
      im [object?]
      transfer [object?]

        Descriptions for the content-coding, instance-manipulation, or
        transfer-coding, respectively, if applicable.  Values are
        [protocol-object], with following additional name/value pairs:

          A-IM [boolean]

            Whether the coding can be specified in the HTTP |A-IM:|
            header or not.

          Accept-Encoding [boolean]

            Whether the coding can be specified in the HTTP
            |Accept-Encoding:| header or not.

          compression [boolean]

            Whether the coding is a compression scheme or not.

          Content-Encoding [boolean]

            Whether the coding can be specified in the HTTP
            |Content-Encoding:| header or not.

          delta_coding [boolean]

            Whether the coding is a delta-coding or not.

          IM [boolean]

            Whether the coding can be specified in the HTTP |IM:|
            header or not.

          preferred_name [string?]

            The preferred name of the coding, if the coding name is
            deprecated, in lowercase.

          TE [boolean]

            Whether the coding can be specified in the HTTP |TE:|
            header or not.

          Transfer-Encoding [boolean]

            Whether the coding can be specified in the HTTP
            |Transfer-Encoding:| header or not.

  disposition_params [object]

    Names are |Content-Disposition:| parameter names in lowercase and
    values are their descriptions as [protocol-object], with following
    additional name/value pairs:

      protocols [object?]

        Applicable protocols, if known.  Names are protocol names such
        as |MIME|, |VPIM|, |HTTP|, or |SIP| and values are true
        values.

      value_type [value-type?]

        The type of the parameter value, if known and representable as
        a value type.

  disposition_types [object]

    Names are disposition-type values in lowercase and values are
    their descriptions as [protocol-object], with following additional
    name/value pair:

      protocols [object?]

        Applicable protocols, if known.  Names are protocol names such
        as |MIME|, |HTTP|, or |SIP| and values are true values.

  extension_declarations [object]

    Names are RFC 2774 extension declaration declaration names in
    lowercase and values are their descriptions as [protocol-object],
    with following additional name/value pair:

      value_type [value-type?]

        The type of the declaration value, if known and representable
        as a value type.

  forwarded [object]

    Names are |Forwarded:| header's parameter names in lowercase and
    values are their descriptions as [protocol-object], with following
    additional name/value pair:

      value_type [value-type?]

        The type of the parameter value, if known and representable as
        a value type.

  headers [object]

    Names are header names in lowercase (without |:| suffix) and
    values are their descriptions.  Values are JSON objects with
    following name/value pairs:

      fcast [object?]
      http [object?]
      http_equiv [object?]
      icap [object?]
      mail [object?]
      mime [object?]
      netnews [object?]
      rtsp [object?]
      s-http [object?]
      sip [object?]
      ssdp [object?]

        Descriptions for the header, when used in the protocol
        (|fcast| -> FCAST, |http| -> HTTP, |http_equiv| -> HTML |meta|
        element's pragma directive (the |http-equiv| attribute),
        |icap| -> ICAP, |mail| -> RFC 822 e-mail messages, |mime| ->
        MIME, |netnews| -> USENET news articles, |rtsp| -> RTSP,
        |s-http| -> S-HTTP, |sip| -> SIP, |ssdp| -> SSDP).  The value
        is a JSON object with following name/value pairs:

          206_representation_metadata [string?]

            If the value is |MUST|, the header MUST be generated in
            the 206 response to be same as that of the 200 response of
            the same target resource.  If the value is |SHOULD NOT|,
            the header SHOULD NOT be generated when the corresponding
            request contains an |If-Range:| header.  These are
            unclearly specified in RFC 7233
            <https://tools.ietf.org/html/rfc7233#section-4.1>.

          304_representation_metadata [string?]

            If the value is |MUST|, the header MUST be generated in
            the 304 response to be same as that of the 200 response of
            the same target resource.  If the value is |MAY|, the
            header MAY be generated in the 304 response.  These are
            unclearly specified in RFC 7232
            <https://tools.ietf.org/html/rfc7232#section-4.1>.

          accept_ [boolean]

            Whether the header is an Accept- header or not.

          authentication [boolean]

            Whether the header is classified as authentication
            according to
            <https://tools.ietf.org/html/rfc7230#section-4.1.2> or
            not.

          authentication_challenge [boolean]

            Whether the header is one of authentication challenges
            <https://tools.ietf.org/html/rfc7231#section-7.3> or not.

          authentication_credentials [boolean]

            Whether the header is used for carrying authentication
            credentials or not
            <https://tools.ietf.org/html/rfc7231#section-5.4>.

          byteranges [conformance?]

            Conformance of the existence of the header in a body part
            in a |multipart/byteranges| payload, if known.

          cache [boolean]

            Whether the header is primarily generated by caches or
            not.

          conditional [boolean]

            Whether the header is classified as conditionals
            <https://tools.ietf.org/html/rfc7231#section-5.2>,
            precondition headers
            <https://tools.ietf.org/html/rfc7232#section-3>, or
            conditional headers
            <http://tools.ietf.org/html/rfc4918#section-12.1>.

          conforming [boolean]

            If true, use of the header is conforming.  Otherwise,
            conformance is unknown.  (For |http_equiv|, use of the
            value is non-conforming if false.)

          connection_option [boolean]

            Whether the header name is used as a |connection-option|
            (i.e. a value in the |Connection:| header) or not.

          content_negotiation [boolean]

            Whether the header is classified as content negotiation
            <https://tools.ietf.org/html/rfc7231#section-5.3> or not.

          control [boolean]

            Whether the header is classfied as controls
            <https://tools.ietf.org/html/rfc7231#section-5.1> or not.
            Note that this category is different from
            |response_control_data|.

          cookie [boolean]

            Whether the header contains cookie data or not.

          cors_included [boolean]

            Whether the header name is a CORS-safelisted
            response-header name
            <https://fetch.spec.whatwg.org/#cors-safelisted-response-header-name>
            or not.  Note that the `Access-Control-Expose-Headers`
            header also affects whether a header is CORS-safelisted or
            not.

          cors_non_wildcard_request_header [boolean]

            Whether the header name is a CORS non-wildcard
            request-header name
            <https://fetch.spec.whatwg.org/#cors-non-wildcard-request-header-name>
            or not.

          deprecated [boolean]

            Whether the header is deprecated or not.

          enumerated_attr_state_name [string?]

            The state name of the HTML |http-equiv| attribute as an
            enumerated attribute, if any, in its canonical form
            (including the " state" suffix).

          fcast_cid_metadata [object]

            Whether the header is a FCAST CID metadata type
            <https://tools.ietf.org/html/rfc6968#section-2.2> or not.

          fcast_metadata [object]

            Whether the header is a FCAST metadata type
            <https://tools.ietf.org/html/rfc6968#section-3.3> or not.

          fingerprinting [boolean]

            Whether the header is specifically considered as a
            fingerprinting vector
            <https://www.whatwg.org/specs/web-apps/current-work/#fingerprinting-vector>
            <https://tools.ietf.org/html/rfc7231#section-9.7> or not.

          forbidden [boolean]

            Whether the header name is one of forbidden header names
            <https://fetch.spec.whatwg.org/#forbidden-header-name> or
            not.  Note that header names whose prefix is |Proxy-| or
            |Sec-| are not marked with this flag even though they are
            also forbidden header names.

          forbidden_response [boolean]

            Whether the header name is one of forbidden response
            header names
            <https://fetch.spec.whatwg.org/#forbidden-response-header-name>
            or not.

          id [id-in-spec?]

            The ID in the relevant specification, if any.

          message_framing [boolean]

            Whether the header is used for message framing according
            to <https://tools.ietf.org/html/rfc7230#section-4.1.2> or
            not.

          multiple [string?]

            Whether the header can be used multiple times in a message
            or not.  If the value is |#|, multiple headers can be
            specified and they can be combined as specified in the
            HTTP specification (i.e. join by |,|).  If the value is
            |#SHOULD NOT|, same as |#| but use of multiple headers is
            not RECOMMENDED.  If the value is |1|, multiple headers
            can be specified but is not allowed to be combined as
            specified in HTTP.  Otherwise, the header cannot be
            specified multiple times.

          name [string?]

            The header name in the canonical form used in the relevant
            specification of the protocol.

          not_for_http10 [boolean]

            Whether the header is allowed in HTTP/1.0 or not.

          not_for_trailer [boolean]

            Whether the header cannot be used in trailers according to
            <https://tools.ietf.org/html/rfc7230#section-4.1.2> or
            not.  See also |trailer|.

          obsolete [boolean]

            Whether the header is obsolete or not.  Note that an
            obsolete header might still be conforming.

          origin_server [boolean]

            Whether the header is primarily generated by origin
            servers or not.

          payload [boolean]

            Whether the header is a payload header
            <https://tools.ietf.org/html/rfc7231#section-3.3> or not.

          payload_processing [boolean]

            Whether the header is used to determine how to process the
            payload according to
            <https://tools.ietf.org/html/rfc7230#section-4.1.2> or
            not.

          proxy [boolean]

            Whether the header is primarily generated by proxies
            (forward or reverse) or not.

          proxy_removed [boolean]

            Whether the header has to be removed (or altered) by
            proxies before forwarding or not.

          representation_metadata [boolean]

            Whether the header is a representation metadata or
            representation header
            <https://tools.ietf.org/html/rfc7231#section-3.1> or not.

          request [object?]

            Conformance of the existence of the header in an HTTP
            request message.  The effective value of this field for an
            HTTP request message whose method is /method/ can be
            obtained by following steps:

              1. If there is a name/value pair whose name is /method/,
                 return the value and abort these steps.

              2. Otherwise, if there is a name/value pair whose name
                 is |*|, return the value and abort these steps.

              3. Otherwise, return nothing.

            If the return value is a |conformance| value, it is the
            conformance of the existence of the header in that
            context.  Otherwise, the header is not known to be
            applicable to request messages.

          request_context [boolean]

            Whether the header is classfieid as request context
            <https://tools.ietf.org/html/rfc7231#section-5.5> or not.

          request_modifier [boolean]

            Whether the header is classified as request modifier
            according to
            <https://tools.ietf.org/html/rfc7230#section-4.1.2> or
            not.

          response [object?]

            Conformance of the existence of the header in an HTTP
            response message.  The effective value of this field for
            an HTTP response message whose status code is three digits
            |/l//m//n/| can be obtained by following steps:

              1. If there is a name/value pair whose name is
                 |/l//m//n/|, return the value and abort these steps.

              2. Otherwise, if there is a name/value pair whose name
                 is |/l/xx|, return the value and abort these steps.

              3. Otherwise, if there is a name/value pair whose name
                 is |xxx|, return the value and abort these steps.

              4. Otherwise, return nothing.

            If the return value is a |conformance| value, it is the
            conformance of the existence of the header in that
            context.  Otherwise, the header is not known to be
            applicable to response messages.

          response_context [boolean]

            Whether the header is classified as response context
            <https://tools.ietf.org/html/rfc7231#section-7.4> or not.

          response_control_data [boolean]

            Whether the header is classified as response control data
            according to
            <https://tools.ietf.org/html/rfc7231#section-7.1> and
            <https://tools.ietf.org/html/rfc7230#section-4.1.2> or
            not.  Note that this category is different from |control|.

          robot [boolean]

            Whether the header is primarily generated by robots or
            not.

          routing [boolean]

            Whether the header is used for routing according to
            <https://tools.ietf.org/html/rfc7230#section-4.1.2> or
            not.

          simple [string?]

            Whether the header is a CORS-safelisted request-header
            (formerly known as simple header)
            <https://fetch.spec.whatwg.org/#simple-header> or not.  If
            |1|, it is a CORS-safelisted request-header.  If
            |contextual|, it can be a CORS-safelisted request-header
            depending on the value.  Otherwise, it is not a
            CORS-safelisted request-header.

          spec [spec?]

            The relevant specification, if any.

          trace_unsafe [boolean]

            Whether the header contains a sensitive data such that it
            should not be included in a TRACE request and should be
            excluded from a response to a TRACE request.

          trailer [boolean]

            Whether the header is explicitly allowed to be used in the
            trailer part or not.  See also |not_for_trailer|.

          url [string?]

            The URL of the specification, if any.

          validator [boolean]

            Whether the header is a validator header
            <https://tools.ietf.org/html/rfc7231#section-7.2> or not.

          value_is_list [string?]

            If the value is |*|, the value of the header is defined as
            a list of zero or more values (i.e. by ABNF |#| syntax).
            Otherwise, if the value is |+|, the value of the header is
            defined as a list of one or more values (i.e. by ABNF |1#|
            syntax).  Otherwise, the value of the header is not
            defined as a list.

          value_type [value-type?]

            The type of the header value, if known and representable
            as a value type.  If the header value is defined as a
            list, this filed has the type of its items.

          whatwg_wiki_status [string?]

            Status of the value in the WHATWG Wiki's registry page, if
            any.  |allowed| or |proposed|.

      name [string]

        The name of the header in canonical form (i.e. the form shown
        in the relevant specification, if any, or titlecased form).

      wildcard [boolean]

        Whether the |*| charater in the header name represents one or
        more characters or not.  If true, this entry represents
        properties of one or more headers sharing same header name
        pattern.

  hsts_directives [object]

    Names are directive names used in the HSTS header and values are
    their descriptions, as [protocol-object], with following
    additional name/value pair:

      value_optionality [conformance?]

        Whether the value is allowed or disallowed, if known.

      value_type [value-type?]

        The type of the value, if known.

  keep_alive_params [object]

    Names are parameter names (in lowercase) and values are their
    descriptions, as [protocol-object], with following additional
    name/value pair:

      value_type [value-type?]

        The type of the value, if known.

  list_directives [object]

    Names are list-directive names (in lowercase) and values are their
    descriptions, as [protocol-object], with following additional
    name/value pair:

      value_is_list [string?]

        If the value is |*|, the value of the directive is defined as
        a list of zero or more values (i.e. by ABNF |#| syntax).
        Otherwise, if the value is |+|, the value of the directive is
        defined as a list of one or more values (i.e. by ABNF |1#|
        syntax).  Otherwise, the value of the directive is not defined
        as a list.

      value_optionality [conformance]

        Whether the value is allowed or disallowed.

      value_type [value-type?]

        The type of the value, if known.

  meter_directives [object]

    Names are meter-directive names (in lowercase) used in |Meter:|
    headers and values are their descriptions, as [protocol-object],
    with following additional name/value pair:

      preferred_name [string?]

        The preferred directive name, if any.

      value_optionality [conformance]

        Whether the value is allowed or disallowed.

      value_type [value-type?]

        The type of the value, if known.

  negotiate_directives [object]

    Names are negotiate-directive names (in lowercase) and values are
    their descriptions, as [protocol-object], with following
    additional name/value pair:

      value_is_list [string?]

        If the value is |*|, the value of the directive is defined as
        a list of zero or more values (i.e. by ABNF |#| syntax).
        Otherwise, if the value is |+|, the value of the directive is
        defined as a list of one or more values (i.e. by ABNF |1#|
        syntax).  Otherwise, the value of the directive is not defined
        as a list.

      value_optionality [conformance]

        Whether the value is allowed or disallowed.

      value_type [value-type?]

        The type of the value, if known.

  p3p_directives [object]

    Names are directive names used in |P3P:| header and values are
    their descriptions, as [protocol-object], with following
    additional name/value pair:

      value_type [value-type?]

        The type of the value, if known.

  pkp_directives [object]

    Names are directive names used in PKP and PKP-RO headers and
    values are their descriptions, as [protocol-object], with
    following additional name/value pair:

      multiple [boolean]

        Whether multiple directives can be specified within a header
        or not.

      value_optionality [conformance?]

        Whether the value is allowed or disallowed, if known.

      value_type [value-type?]

        The type of the value, if known.

  pragma_directives [object]

    Names are pragma-directive names (in lowercase) and values are
    their descriptions, as [protocol-object], with following
    additional name/value pairs:

      request [protocol-object?]

        Descriptions of the cache-directive, applied when the
        directive is used in a request message.

      response [protocol-object?]

        Descriptions of the cache-directive, applied when the
        directive is used in a response message.

  preferences [object]

    Names are preference tokens (in lowercase) and avlues are their
    descriptions, as [protocol-object], with following additional
    name/value pairs:

      enumerated [object?]

        Names are allowed values in lowercase and values are JSON
        objects.

      params [object?]

        Names are available parameter names in lowercase and values
        are their descriptions, as [protocol-object], with following
        additional name/value pairs:

          optionality [conformance?]

            Whether the parameter is required or not.

          value_type [value-type?]

            The type of the value, if known.

      value_optionality [conformance]

        Whether the value is allowed or disallowed.

      value_type [value-type?]

        The type of the value, if known.

  protocol [object]

    Names are protocols (name and optional version) and values are
    their descriptions, as |protocol-description|.  Values are JSON
    objects with following name/value pairs:

      iana [boolean]

        Whether the protocol is registered with IANA HTTP Upgrade
        token registry or not.

      need_version [boolean]

        If true, though only the protocol name is shown, there must be
        the version component when used in some protocol context.

      server_protocol [boolean]

        Whether the protocol is used in CGI |SERVER_PROTOCOL|
        meta-variable or not.

      start_line [boolean]

        Whether the protocol is used in start-line (or equivalent) in
        HTTP or derived protocols.

      upgrade [boolean]

        Whether the protocol is used in HTTP |Upgrade:| header or not.

      via [boolean]

        Whether the protocol is used in the protocol field of the
        |Via:| header or not.

  range_units [object]

    Names are range-unit values (in lowercase) and values are their
    descriptions, as [protocol-object].

  safe_natures [object]

    Names are |Safe:| header values (in lowercase) and values are
    their descriptions, as [protocol-object].

  tcn_directives [object]

    Names are |TCN:| header's type or directive names (in lowercase)
    and values are their descriptions, as [protocol-object], with
    following additional name/value pair:

      value_is_list [string?]

        If the value is |*|, the value of the directive is defined as
        a list of zero or more values (i.e. by ABNF |#| syntax).
        Otherwise, if the value is |+|, the value of the directive is
        defined as a list of one or more values (i.e. by ABNF |1#|
        syntax).  Otherwise, the value of the directive is not defined
        as a list.

      value_optionality [conformance]

        Whether the value of the directive is allowed or disallowed.

      value_type [value-type?]

        The type of the value of the directive, if known.

  warn_codes [object]

    Names are warn-code values and values are their descriptions, as
    [protocol-object], with following additional name/value pairs:

      iana_sip [boolean]

        Whether the warn-code value is registered with the IANA
        registry for SIP or not.

      rfc2068_warn_code [string?]

        The warn-code value defined in RFC 2068, if any.

* Sources

RFC 2068, Hypertext Transfer Protocol -- HTTP/1.1
<https://tools.ietf.org/html/rfc2068>.

RFC 2183, Communicating Presentation Information in Internet Messages:
The Content-Disposition Header Field
<https://tools.ietf.org/html/rfc2183>.

RFC 2227, Simple Hit-Metering and Usage-Limiting for HTTP
<https://tools.ietf.org/html/rfc2227>.

RFC 2295, Transparent Content Negotiation in HTTP
<https://tools.ietf.org/html/rfc2295>.

RFC 2518, HTTP Extensions for Distributed Authoring -- WEBDAV
<https://tools.ietf.org/html/rfc2518>.

RFC 2617, HTTP Authentication: Basic and Digest Access Authentication
<https://tools.ietf.org/html/rfc2617>.

RFC 2660, The Secure HyperText Transfer Protocol
<https://tools.ietf.org/html/rfc2660>.

RFC 2774, An HTTP Extension Framework
<https://tools.ietf.org/html/rfc2774>.

RFC 3229, Delta encoding in HTTP
<https://tools.ietf.org/html/rfc3229>.

RFC 3230, Instance Digests in HTTP
<https://tools.ietf.org/html/rfc3230>.

RFC 3507, Internet Content Adaptation Protocol (ICAP)
<https://tools.ietf.org/html/rfc3507>.

RFC 3801, Voice Profile for Internet Mail - version 2 (VPIMv2)
<https://tools.ietf.org/html/rfc3801>.

RFC 4235, HTTP Adaptation with Open Pluggable Edge Services (OPES)
<https://tools.ietf.org/html/rfc4235>.

RFC 4918, HTTP Extensions for Web Distributed Authoring and Versioning
(WebDAV) <https://tools.ietf.org/html/rfc4918>.

RFC 5861, HTTP Cache-Control Extensions for Stale Content
<https://tools.ietf.org/html/rfc5861>.

RFC 6265, HTTP State Management Mechanism
<https://tools.ietf.org/html/rfc6265>.

RFC 6797, HTTP Strict Transport Security (HSTS)
<https://tools.ietf.org/html/rfc6797>.

RFC 6968, FCAST: Object Delivery for the Asynchronous Layered Coding
(ALC) and NACK-Oriented Reliable Multicast (NORM) Protocols
<https://tools.ietf.org/html/rfc6968>.

RFC 7168, The Hyper Text Coffee Pot Control Protocol for Tea Efflux
Appliances (HTCPCP-TEA), <https://tools.ietf.org/html/rfc7168>.

RFC 7230, Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and
Routing <https://tools.ietf.org/html/rfc7230>.

RFC 7231, Hypertext Transfer Protocol (HTTP/1.1): Semantics and
Content <https://tools.ietf.org/html/rfc7231>.

RFC 7232, Hypertext Transfer Protocol (HTTP/1.1): Conditional Requests
<https://tools.ietf.org/html/rfc7232>.

RFC 7233, Hypertext Transfer Protocol (HTTP/1.1): Range Requests
<https://tools.ietf.org/html/rfc7233>.

RFC 7234, Hypertext Transfer Protocol (HTTP/1.1): Caching
<https://tools.ietf.org/html/rfc7234>.

RFC 7235, Hypertext Transfer Protocol (HTTP/1.1): Authentication
<https://tools.ietf.org/html/rfc7231>.

RFC 7239, Forwarded HTTP Extension
<https://tools.ietf.org/html/rfc7239>.

RFC 7240, Prefer Header for HTTP
<https://tools.ietf.org/html/rfc7240>.

RFC 7469, Public Key Pinning Extension for HTTP
<https://tools.ietf.org/html/rfc7469>.

RFC 7616, HTTP Digest Access Authentication
<https://tools.ietf.org/html/rfc7616>.

Message Headers
<https://www.iana.org/assignments/message-headers/message-headers.xhtml>.

Real Time Streaming Protocol (RTSP)/1.0 Parameters
<https://www.iana.org/assignments/rtsp-parameters/rtsp-parameters.xhtml>.

Session Initiation Protocol (SIP) Parameters
<https://www.iana.org/assignments/sip-parameters/sip-parameters.xhtml>.

Hypertext Transfer Protocol (HTTP) Parameters
<https://www.iana.org/assignments/http-parameters/http-parameters.xml>.

Hypertext Transfer Protocol (HTTP) Upgrade Token Registry
<https://www.iana.org/assignments/http-upgrade-tokens/http-upgrade-tokens.xml>.

Content Disposition Values and Parameters
<https://www.iana.org/assignments/cont-disp/cont-disp.xml>.

Hypertext Transfer Protocol (HTTP) Alt-Svc Parameter Registry
<https://www.iana.org/assignments/http-alt-svc-parameters/http-alt-svc-parameters.xml>.

HTML Standard <https://html.spec.whatwg.org/>.

Fetch Standard <https://fetch.spec.whatwg.org/>.

WHATWG Wiki PragmaExtensions
<https://wiki.whatwg.org/wiki/PragmaExtensions>.

HSTS Preload Submission <https://hstspreload.appspot.com/>.

SuikaWiki:protocol <https://wiki.suikawiki.org/n/protocol$22089>.

* License

You are granted a license to use, reproduce, and create derivative
works of the JSON file and this document.

Per CC0 <https://creativecommons.org/publicdomain/zero/1.0/>, to the
extent possible under law, the author of the JSON file and this
document has waived all copyright and related or neighboring rights to
the JSON file and this document.
