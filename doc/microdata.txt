microdata.json
~~~~~~~~~~~~~~

This file contains data for the microdata vocabularies.

* Structure

The file contains a JSON object, which is a name/value pairs where
names are item types and values are corresponding definitions.

Definitions of the item identified by the item types are JSON objects
with following name/value pairs:

  id [id-in-spec?]

    The ID in the specification, identified by |spec|, for the item
    type.

  label [string?]

    The human-readable name of the item type, if any.

  props [object?]

    The names are defined property names for the item.  All possible
    property names are enumerated for vobarularies defined in the HTML
    Standard and data-vocabulary.org.  However, for the schema.org
    vocabulary, only property names directly applied to the item type
    are enumerated.  Property names for superclasses of the item type
    (see the |subclass_of| field) are also applicable to the item.  In
    addition, schema.org allows non-standard extensions.

    The values are JSON objects containing their definitions.  They
    contain following name/value pairs:

      enum [object?]

        If specified, the item value can be a text.  The value can be
        one of names in the JSON object.  Values in the JSON object
        contain definitions for the enumerated values, using following
        name/value pairs:

          id [id-in-spec?]

            The ID in the specification, identified by |spec|, for the
            value.

          spec [spec?]

            The specification in which the value is defined, if any.

      id [id-in-spec?]

        The ID in the specification, identified by |spec|, for the
        property.

      is_url [boolean]

        If true, the item value can be an absolute URL.

      item [object?]

        If specified, the item value can be an item.  The object
        represents what kind of items can be specified.

        If the object has a name/value pair with name "types", the
        item can be an item whose item type has the boolean true value
        in the corresponding JSON object.  Otherwise, the item can be
        an item without item type, and the item has to conform to the
        definition recursively contained in the object.

      max [number?]

        The maximum number of the property allowed for the item, if
        known.  The value can be inifinity.

      min [number?]

        The minimum umber of the property required for the item, if
        known.

      spec [spec?]

        The specification in which the property is defined, if any.

      unique [boolean]

        If true, when the property is specified multiple times for an
        item, their values must be unique.

      value [value-type?]

        If specified, the item value can be a text.  If the specified
        value is different from "text", the value must conform to the
        format identified by the specified value.

    Possible item values are represented by |enum|, |item|, |url|, and
    |value|.  If none of these values are specified, there is no
    restriction on the item value according to the relevant
    specification.

  spec [spec?]

    The specification in which the item type is defined, if any.

  subclass_of [object?]

    Transitive closure of known subclasses ("subClassOf" property in
    the schema.org vocabulary) of the item type.  Names are subclass
    item types, whose values are "distance" between the subclass and
    the item type.

  superclass_of [object?]

    Transitive closure of known superclasses (reverse relation of
    "subClassOf" property in the schema.org vocabulary) of the item
    type.  Names are superclass item types, whose values are
    "distance" between the superclass and the item type.

  url [string?]

    The URL of the specification in which the item type is defined, if
    known.

  use_itemid [boolean]

    Whether the vocabulary of the item type is defined to support
    global identifier for items.

* Sources

HTML Standard <http://www.whatwg.org/specs/web-apps/current-work/>.

data-vocabulary.org <http://www.data-vocabulary.org/>.

Structured data
<https://support.google.com/webmasters/topic/2643152?ref_topic=30163>.

Schema.org <http://schema.org/>.

* License

Some of data drived from schema.org Web site, which is licensed under
the Creative Commons Attribution-ShareAlike License (version 3.0).
See <http://schema.org/docs/terms.html> for full terms.
