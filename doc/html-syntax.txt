html-syntax.txt
~~~~~~~~~~~~~~~

This JSON file contains data on the HTML syntax (|text/html|
documents).

* Data structure

The file contains a JSON object, which contains following name/value
pairs:

  adjusted_mathml_attr_names [object]

    The attribute name fixup table, used in the steps to adjust MathML
    attributes
    <http://www.whatwg.org/specs/web-apps/current-work/#adjust-mathml-attributes>.
    Names are original attribute names in HTML source, normalized to
    ASCII lowercase.  Values are corresponding attribute local names.

  adjusted_ns_attr_names [object]

    The attribute name fixup table, used in the steps to adjust
    foreign attributes
    <http://www.whatwg.org/specs/web-apps/current-work/#adjust-foreign-attributes>.
    Names are original attribute names in HTML source, normalized to
    ASCII lowercase.  Values are arrays, where first items are
    namespace URLs of attributes and second items are arrays of
    namespace prefixes and local names of attributes.

  adjusted_svg_attr_names [object]

    The attribute name fixup table, used in the steps to adjust SVG
    attributes
    <http://www.whatwg.org/specs/web-apps/current-work/#adjust-svg-attributes>.
    Names are original attribute names in HTML source, normalized to
    ASCII lowercase.  Values are corresponding attribute local names.

  adjusted_svg_element_names [object]

    The element name fixup table, used in the rules for parsing tokens
    in foreign content, any other start tag, an element in the SVG
    namespace
    <http://www.whatwg.org/specs/web-apps/current-work/#parsing-main-inforeign>.
    Names are original tag names in HTML source, normalized to ASCII
    lowercase.  Values are element local names.

  dispatcher_html [object]

    XXX

  doctype_switch [object]

    Definitions related to DOCTYPE switching and conformance.  There
    are following name/value pairs:

      limited_quirks [object]
      quirks [object]

        Public and system identifiers invoking the quirks mode or the
        limited quirks mode.  Note that these are not the complete
        conditions for these modes; see HTML Standard for details.
        There are following name/value pairs:

          regexp [object]

            Names are keys and values are Perl regular expressions
            matching to possible values (only).

          values [object]

            Names are keys and values are JSON objects whose names are
            possible values and values are boolean true values.

        ... where keys and corresponding possible values are one of
        following pairs:

          public_id [object?]

            ASCII uppercased public identifiers for the mode.

          public_id_prefix [object?]

            ASCII uppercased public identifier prefixes for the mode.

          public_id_prefix_if_no_system_id [object?]

            ASCII uppercased public identifier prefixes for the mode,
            applied only when there is no system identifier.

          public_id_prefix_if_system_id [object?]

            ASCII uppercased public identifier prefixes for the mode,
            applied only when there is a system identifier.

          system_id [object?]

            ASCII uppercased system identifiers for the mode.

      legacy
      obsolete_permitted

        JSON arrays of JSON arrays of public and system identifiers
        that can be used in a DOCTYPE legacy string or an obsolete
        permitted DOCTYPE string.  Missing of a public or system
        identifier is represented by a null value.

  ims [object]

    XXX

  reset_im_by_html_element [object]

    Mapping from HTML elements to insertion modes, used in the steps
    to reset the insertion mode appropriately
    <http://www.whatwg.org/specs/web-apps/current-work/#reset-the-insertion-mode-appropriately>.
    Names of the JSON object are |always| and |last_is_false|, whose
    values are applied always or only when /last/ is false,
    respectively.  Values of the JSON object are JSON objects whose
    names are HTML element names and values are insertion modes
    (within quotation marks, such as |in body| for the "in body"
    insertion mode).  Please note that these values do not cover all
    possible cases mentioned in the steps; see HTML Standard for
    details.

  tokenizer [object]

    A machine-readable description of the HTML tokenizer, extracted
    from the HTML Standard.  The object has following name/value
    pairs:

      char_sets [object]

        Character sets referenced in |states|.  Names of the object
        are set names used in |states| and values are JSON objects,
        whose names are the shortest decimal representations of the
        code points in the set and values are boolean true values.

      initial_state_by_html_element [object]

        Initial tokenizer state set by the HTML fragment parsing
        algorithm
        <http://www.whatwg.org/specs/web-apps/current-work/#html-fragment-parsing-algorithm>
        based on the context element, represented as a JSON object.
        Names of the JSON object are |always| or
        |scripting_flag_is_disabled|, whose values are applied always
        or only when the scripting flag of the parser is disabled,
        respectively.  Values of the JSON object are JSON objects
        whose names are HTML element names and values are
        corresponding tokenizer state names.

      states [object]

        Tokenizer states.  See |bin/extract-html-tokenizer.pl| for
        details.

        State actions can have following names:

          |break|, |field|, |if|, |keyword|, |offset|, |script_state|,
          |state|, |token|, |type|, |value|, |replace_null|,
          |in_attr|, before_equals|, |possible_token_types|,
          |check_end_tag_token|, |index_offset|

        State action's |type| can have following values:

          |append|, |append-to-attr|, |append-to-temp|, |append-temp|,
          |consume-and-switch-if-keyword|, |create|, |create-attr|,
          |emit|, |emit-char|, |emit-eof|, |emit-temp|, |parse error|,
          |reconsume|, |set|, |set-empty|, |set-empty-to-attr|,
          |set-empty-to-temp|, |set-flag|, |set-to-attr|, |switch|,
          |switch-and-emit|, |switch-by-temp|,
          |process-temp-as-decimal|, |process-temp-as-hexadecimal|,
          |process-temp-as-named|, |emit-or-append-temp-to-attr|,
          |misc|

        States contains following name/value pair:

          initial_token_types [object?]

            Names are token types that can be the type of the current
            token when the tokenizer starts processing of the input in
            this state.  Values are either 1, which means the token is
            relevant or -1, which means the token is in fact
            irrelevant (i.e. the token was set by some previous state
            but was implicitly discarded such that it will never be
            accessed by the tokenizer).

      tokens [object]

        Token types used by the tokenizer.  Names are English name of
        token types and values are their descriptions, represented as
        JSON objects with following name/value pairs:

          fields [object]

            Fields of tokens.  Names are English names of fields and
            values are boolean true values.

          short_name [string]

            A short uppercase identifier of the token type, used in
            condition expressions in tree constructor definitions in
            |html-syntax.json|.

  tree_patterns [object]

    XXX

  tree_patterns_not [object]

    XXX

  tree_steps [object]

    XXX

* Related data files

The file |data/elements.json| contains some HTML syntax related data
associated with elements (e.g. tag omissionability of HTML elements).

The files |data/sets.json| and |data/maps.json| in the data-chars
repository <https://github.com/manakai/data-chars> contain character
classes and mapping tables related to HTML parsing.

* Parser instructions

The following is an incomplete illustration of instructions used to
describe HTML and XML tokenization and tree construction steps:

$pattern
  {ns => 'HTML', name => $name}
  {ns => 'HTML', name => [$name, $name]}
  {ns => 'HTML', same_tag_name_as_token => 1}
  {ns => 'SVG'}
  {category => 'special'}
  {category => 'special', except => [$name, ...]}
  {"MathML text integration point" => 1}
  {"HTML integration point" => 1}
  ['or', $pattern, ...]
  {tag_name => 1}
  $pattern_string
$pattern_string
  HTML:hoge SVG:foo,MathML:abc ...
  HTML:hoge
  HTML:*
  HTML-same-tag-name
$node
  node
  oe[0]
  oe[1]
  oe[i-1]
  oe[-2]
  oe[-1]
  adjusted current node
  adjusted insertion location parent
  head element pointer
  form element pointer
  document
  doctype
$im
  in ...
  ['original']
  ['current']
$list
  oe
  afe
  stack of template insertion modes
$scope
  all
  scope
  table
  ...
  marker
$conds
  ['and', $conds, ...]
  ['or', $conds, ...]
  [$list, 'in scope', $scope, $pattern]
  [$list, 'in scope not', $scope, $pattern]
  [$list, 'not in scope', $scope, $pattern]
  [$list, 'not in scope', $scope, $node]
  [$list, 'is empty']
  [$list, '> 1']
  [$list, 'is not empty']
  [$node, 'is', $pattern]
  [$node, 'is not', $pattern]
  [$node, 'is', $node]
  [$node, 'lc is', $pattern]
  [$node, 'lc is not', $pattern]
  [$node, 'is null']
  ['token', 'is a', $token_type]
  ['token', 'is a', 'START:NOT:'.$tag_names]
  ['token', 'has', $field]
  ['token', 'non-empty', $field]
  ['token', 'has attr', $string]
  ['token', 'has attr', [$string, $string]]
  ['token tag_name', 'is', $string]
  ['token tag_name', 'is not', [$string, $string]]
  ['token target', 'is', $string]
  ['token[type]', 'lc is not', $string]
  ['DOCTYPE system identifier', 'non-empty']
  ['legacy doctype']
  ['quirks']
  ['not iframe srcdoc document']
  ['fragment']
  ['not fragment']
  ['pending table character tokens list', 'has non-space']
  ['im', 'is', [$im, $im, ...]]
  ['form element pointer', 'is not null']
  ['frameset-ok flag', 'is', 'not ok']
type => parse error
type => pop-oe
type => pop-oe, until => $node
type => pop-oe, until => $pattern
type => pop-oe, while_not => $pattern
type => pop-oe, while_not => $pattern, except => $pattern
type => pop-oe, while => $pattern
type => pop-oe, while => $pattern, except => $pattern
type => push-oe
type => push-oe, item => $node
type => pop-template-ims
type => push-template-ims, im => $im
type => remove-oe, item => $node
type => remove-tree, item => $node
type => set-form-element-pointer
type => set-head-element-pointer
type => set-appropriate-place, target => $field_name
type => set-node-flag, target => $field_name
type => unset-node-flag, target => $field_name
type => set-compat-mode, value => $compat_mode
type => set-form-attr, attr => $name
type => set-false, target => $field_name
type => set-null, target => $field_name
type => set-empty, target => $field_name
type => set-node, value => $node
type => set-current-im, target => $field_name
type => append-to-document
type => append-to-document, item => DocumentType
type => append-to-adjusted-insertion-location
type => append-to-pending-table-character-tokens-list
type => append-marker-to-afe
type => adoption agency algorithm
type => adoption agency algorithm, tag_name => $name
type => adoption agency algorithm, tag_name => $name, remove_from_afe_and_oe => 1
type => insert a comment
type => insert a comment, position => $node
type => insert a character
type => insert a character, value => $string
type => insert a character, value => ['prompt-string']
type => insert a character, value => [$field]
type => insert-chars
type => insert-chars, foster_parenting => 1
type => insert-chars, value => ['prompt-string']
type => insert-chars, value => [$field]
type => insert an HTML element
type => insert an HTML element, foster_parenting => 1
type => insert an HTML element, with_script_flags => 1
type => insert an HTML element, foster_parenting => 1, with_script_flags => 1
type => insert an HTML element, tag_name => $name, attrs => none
type => insert an HTML element, tag_name => $name, attrs => isindex
  , possible_tag_names => {associate_form_owner => boolean}
type => insert a foreign element, ns => SVG
type => insert a foreign element, ns => MathML
type => insert a foreign element, ns => SVG, foster_parenting => 1
type => insert a foreign element, ns => MathML, foster_parenting => 1
type => insert a foreign element, ns => inherit
type => create an HTML element
  , possible_tag_names => {associate_form_owner => boolean}
type => create an HTML element, local_name => $name, attrs => none
type => create an HTML element, intended_parent => $node
type => generate implied end tags
type => generate implied end tags, except => $pattern
type => generate all implied end tags thoroughly
type => set-attrs-if-missing, node => $node
type => fixup-svg-tag-name
type => if, cond => $conds, actions => $actions
type => if, cond => $conds, actions => $actions, false_actions => $actions
type => doctype-switch
type => change-the-encoding-if-appropriate
type => appcache-processing
type => appcache-processing, can_have_manifest => 1
type => script-processing-1
type => script-processing-2
type => ignore-next-lf

type => switch the tokenizer, state => $state
type => close a p element
type => clear the stack back to a table context
type => clear the stack back to a table body context
type => clear the stack back to a table row context
type => close the cell
type => reconstruct the active formatting elements
type => push onto the list of active formatting elements
type => clear the list of active formatting elements up to the last marker
type => acknowledge the token's self-closing flag
type => acknowledge the token's self-closing flag, foreign => 1
type => reset the insertion mode appropriately
type => generic raw text element parsing algorithm
type => generic RCDATA element parsing algorithm
type => change the token's tag name, tag_name => $name
type => adjust SVG attributes
type => adjust MathML attributes
type => adjust foreign attributes
type => take a deep breath
type => stop parsing
type => for-each-reverse-oe-as-node, actions => $actions, between_actions => $actions
type => USING-THE-RULES-FOR, im => $im
type => USING-THE-RULES-FOR, im => $im, foster_parenting => 1

type => reprocess the token
type => reprocess pending table character tokens list, FIELD => ..., im => $im
type => process-using-current-im
type => process-using-in-body-im


type => text-with-optional-ws-prefix, ws_actions => $actions, actons => $actions
type => process-chars,
    [null_char_actions => $actions], [null_seq_actions => $actions],
    [ws_char_actions => $actions], [ws_seq_actions => $actions],
    [char_actions => $actions], actions => $actions,
    [pending_table_character_tokens => 1]

* Source

HTML Standard <http://www.whatwg.org/specs/web-apps/current-work/>.

* License

You are granted a license to use, reproduce, and create derivative
works of the JSON file.

The JSON file contains data extracted from HTML Standard.  "Written by
Ian Hickson (Google, ian@hixie.ch) - Parts © Copyright 2004-2014 Apple
Inc., Mozilla Foundation, and Opera Software ASA; You are granted a
license to use, reproduce and create derivative works of this
document."
